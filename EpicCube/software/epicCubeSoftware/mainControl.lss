
mainControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000021a6  0000223a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800114  00800114  0000224e  2**0
                  ALLOC
  3 .debug_aranges 00000270  00000000  00000000  0000224e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000005f7  00000000  00000000  000024be  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002166  00000000  00000000  00002ab5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000965  00000000  00000000  00004c1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002e8a  00000000  00000000  00005580  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003e0  00000000  00000000  0000840c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000877  00000000  00000000  000087ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000014af  00000000  00000000  00009063  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002d8  00000000  00000000  0000a512  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
/**
*	This will convert the char string into a decimal. assuming correct formatting
 *if error it will return 0.
 */
uint16_t convertAsciiToInt(char*temp, uint16_t size)
{
       0:	4c c4       	rjmp	.+2200   	; 0x89a <__ctors_end>
	return c;
}

// number of bytes available in the receive buffer
uint8_t usb_serial_available(void)
{
       2:	00 00       	nop
			return;
	}
}

void PWMStopTimer(uint8_t timer)// we are going with the physical pin numbers Stop counter
{
       4:	68 c4       	rjmp	.+2256   	; 0x8d6 <__bad_interrupt>
       6:	00 00       	nop
       8:	66 c4       	rjmp	.+2252   	; 0x8d6 <__bad_interrupt>
       a:	00 00       	nop
       c:	64 c4       	rjmp	.+2248   	; 0x8d6 <__bad_interrupt>
       e:	00 00       	nop
      10:	62 c4       	rjmp	.+2244   	; 0x8d6 <__bad_interrupt>
      12:	00 00       	nop
      14:	60 c4       	rjmp	.+2240   	; 0x8d6 <__bad_interrupt>
      16:	00 00       	nop
      18:	5e c4       	rjmp	.+2236   	; 0x8d6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5c c4       	rjmp	.+2232   	; 0x8d6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5a c4       	rjmp	.+2228   	; 0x8d6 <__bad_interrupt>
      22:	00 00       	nop
      24:	58 c4       	rjmp	.+2224   	; 0x8d6 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 d4 08 	jmp	0x11a8	; 0x11a8 <__vector_10>
      2c:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__vector_11>
      30:	52 c4       	rjmp	.+2212   	; 0x8d6 <__bad_interrupt>
      32:	00 00       	nop
      34:	50 c4       	rjmp	.+2208   	; 0x8d6 <__bad_interrupt>
      36:	00 00       	nop
      38:	4e c4       	rjmp	.+2204   	; 0x8d6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4c c4       	rjmp	.+2200   	; 0x8d6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4a c4       	rjmp	.+2196   	; 0x8d6 <__bad_interrupt>
      42:	00 00       	nop
      44:	48 c4       	rjmp	.+2192   	; 0x8d6 <__bad_interrupt>
      46:	00 00       	nop
      48:	46 c4       	rjmp	.+2188   	; 0x8d6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	44 c4       	rjmp	.+2184   	; 0x8d6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	42 c4       	rjmp	.+2180   	; 0x8d6 <__bad_interrupt>
      52:	00 00       	nop
      54:	40 c4       	rjmp	.+2176   	; 0x8d6 <__bad_interrupt>
      56:	00 00       	nop
      58:	3e c4       	rjmp	.+2172   	; 0x8d6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3c c4       	rjmp	.+2168   	; 0x8d6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3a c4       	rjmp	.+2164   	; 0x8d6 <__bad_interrupt>
      62:	00 00       	nop
      64:	38 c4       	rjmp	.+2160   	; 0x8d6 <__bad_interrupt>
      66:	00 00       	nop
      68:	36 c4       	rjmp	.+2156   	; 0x8d6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	34 c4       	rjmp	.+2152   	; 0x8d6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	32 c4       	rjmp	.+2148   	; 0x8d6 <__bad_interrupt>
      72:	00 00       	nop
      74:	30 c4       	rjmp	.+2144   	; 0x8d6 <__bad_interrupt>
      76:	00 00       	nop
      78:	2e c4       	rjmp	.+2140   	; 0x8d6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2c c4       	rjmp	.+2136   	; 0x8d6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2a c4       	rjmp	.+2132   	; 0x8d6 <__bad_interrupt>
      82:	00 00       	nop
      84:	28 c4       	rjmp	.+2128   	; 0x8d6 <__bad_interrupt>
      86:	00 00       	nop
      88:	26 c4       	rjmp	.+2124   	; 0x8d6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	24 c4       	rjmp	.+2120   	; 0x8d6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	22 c4       	rjmp	.+2116   	; 0x8d6 <__bad_interrupt>
      92:	00 00       	nop
      94:	20 c4       	rjmp	.+2112   	; 0x8d6 <__bad_interrupt>
      96:	00 00       	nop
      98:	b7 08       	sbc	r11, r7
      9a:	b4 08       	sbc	r11, r4
      9c:	b1 08       	sbc	r11, r1
      9e:	ae 08       	sbc	r10, r14
      a0:	ab 08       	sbc	r10, r11
      a2:	a8 08       	sbc	r10, r8
      a4:	a5 08       	sbc	r10, r5
      a6:	a2 08       	sbc	r10, r2
      a8:	9f 08       	sbc	r9, r15
      aa:	9c 08       	sbc	r9, r12
      ac:	99 08       	sbc	r9, r9
      ae:	96 08       	sbc	r9, r6
      b0:	93 08       	sbc	r9, r3
      b2:	90 08       	sbc	r9, r0
      b4:	8d 08       	sbc	r8, r13
      b6:	8a 08       	sbc	r8, r10
      b8:	87 08       	sbc	r8, r7
      ba:	84 08       	sbc	r8, r4
      bc:	81 08       	sbc	r8, r1
      be:	7e 08       	sbc	r7, r14
      c0:	7b 08       	sbc	r7, r11
      c2:	78 08       	sbc	r7, r8
      c4:	75 08       	sbc	r7, r5
      c6:	72 08       	sbc	r7, r2
      c8:	6f 08       	sbc	r6, r15
      ca:	6c 08       	sbc	r6, r12
      cc:	69 08       	sbc	r6, r9
      ce:	66 08       	sbc	r6, r6
      d0:	63 08       	sbc	r6, r3
      d2:	60 08       	sbc	r6, r0
      d4:	5d 08       	sbc	r5, r13
      d6:	5a 08       	sbc	r5, r10
      d8:	57 08       	sbc	r5, r7
      da:	54 08       	sbc	r5, r4
      dc:	51 08       	sbc	r5, r1
      de:	4e 08       	sbc	r4, r14
      e0:	4b 08       	sbc	r4, r11
      e2:	48 08       	sbc	r4, r8
      e4:	45 08       	sbc	r4, r5
      e6:	42 08       	sbc	r4, r2
      e8:	3f 08       	sbc	r3, r15
      ea:	3c 08       	sbc	r3, r12
      ec:	39 08       	sbc	r3, r9
      ee:	36 08       	sbc	r3, r6
      f0:	33 08       	sbc	r3, r3
      f2:	30 08       	sbc	r3, r0
      f4:	2d 08       	sbc	r2, r13
      f6:	2a 08       	sbc	r2, r10
      f8:	27 08       	sbc	r2, r7
      fa:	24 08       	sbc	r2, r4
      fc:	21 08       	sbc	r2, r1
      fe:	1e 08       	sbc	r1, r14
     100:	1b 08       	sbc	r1, r11
     102:	18 08       	sbc	r1, r8
     104:	15 08       	sbc	r1, r5
     106:	12 08       	sbc	r1, r2
     108:	0f 08       	sbc	r0, r15
     10a:	0c 08       	sbc	r0, r12
     10c:	09 08       	sbc	r0, r9
     10e:	06 08       	sbc	r0, r6
     110:	03 08       	sbc	r0, r3
     112:	00 08       	sbc	r0, r0
     114:	fd 07       	cpc	r31, r29
     116:	fa 07       	cpc	r31, r26
     118:	f7 07       	cpc	r31, r23

0000011a <__c.2027>:
     11a:	0d 0a 00                                            ...

0000011d <__c.2025>:
     11d:	45 78 61 6d 70 6c 65 73 20 28 74 6f 2d 64 6f 29     Examples (to-do)
     12d:	0d 0a 00                                            ...

00000130 <__c.2023>:
     130:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     140:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     150:	2a 2a 2a 2a 2a 2a 2a 0d 0a 00                       *******...

0000015a <__c.2021>:
     15a:	53 70 72 69 6e 6b 6c 65 72 3f 3a 09 47 65 74 73     Sprinkler?:.Gets
     16a:	20 73 74 61 74 75 73 20 6f 66 20 73 70 72 69 6e      status of sprin
     17a:	6b 6c 65 72 0d 0a 00                                kler...

00000181 <__c.2019>:
     181:	53 70 72 69 6e 6b 6c 65 72 23 23 23 3a 09 74 75     Sprinkler###:.tu
     191:	72 6e 73 20 6f 6e 2f 6f 66 66 20 73 65 63 74 69     rns on/off secti
     1a1:	6f 6e 20 6f 66 20 73 70 72 69 6e 6b 6c 65 72 73     on of sprinklers
     1b1:	0d 0a 00                                            ...

000001b4 <__c.2017>:
     1b4:	47 61 72 61 67 65 3a 09 09 50 75 6c 73 65 73 20     Garage:..Pulses 
     1c4:	74 68 65 20 47 61 72 61 67 65 20 6f 70 65 6e 20     the Garage open 
     1d4:	6f 72 20 63 6c 6f 73 65 64 0d 0a 00                 or closed...

000001e0 <__c.2015>:
     1e0:	48 56 41 43 23 3a 09 09 53 65 74 73 20 74 68 65     HVAC#:..Sets the
     1f0:	20 48 56 41 43 20 74 6f 20 61 20 73 70 65 63 69      HVAC to a speci
     200:	66 69 63 20 73 74 61 74 65 0d 0a 00                 fic state...

0000020c <__c.2013>:
     20c:	48 56 41 43 3f 3a 09 09 52 65 74 75 72 6e 73 20     HVAC?:..Returns 
     21c:	48 56 41 43 20 73 74 61 74 75 73 0d 0a 00           HVAC status...

0000022a <__c.2011>:
     22a:	54 65 6d 70 3f 23 23 3a 09 67 65 74 73 20 74 68     Temp?##:.gets th
     23a:	65 20 74 65 6d 70 65 72 61 74 75 72 65 20 76 61     e temperature va
     24a:	6c 75 65 20 6f 66 20 74 68 65 20 73 70 65 63 69     lue of the speci
     25a:	66 69 63 20 73 65 6e 73 6f 72 0d 0a 00              fic sensor...

00000267 <__c.2009>:
     267:	44 61 6d 70 65 72 3f 23 23 3a 09 52 65 70 6c 69     Damper?##:.Repli
     277:	65 73 20 77 68 65 74 68 65 72 20 64 61 6d 70 65     es whether dampe
     287:	72 20 69 73 20 6f 70 65 6e 20 6f 72 20 63 6c 6f     r is open or clo
     297:	73 65 64 0d 0a 00                                   sed...

0000029d <__c.2007>:
     29d:	44 61 6d 70 65 72 23 23 23 3a 09 54 75 72 6e 73     Damper###:.Turns
     2ad:	20 6f 6e 20 61 6e 64 20 6f 66 66 20 44 61 6d 70      on and off Damp
     2bd:	65 72 0d 0a 00                                      er...

000002c2 <__c.2005>:
     2c2:	2d 68 65 6c 70 3a 09 09 70 72 6f 76 69 64 65 73     -help:..provides
     2d2:	20 74 68 69 73 20 6d 65 6e 75 0d 0a 00               this menu...

000002df <__c.2003>:
     2df:	4c 69 73 74 20 6f 66 20 61 76 61 69 6c 61 62 6c     List of availabl
     2ef:	65 20 63 6f 6d 6d 61 6e 64 73 0d 0a 0d 0a 00        e commands.....

000002fe <__c.2001>:
     2fe:	48 45 4c 50 20 49 20 64 6f 6e 27 74 20 6b 6e 6f     HELP I don't kno
     30e:	77 20 77 68 61 74 20 74 6f 20 64 6f 0d 0a 00        w what to do...

0000031d <__c.1999>:
     31d:	0d 0a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ..**************
     32d:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     33d:	2a 2a 2a 2a 2a 2a 2a 2a 2a 0d 0a 00                 *********...

00000349 <__c.1995>:
     349:	09 46 61 6e 20 43 6f 6d 6d 61 6e 64 0d 0a 00        .Fan Command...

00000358 <__c.1993>:
     358:	0d 0a 00                                            ...

0000035b <__c.1990>:
     35b:	09 46 61 6e 20 50 72 69 6e 74 20 53 74 61 74 75     .Fan Print Statu
     36b:	73 20 53 65 63 74 69 6f 6e 3e 3e 3e 0d 0a 00        s Section>>>...

0000037a <__c.1987>:
     37a:	09 09 46 61 6e 20 4f 6e 2f 4f 66 66 20 53 74 61     ..Fan On/Off Sta
     38a:	74 75 73 20 53 65 63 74 69 6f 6e 0d 0a 00           tus Section...

00000398 <__c.1984>:
     398:	09 09 46 61 6e 20 53 70 65 65 64 20 53 74 61 74     ..Fan Speed Stat
     3a8:	75 73 20 53 65 63 74 69 6f 6e 0d 0a 00              us Section...

000003b5 <__c.1982>:
     3b5:	09 46 61 6e 20 53 74 61 74 75 73 20 73 65 63 74     .Fan Status sect
     3c5:	69 6f 6e 0d 0a 00                                   ion...

000003cb <__c.1980>:
     3cb:	46 61 6e 20 53 65 63 74 69 6f 6e 0d 0a 00           Fan Section...

000003d9 <__c.1977>:
     3d9:	53 70 72 69 6e 6b 6c 65 72 20 53 65 63 74 69 6f     Sprinkler Sectio
     3e9:	6e 0d 0a 00                                         n...

000003ed <__c.1975>:
     3ed:	0d 0a 00                                            ...

000003f0 <__c.1971>:
     3f0:	0a 0d 00                                            ...

000003f3 <__c.1968>:
     3f3:	53 65 72 76 65 72 20 63 6f 6e 74 72 6f 6c 6c 65     Server controlle
     403:	64 20 4f 46 46 0d 0a 00                             d OFF...

0000040b <__c.1966>:
     40b:	53 65 72 76 65 72 20 63 6f 6e 74 72 6f 6c 6c 65     Server controlle
     41b:	64 20 46 61 6e 20 61 6e 64 20 43 6f 6f 6c 69 6e     d Fan and Coolin
     42b:	67 0d 0a 00                                         g...

0000042f <__c.1964>:
     42f:	53 65 72 76 65 72 20 63 6f 6e 74 72 6f 6c 6c 65     Server controlle
     43f:	64 20 46 61 6e 20 61 6e 64 20 48 65 61 74 69 6e     d Fan and Heatin
     44f:	67 0d 0a 00                                         g...

00000453 <__c.1962>:
     453:	53 65 72 76 65 72 20 63 6f 6e 74 72 6f 6c 6c 65     Server controlle
     463:	64 20 46 61 6e 0d 0a 00                             d Fan...

0000046b <__c.1960>:
     46b:	53 65 72 76 65 72 20 63 6f 6e 74 72 6f 6c 6c 65     Server controlle
     47b:	64 20 6f 66 66 0d 0a 00                             d off...

00000483 <__c.1958>:
     483:	38 0d 0a 00                                         8...

00000487 <__c.1956>:
     487:	34 0d 0a 00                                         4...

0000048b <__c.1954>:
     48b:	36 0d 0a 00                                         6...

0000048f <__c.1952>:
     48f:	35 0d 0a 00                                         5...

00000493 <__c.1950>:
     493:	37 0d 0a 00                                         7...

00000497 <__c.1948>:
     497:	31 0d 0a 00                                         1...

0000049b <__c.1946>:
     49b:	33 0d 0a 00                                         3...

0000049f <__c.1944>:
     49f:	32 0d 0a 00                                         2...

000004a3 <__c.1942>:
     4a3:	65 6e 74 65 72 69 6e 67 20 48 56 41 43 0d 0a 00     entering HVAC...

000004b3 <__c.1940>:
     4b3:	44 61 6d 70 65 72 20 43 6c 6f 73 65 20 43 6f 6d     Damper Close Com
     4c3:	70 6c 65 74 65 2e 0d 0a 00                          plete....

000004cc <__c.1938>:
     4cc:	0d 0a 00                                            ...

000004cf <__c.1936>:
     4cf:	53 74 61 72 74 69 6e 67 20 74 6f 20 63 6c 6f 73     Starting to clos
     4df:	65 20 44 61 6d 70 65 72 00                          e Damper.

000004e8 <__c.1933>:
     4e8:	44 61 6d 70 65 72 20 4f 70 65 6e 20 43 6f 6d 70     Damper Open Comp
     4f8:	6c 65 74 65 2e 0d 0a 00                             lete....

00000500 <__c.1931>:
     500:	0d 0a 00                                            ...

00000503 <__c.1929>:
     503:	45 52 52 4f 52 3a 31 20 0d 0a 66 6f 72 6d 61 74     ERROR:1 ..format
     513:	20 74 6f 20 73 6d 61 6c 6c 2c 20 73 65 65 20 68      to small, see h
     523:	65 6c 70 20 66 6f 72 20 64 65 74 61 69 6c 73 0d     elp for details.
     533:	0a 00                                               ..

00000535 <__c.1927>:
     535:	0d 0a 00                                            ...

00000538 <__c.1925>:
     538:	52 65 63 65 69 76 65 64 3a 20 00                    Received: .

00000543 <__c.1875>:
     543:	0d 0a 00                                            ...

00000546 <__c.1872>:
     546:	3e 20 00                                            > .

00000549 <__c.1870>:
     549:	0d 0a 74 6f 20 72 65 63 65 69 76 65 20 67 65 6e     ..to receive gen
     559:	65 72 61 6c 20 68 65 6c 70 20 74 79 70 65 20 22     eral help type "
     569:	2d 68 65 6c 70 22 0d 0a 0d 0a 3e 00                 -help"....>.

00000575 <__c.1868>:
     575:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     585:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     595:	2a 2a 2a 2a 2a 2a 2a 00                             *******.

0000059d <__c.1866>:
     59d:	0d 0a 57 65 6c 63 6f 6d 65 20 74 6f 20 45 70 69     ..Welcome to Epi
     5ad:	63 20 43 75 62 65 20 53 65 72 69 61 6c 20 43 6f     c Cube Serial Co
     5bd:	6e 74 72 6f 6c 20 56 65 72 73 69 6f 6e 20 30 2e     ntrol Version 0.
     5cd:	30 2e 31 0d 0a 00                                   0.1...

000005d3 <__c.1864>:
     5d3:	0d 0a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ..**************
     5e3:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     5f3:	2a 2a 2a 2a 2a 2a 2a 2a 2a 00                       *********.

000005fd <descriptor_list>:
     5fd:	00 01 00 00 31 06 12 00 02 00 00 43 06 43 00 03     ....1......C.C..
     60d:	00 00 86 06 04 01 03 09 04 8a 06 1a 02 03 09 04     ................
     61d:	a6 06 16 03 03 09 04 be 06 0c                       ..........

00000627 <endpoint_config_table>:
     627:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

00000631 <device_descriptor>:
     631:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     641:	03 01                                               ..

00000643 <config1_descriptor>:
     643:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     653:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     663:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     673:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     683:	40 00 00                                            @..

00000686 <string0>:
     686:	04 03 09 04                                         ....

0000068a <string1>:
     68a:	1a 03 4c 00 65 00 76 00 69 00 20 00 42 00 61 00     ..L.e.v.i. .B.a.
     69a:	6c 00 6c 00 69 00 6e 00 67 00 00 00                 l.l.i.n.g...

000006a6 <string2>:
     6a6:	16 03 55 00 53 00 42 00 20 00 53 00 65 00 72 00     ..U.S.B. .S.e.r.
     6b6:	69 00 61 00 6c 00 00 00                             i.a.l...

000006be <string3>:
     6be:	0c 03 31 00 32 00 33 00 34 00 35 00 00 00           ..1.2.3.4.5...

000006cc <__c.1590>:
     6cc:	0d 0a 00                                            ...

000006cf <__c.1587>:
     6cf:	54 65 73 74 20 4f 75 74 70 75 74 73 20 6f 66 20     Test Outputs of 
     6df:	41 42 43 44 3a 0d 0a 00                             ABCD:...

000006e7 <__c.1557>:
     6e7:	43 6c 6f 73 65 42 75 74 74 6f 6e 20 69 73 20 4c     CloseButton is L
     6f7:	6f 77 20 61 6e 64 20 4f 70 65 6e 20 42 75 74 74     ow and Open Butt
     707:	6f 6e 20 69 73 20 48 49 47 48 0d 0a 00              on is HIGH...

00000714 <__c.1555>:
     714:	4f 50 45 4e 42 55 53 20 69 73 20 4c 4f 57 20 61     OPENBUS is LOW a
     724:	6e 64 20 43 4c 4f 53 45 20 42 75 74 74 6f 6e 20     nd CLOSE Button 
     734:	69 73 20 48 49 47 48 0d 0a 00                       is HIGH...

0000073e <__c.1531>:
     73e:	20 44 61 6d 70 65 72 20 43 6c 6f 73 65 20 45 72      Damper Close Er
     74e:	72 6f 72 3a 54 49 4d 45 4f 55 54 0d 0a 00           ror:TIMEOUT...

0000075c <__c.1526>:
     75c:	0d 0a 00                                            ...

0000075f <__c.1524>:
     75f:	4d 6f 64 54 69 6d 65 72 3a 20 00                    ModTimer: .

0000076a <__c.1520>:
     76a:	0d 0a 45 6e 74 65 72 20 43 6c 6f 73 65 44 61 6d     ..Enter CloseDam
     77a:	70 65 72 20 53 65 63 74 69 6f 6e 20 0d 0a 00        per Section ...

00000789 <__c.1518>:
     789:	0d 0a 44 61 6d 70 65 72 3a 20 00                    ..Damper: .

00000794 <__c.1494>:
     794:	0d 0a 45 6e 74 65 72 20 4f 70 65 6e 44 61 6d 70     ..Enter OpenDamp
     7a4:	65 72 20 53 65 63 74 69 6f 6e 20 0d 0a 00           er Section ...

000007b2 <__c.1491>:
     7b2:	0d 0a 44 61 6d 70 65 72 3a 20 00                    ..Damper: .

000007bd <__c.1364>:
     7bd:	45 52 52 4f 52 54 45 4d 50 0a 0d 00                 ERRORTEMP...

000007c9 <__c.1413>:
     7c9:	69 73 4f 6e 20 3d 3d 20 30 0d 0a 00                 isOn == 0...

000007d5 <__c.1411>:
     7d5:	53 65 63 74 69 6f 6e 20 35 0d 0a 00                 Section 5...

000007e1 <__c.1409>:
     7e1:	69 73 4f 6e 20 3d 3d 20 30 0d 0a 00                 isOn == 0...

000007ed <__c.1407>:
     7ed:	53 65 63 74 69 6f 6e 20 34 0d 0a 00                 Section 4...

000007f9 <__c.1405>:
     7f9:	69 73 4f 6e 20 3d 3d 20 30 0d 0a 00                 isOn == 0...

00000805 <__c.1403>:
     805:	53 65 63 74 69 6f 6e 20 33 0d 0a 00                 Section 3...

00000811 <__c.1401>:
     811:	69 73 4f 6e 20 3d 3d 20 30 0d 0a 00                 isOn == 0...

0000081d <__c.1399>:
     81d:	53 65 63 74 69 6f 6e 20 32 0d 0a 00                 Section 2...

00000829 <__c.1397>:
     829:	69 73 4f 6e 20 3d 3d 20 30 0d 0a 00                 isOn == 0...

00000835 <__c.1395>:
     835:	69 73 4f 6e 20 3d 3d 20 31 0d 0a 00                 isOn == 1...

00000841 <__c.1393>:
     841:	45 6e 74 65 72 20 53 65 63 74 69 6f 6e 20 31 0d     Enter Section 1.
     851:	0a 00                                               ..

00000853 <__c.1391>:
     853:	69 73 4f 6e 20 3d 3d 20 31 0d 0a 00                 isOn == 1...

0000085f <__c.1389>:
     85f:	53 65 63 74 69 6f 6e 20 3d 3d 20 27 30 27 0d 0a     Section == '0'..
     86f:	00                                                  .

00000870 <__c.1387>:
     870:	53 65 63 74 69 6f 6e 20 69 73 20 3e 20 35 0d 0a     Section is > 5..
     880:	00                                                  .

00000881 <__c.1385>:
     881:	45 6e 74 65 72 65 64 20 53 70 72 69 6e 6b 6c 65     Entered Sprinkle
     891:	72 43 6e 74 72 6c 0d 0a 00                          rCntrl...

0000089a <__ctors_end>:
     89a:	11 24       	eor	r1, r1
     89c:	1f be       	out	0x3f, r1	; 63
     89e:	cf ef       	ldi	r28, 0xFF	; 255
     8a0:	d0 e2       	ldi	r29, 0x20	; 32
     8a2:	de bf       	out	0x3e, r29	; 62
     8a4:	cd bf       	out	0x3d, r28	; 61

000008a6 <__do_copy_data>:
     8a6:	11 e0       	ldi	r17, 0x01	; 1
     8a8:	a0 e0       	ldi	r26, 0x00	; 0
     8aa:	b1 e0       	ldi	r27, 0x01	; 1
     8ac:	e6 ea       	ldi	r30, 0xA6	; 166
     8ae:	f1 e2       	ldi	r31, 0x21	; 33
     8b0:	00 e0       	ldi	r16, 0x00	; 0
     8b2:	0b bf       	out	0x3b, r16	; 59
     8b4:	02 c0       	rjmp	.+4      	; 0x8ba <__do_copy_data+0x14>
     8b6:	07 90       	elpm	r0, Z+
     8b8:	0d 92       	st	X+, r0
     8ba:	a4 31       	cpi	r26, 0x14	; 20
     8bc:	b1 07       	cpc	r27, r17
     8be:	d9 f7       	brne	.-10     	; 0x8b6 <__do_copy_data+0x10>

000008c0 <__do_clear_bss>:
     8c0:	11 e0       	ldi	r17, 0x01	; 1
     8c2:	a4 e1       	ldi	r26, 0x14	; 20
     8c4:	b1 e0       	ldi	r27, 0x01	; 1
     8c6:	01 c0       	rjmp	.+2      	; 0x8ca <.do_clear_bss_start>

000008c8 <.do_clear_bss_loop>:
     8c8:	1d 92       	st	X+, r1

000008ca <.do_clear_bss_start>:
     8ca:	a1 32       	cpi	r26, 0x21	; 33
     8cc:	b1 07       	cpc	r27, r17
     8ce:	e1 f7       	brne	.-8      	; 0x8c8 <.do_clear_bss_loop>
     8d0:	56 d2       	rcall	.+1196   	; 0xd7e <main>
     8d2:	0c 94 d1 10 	jmp	0x21a2	; 0x21a2 <_exit>

000008d6 <__bad_interrupt>:
     8d6:	94 cb       	rjmp	.-2264   	; 0x0 <__vectors>

000008d8 <initializeGlobal>:
/**
*	initializes the variables used for Temperature Sense, Sprinkler, and Damper	
**/
void initializeGlobal(void)
{
	DEMUX_A_CONFIG;
     8d8:	6f 9a       	sbi	0x0d, 7	; 13
	DEMUX_B_CONFIG;
     8da:	20 9a       	sbi	0x04, 0	; 4
	DEMUX_C_CONFIG;
     8dc:	21 9a       	sbi	0x04, 1	; 4
	DEMUX_D_CONFIG;
     8de:	22 9a       	sbi	0x04, 2	; 4
	// initialize all of the idifferent pins
	DAMPER_ENABLE_CONFIG;
     8e0:	6e 9a       	sbi	0x0d, 6	; 13
}
     8e2:	08 95       	ret

000008e4 <convert_by_division>:
/**
*	This function was taken from 	Stackoverflow.com/questions/3694100/converting-to-ascii-in-c
*	It converts the int into a string.
**/
void convert_by_division(uint16_t value, char *temp)
{
     8e4:	9c 01       	movw	r18, r24
     8e6:	fb 01       	movw	r30, r22
	temp[0] = (value % 10) + '0';
     8e8:	6a e0       	ldi	r22, 0x0A	; 10
     8ea:	70 e0       	ldi	r23, 0x00	; 0
     8ec:	0e 94 bd 10 	call	0x217a	; 0x217a <__udivmodhi4>
     8f0:	80 5d       	subi	r24, 0xD0	; 208
     8f2:	80 83       	st	Z, r24
	temp[1] = (value % 100) / 10 + '0';
     8f4:	c9 01       	movw	r24, r18
     8f6:	64 e6       	ldi	r22, 0x64	; 100
     8f8:	70 e0       	ldi	r23, 0x00	; 0
     8fa:	0e 94 bd 10 	call	0x217a	; 0x217a <__udivmodhi4>
     8fe:	6a e0       	ldi	r22, 0x0A	; 10
     900:	70 e0       	ldi	r23, 0x00	; 0
     902:	0e 94 bd 10 	call	0x217a	; 0x217a <__udivmodhi4>
     906:	60 5d       	subi	r22, 0xD0	; 208
     908:	61 83       	std	Z+1, r22	; 0x01
	temp[2] = (value % 1000) / 100 + '0';
     90a:	c9 01       	movw	r24, r18
     90c:	68 ee       	ldi	r22, 0xE8	; 232
     90e:	73 e0       	ldi	r23, 0x03	; 3
     910:	0e 94 bd 10 	call	0x217a	; 0x217a <__udivmodhi4>
     914:	9c 01       	movw	r18, r24
     916:	64 e6       	ldi	r22, 0x64	; 100
     918:	70 e0       	ldi	r23, 0x00	; 0
     91a:	0e 94 bd 10 	call	0x217a	; 0x217a <__udivmodhi4>
     91e:	60 5d       	subi	r22, 0xD0	; 208
     920:	62 83       	std	Z+2, r22	; 0x02
	temp[3] = (value % 1000) / 1000 + '0';
     922:	c9 01       	movw	r24, r18
     924:	68 ee       	ldi	r22, 0xE8	; 232
     926:	73 e0       	ldi	r23, 0x03	; 3
     928:	0e 94 bd 10 	call	0x217a	; 0x217a <__udivmodhi4>
     92c:	60 5d       	subi	r22, 0xD0	; 208
     92e:	63 83       	std	Z+3, r22	; 0x03
}
     930:	08 95       	ret

00000932 <send_str>:
/** 
*	Send a string to the USB serial port.  The string must be in
* 	flash memory, using PSTR
**/
void send_str(const char *s)
{
     932:	cf 93       	push	r28
     934:	df 93       	push	r29
     936:	ec 01       	movw	r28, r24
     938:	fe 01       	movw	r30, r28
	char c;
	while (1) {
		c = pgm_read_byte(s++);
     93a:	21 96       	adiw	r28, 0x01	; 1
     93c:	84 91       	lpm	r24, Z+
		if (!c) break;
     93e:	88 23       	and	r24, r24
     940:	11 f0       	breq	.+4      	; 0x946 <send_str+0x14>
		usb_serial_putchar(c);
     942:	c5 d2       	rcall	.+1418   	; 0xece <usb_serial_putchar>
     944:	f9 cf       	rjmp	.-14     	; 0x938 <send_str+0x6>
	}
	
}
     946:	df 91       	pop	r29
     948:	cf 91       	pop	r28
     94a:	08 95       	ret

0000094c <parse_and_execute_command>:
/**
*	This function will take the input command, and parse it, 
*	then execute the appropriate command.
**/
void parse_and_execute_command(const char *buf, uint8_t num)
{
     94c:	ff 92       	push	r15
     94e:	0f 93       	push	r16
     950:	1f 93       	push	r17
     952:	df 93       	push	r29
     954:	cf 93       	push	r28
     956:	00 d0       	rcall	.+0      	; 0x958 <parse_and_execute_command+0xc>
     958:	00 d0       	rcall	.+0      	; 0x95a <parse_and_execute_command+0xe>
     95a:	00 d0       	rcall	.+0      	; 0x95c <parse_and_execute_command+0x10>
     95c:	cd b7       	in	r28, 0x3d	; 61
     95e:	de b7       	in	r29, 0x3e	; 62
     960:	8c 01       	movw	r16, r24
     962:	f6 2e       	mov	r15, r22
	uint8_t Command, Status;// commands and status of each string
	char itemBuf[2];
	// prints the same statement back to the user. 
	if(verbose)
     964:	80 91 00 01 	lds	r24, 0x0100
     968:	88 23       	and	r24, r24
     96a:	51 f0       	breq	.+20     	; 0x980 <parse_and_execute_command+0x34>
	{
		send_str(PSTR("Received: "));
     96c:	88 e3       	ldi	r24, 0x38	; 56
     96e:	95 e0       	ldi	r25, 0x05	; 5
     970:	e0 df       	rcall	.-64     	; 0x932 <send_str>
		usb_serial_write(buf, num);
     972:	c8 01       	movw	r24, r16
     974:	6f 2d       	mov	r22, r15
     976:	70 e0       	ldi	r23, 0x00	; 0
     978:	ec d2       	rcall	.+1496   	; 0xf52 <usb_serial_write>
		send_str(PSTR("\r\n"));
     97a:	85 e3       	ldi	r24, 0x35	; 53
     97c:	95 e0       	ldi	r25, 0x05	; 5
     97e:	d9 df       	rcall	.-78     	; 0x932 <send_str>
	}
	
	if(num < 4)
     980:	83 e0       	ldi	r24, 0x03	; 3
     982:	8f 15       	cp	r24, r15
     984:	18 f0       	brcs	.+6      	; 0x98c <parse_and_execute_command+0x40>
	{
		send_str(PSTR("ERROR:1 \r\nformat to small, see help for details\r\n"));
     986:	83 e0       	ldi	r24, 0x03	; 3
     988:	95 e0       	ldi	r25, 0x05	; 5
     98a:	be c1       	rjmp	.+892    	; 0xd08 <parse_and_execute_command+0x3bc>
		return;
	}
	if(buf[0] == 'D')// damper section Command is Damper### ##1 for closed and ##0 for open
     98c:	f8 01       	movw	r30, r16
     98e:	80 81       	ld	r24, Z
     990:	84 34       	cpi	r24, 0x44	; 68
     992:	09 f0       	breq	.+2      	; 0x996 <parse_and_execute_command+0x4a>
     994:	46 c0       	rjmp	.+140    	; 0xa22 <parse_and_execute_command+0xd6>
	{
		//disable all other Devices and enable this
		//Disable Sprinkler
		//Enable Damper
		DAMPER_ENABLE_ON;
     996:	76 98       	cbi	0x0e, 6	; 14
		
		if(buf[6] == '?')// status request is Damper?## check to see if open or closed returns 1 for closed and 0 for open.
     998:	96 81       	ldd	r25, Z+6	; 0x06
     99a:	9f 33       	cpi	r25, 0x3F	; 63
     99c:	49 f4       	brne	.+18     	; 0x9b0 <parse_and_execute_command+0x64>
		{
			//not this will work for up to 9 dampers
			Command = buf[8] - '0';// convert ascii value to decimal
			Status = CheckDamper(Command);
     99e:	80 85       	ldd	r24, Z+8	; 0x08
     9a0:	80 53       	subi	r24, 0x30	; 48
     9a2:	5a d6       	rcall	.+3252   	; 0x1658 <CheckDamper>
			send_str((char*)(Status + '0'));// returns the status
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	c0 96       	adiw	r24, 0x30	; 48
     9a8:	c4 df       	rcall	.-120    	; 0x932 <send_str>
			send_str(PSTR("\r\n"));
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	95 e0       	ldi	r25, 0x05	; 5
     9ae:	ac c1       	rjmp	.+856    	; 0xd08 <parse_and_execute_command+0x3bc>
			return;
		}
		else
		{
			Command = (uint8_t)buf[7] - (uint8_t)'0';//unsigned 8 bit makes command a value from 0 - 9
     9b0:	f8 01       	movw	r30, r16
     9b2:	87 81       	ldd	r24, Z+7	; 0x07
     9b4:	b0 ed       	ldi	r27, 0xD0	; 208
     9b6:	fb 2e       	mov	r15, r27
     9b8:	f8 0e       	add	r15, r24
			//Command += ((uint8_t)buf[6] - (uint8_t)'0');//the higher digit either 1 or 0; 
			itemBuf[0] = buf[6];
			itemBuf[1] = buf[7];
			//Command = atoi(itemBuf);
			
			if(((uint8_t)buf[6] - (uint8_t)'0') == 1)
     9ba:	91 33       	cpi	r25, 0x31	; 49
     9bc:	19 f4       	brne	.+6      	; 0x9c4 <parse_and_execute_command+0x78>
			{
				Command = Command + 10; // adds the correct value 0 - 15;
     9be:	aa ed       	ldi	r26, 0xDA	; 218
     9c0:	fa 2e       	mov	r15, r26
     9c2:	f8 0e       	add	r15, r24
			}
			if(buf[8] == '0')// open
     9c4:	f8 01       	movw	r30, r16
     9c6:	80 85       	ldd	r24, Z+8	; 0x08
     9c8:	80 33       	cpi	r24, 0x30	; 48
     9ca:	51 f4       	brne	.+20     	; 0x9e0 <parse_and_execute_command+0x94>
					usb_serial_write(tempBuf, 2);
					//usb_serial_write(itemBuf, 2);
					send_str(PSTR("\r\n"));
					**/
				}
				OpenDamper(Command);
     9cc:	8f 2d       	mov	r24, r15
     9ce:	bf d6       	rcall	.+3454   	; 0x174e <OpenDamper>
				if(verbose)
     9d0:	80 91 00 01 	lds	r24, 0x0100
     9d4:	88 23       	and	r24, r24
     9d6:	09 f4       	brne	.+2      	; 0x9da <parse_and_execute_command+0x8e>
     9d8:	98 c1       	rjmp	.+816    	; 0xd0a <parse_and_execute_command+0x3be>
				{
					send_str(PSTR("Damper Open Complete.\r\n"));
     9da:	88 ee       	ldi	r24, 0xE8	; 232
     9dc:	94 e0       	ldi	r25, 0x04	; 4
     9de:	94 c1       	rjmp	.+808    	; 0xd08 <parse_and_execute_command+0x3bc>
				}
				return;
			}
			else // Close Damper
			{
			if(verbose)
     9e0:	80 91 00 01 	lds	r24, 0x0100
     9e4:	88 23       	and	r24, r24
     9e6:	99 f0       	breq	.+38     	; 0xa0e <parse_and_execute_command+0xc2>
				{				
					char tempBuf[2];
					//itoa(Command, tempBuf,10);
					
					tempBuf[0] = ((char)(Command)-10) + '0';//
     9e8:	f6 e2       	ldi	r31, 0x26	; 38
     9ea:	ff 0e       	add	r15, r31
     9ec:	f9 82       	std	Y+1, r15	; 0x01
					tempBuf[1] = (char)(Command) + '0';
     9ee:	8a e0       	ldi	r24, 0x0A	; 10
     9f0:	f8 0e       	add	r15, r24
     9f2:	fa 82       	std	Y+2, r15	; 0x02
     9f4:	e0 ed       	ldi	r30, 0xD0	; 208
     9f6:	fe 0e       	add	r15, r30
					send_str(PSTR("Starting to close Damper"));
     9f8:	8f ec       	ldi	r24, 0xCF	; 207
     9fa:	94 e0       	ldi	r25, 0x04	; 4
     9fc:	9a df       	rcall	.-204    	; 0x932 <send_str>
					usb_serial_write(tempBuf, 2);
     9fe:	ce 01       	movw	r24, r28
     a00:	01 96       	adiw	r24, 0x01	; 1
     a02:	62 e0       	ldi	r22, 0x02	; 2
     a04:	70 e0       	ldi	r23, 0x00	; 0
     a06:	a5 d2       	rcall	.+1354   	; 0xf52 <usb_serial_write>
					//usb_serial_write(itemBuf, 2);
					send_str(PSTR("\r\n"));
     a08:	8c ec       	ldi	r24, 0xCC	; 204
     a0a:	94 e0       	ldi	r25, 0x04	; 4
     a0c:	92 df       	rcall	.-220    	; 0x932 <send_str>
				}
				CloseDamper(Command);
     a0e:	8f 2d       	mov	r24, r15
     a10:	40 d6       	rcall	.+3200   	; 0x1692 <CloseDamper>
				if(verbose)
     a12:	80 91 00 01 	lds	r24, 0x0100
     a16:	88 23       	and	r24, r24
     a18:	09 f4       	brne	.+2      	; 0xa1c <parse_and_execute_command+0xd0>
     a1a:	77 c1       	rjmp	.+750    	; 0xd0a <parse_and_execute_command+0x3be>
				{
					send_str(PSTR("Damper Close Complete.\r\n"));
     a1c:	83 eb       	ldi	r24, 0xB3	; 179
     a1e:	94 e0       	ldi	r25, 0x04	; 4
     a20:	73 c1       	rjmp	.+742    	; 0xd08 <parse_and_execute_command+0x3bc>
				}
				return;
			}
		}
	}
	if(buf[0] == 'H')// HVAC Section should be DONE debug
     a22:	88 34       	cpi	r24, 0x48	; 72
     a24:	09 f0       	breq	.+2      	; 0xa28 <parse_and_execute_command+0xdc>
     a26:	9d c0       	rjmp	.+314    	; 0xb62 <parse_and_execute_command+0x216>
	{	
		if(verbose)
     a28:	80 91 00 01 	lds	r24, 0x0100
     a2c:	88 23       	and	r24, r24
     a2e:	19 f0       	breq	.+6      	; 0xa36 <parse_and_execute_command+0xea>
		send_str(PSTR("entering HVAC\r\n"));// H0V1A2V3?4
     a30:	83 ea       	ldi	r24, 0xA3	; 163
     a32:	94 e0       	ldi	r25, 0x04	; 4
     a34:	7e df       	rcall	.-260    	; 0x932 <send_str>
		if(buf[4] == '?')// status request
     a36:	f8 01       	movw	r30, r16
     a38:	84 81       	ldd	r24, Z+4	; 0x04
     a3a:	8f 33       	cpi	r24, 0x3F	; 63
     a3c:	b9 f5       	brne	.+110    	; 0xaac <parse_and_execute_command+0x160>
		{
		
			if(GFanStatus == 0)// if furnaced controlled
     a3e:	20 91 1f 01 	lds	r18, 0x011F
     a42:	30 91 20 01 	lds	r19, 0x0120
     a46:	21 15       	cp	r18, r1
     a48:	31 05       	cpc	r19, r1
     a4a:	a9 f4       	brne	.+42     	; 0xa76 <parse_and_execute_command+0x12a>
			{
				
				//read furnace for status
				if(ReadGFan() == 1)//if furnace is on
     a4c:	62 d5       	rcall	.+2756   	; 0x1512 <ReadGFan>
     a4e:	81 30       	cpi	r24, 0x01	; 1
     a50:	79 f4       	brne	.+30     	; 0xa70 <parse_and_execute_command+0x124>
				{
					if(ReadWHeat() == 1)// and heat is on
     a52:	62 d5       	rcall	.+2756   	; 0x1518 <ReadWHeat>
     a54:	81 30       	cpi	r24, 0x01	; 1
     a56:	19 f4       	brne	.+6      	; 0xa5e <parse_and_execute_command+0x112>
					{
						send_str(PSTR("2\r\n"));
     a58:	8f e9       	ldi	r24, 0x9F	; 159
     a5a:	94 e0       	ldi	r25, 0x04	; 4
     a5c:	55 c1       	rjmp	.+682    	; 0xd08 <parse_and_execute_command+0x3bc>
						return;
					}
					else if(ReadYCool() == 1)// and the cooler is on
     a5e:	5f d5       	rcall	.+2750   	; 0x151e <ReadYCool>
     a60:	81 30       	cpi	r24, 0x01	; 1
     a62:	19 f4       	brne	.+6      	; 0xa6a <parse_and_execute_command+0x11e>
					{
						send_str(PSTR("3\r\n"));
     a64:	8b e9       	ldi	r24, 0x9B	; 155
     a66:	94 e0       	ldi	r25, 0x04	; 4
     a68:	4f c1       	rjmp	.+670    	; 0xd08 <parse_and_execute_command+0x3bc>
						return;
					}
					else
					{
						send_str(PSTR("1\r\n"));
     a6a:	87 e9       	ldi	r24, 0x97	; 151
     a6c:	94 e0       	ldi	r25, 0x04	; 4
     a6e:	4c c1       	rjmp	.+664    	; 0xd08 <parse_and_execute_command+0x3bc>
						return;
					}
				}
				else //it is all off
				{
					send_str(PSTR("7\r\n"));
     a70:	83 e9       	ldi	r24, 0x93	; 147
     a72:	94 e0       	ldi	r25, 0x04	; 4
     a74:	49 c1       	rjmp	.+658    	; 0xd08 <parse_and_execute_command+0x3bc>
			else// Server is controlling furnace
			{
				//so GfanStatus is already on
				//check if hot or cold are on

				if(WHeatStatus == 1)
     a76:	80 91 1d 01 	lds	r24, 0x011D
     a7a:	90 91 1e 01 	lds	r25, 0x011E
     a7e:	01 97       	sbiw	r24, 0x01	; 1
     a80:	19 f4       	brne	.+6      	; 0xa88 <parse_and_execute_command+0x13c>
				{// 5
					send_str(PSTR("5\r\n"));// blower and heater.
     a82:	8f e8       	ldi	r24, 0x8F	; 143
     a84:	94 e0       	ldi	r25, 0x04	; 4
     a86:	40 c1       	rjmp	.+640    	; 0xd08 <parse_and_execute_command+0x3bc>
					return;
				}
				if(YCoolStatus == 1)// blower and Cooler
     a88:	80 91 19 01 	lds	r24, 0x0119
     a8c:	90 91 1a 01 	lds	r25, 0x011A
     a90:	01 97       	sbiw	r24, 0x01	; 1
     a92:	19 f4       	brne	.+6      	; 0xa9a <parse_and_execute_command+0x14e>
				{
					send_str(PSTR("6\r\n"));
     a94:	8b e8       	ldi	r24, 0x8B	; 139
     a96:	94 e0       	ldi	r25, 0x04	; 4
     a98:	37 c1       	rjmp	.+622    	; 0xd08 <parse_and_execute_command+0x3bc>
					return;
				}
				if(GFanStatus == 1)
     a9a:	21 30       	cpi	r18, 0x01	; 1
     a9c:	31 05       	cpc	r19, r1
     a9e:	19 f4       	brne	.+6      	; 0xaa6 <parse_and_execute_command+0x15a>
				{
					send_str(PSTR("4\r\n"));
     aa0:	87 e8       	ldi	r24, 0x87	; 135
     aa2:	94 e0       	ldi	r25, 0x04	; 4
     aa4:	31 c1       	rjmp	.+610    	; 0xd08 <parse_and_execute_command+0x3bc>
					return;
				}
				
				send_str(PSTR("8\r\n"));// just the blower is on
     aa6:	83 e8       	ldi	r24, 0x83	; 131
     aa8:	94 e0       	ldi	r25, 0x04	; 4
     aaa:	2e c1       	rjmp	.+604    	; 0xd08 <parse_and_execute_command+0x3bc>
				return;
			}
		}
		else // command
		{
			if(buf[4] == '1')// Thermo stat controlled
     aac:	81 33       	cpi	r24, 0x31	; 49
     aae:	81 f4       	brne	.+32     	; 0xad0 <parse_and_execute_command+0x184>
			{
				SetWHeat(0);
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	48 d5       	rcall	.+2704   	; 0x1544 <SetWHeat>
				SetYCool(0);
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	56 d5       	rcall	.+2732   	; 0x1564 <SetYCool>
				SetGFan(0);
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	34 d5       	rcall	.+2664   	; 0x1524 <SetGFan>
				SetHVAC(0);
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	62 d5       	rcall	.+2756   	; 0x1584 <SetHVAC>
				if(verbose)
     ac0:	80 91 00 01 	lds	r24, 0x0100
     ac4:	88 23       	and	r24, r24
     ac6:	09 f4       	brne	.+2      	; 0xaca <parse_and_execute_command+0x17e>
     ac8:	20 c1       	rjmp	.+576    	; 0xd0a <parse_and_execute_command+0x3be>
				{	
					send_str(PSTR("Server controlled off\r\n"));
     aca:	8b e6       	ldi	r24, 0x6B	; 107
     acc:	94 e0       	ldi	r25, 0x04	; 4
     ace:	1c c1       	rjmp	.+568    	; 0xd08 <parse_and_execute_command+0x3bc>
				}
			}
			else if(buf[4] == '2')// Blower on
     ad0:	82 33       	cpi	r24, 0x32	; 50
     ad2:	81 f4       	brne	.+32     	; 0xaf4 <parse_and_execute_command+0x1a8>
			{
				SetWHeat(0);// may be overridden by Furnace
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	36 d5       	rcall	.+2668   	; 0x1544 <SetWHeat>
				SetYCool(0);// may be overridden by Furnace
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	44 d5       	rcall	.+2696   	; 0x1564 <SetYCool>
				SetGFan(1);
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	22 d5       	rcall	.+2628   	; 0x1524 <SetGFan>
				SetHVAC(1);
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	50 d5       	rcall	.+2720   	; 0x1584 <SetHVAC>
				if(verbose)
     ae4:	80 91 00 01 	lds	r24, 0x0100
     ae8:	88 23       	and	r24, r24
     aea:	09 f4       	brne	.+2      	; 0xaee <parse_and_execute_command+0x1a2>
     aec:	0e c1       	rjmp	.+540    	; 0xd0a <parse_and_execute_command+0x3be>
				{	
					send_str(PSTR("Server controlled Fan\r\n"));
     aee:	83 e5       	ldi	r24, 0x53	; 83
     af0:	94 e0       	ldi	r25, 0x04	; 4
     af2:	0a c1       	rjmp	.+532    	; 0xd08 <parse_and_execute_command+0x3bc>
				}
			}
			else if(buf[4] == '3')// heat and blower on
     af4:	83 33       	cpi	r24, 0x33	; 51
     af6:	81 f4       	brne	.+32     	; 0xb18 <parse_and_execute_command+0x1cc>
			{
				SetGFan(1);
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	14 d5       	rcall	.+2600   	; 0x1524 <SetGFan>
				SetWHeat(1);// may be overridden by Furnace
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	22 d5       	rcall	.+2628   	; 0x1544 <SetWHeat>
				SetYCool(0);// may be overridden by Furnace
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	30 d5       	rcall	.+2656   	; 0x1564 <SetYCool>
				SetHVAC(1);
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	3e d5       	rcall	.+2684   	; 0x1584 <SetHVAC>
				if(verbose)
     b08:	80 91 00 01 	lds	r24, 0x0100
     b0c:	88 23       	and	r24, r24
     b0e:	09 f4       	brne	.+2      	; 0xb12 <parse_and_execute_command+0x1c6>
     b10:	fc c0       	rjmp	.+504    	; 0xd0a <parse_and_execute_command+0x3be>
				{	
					send_str(PSTR("Server controlled Fan and Heating\r\n"));
     b12:	8f e2       	ldi	r24, 0x2F	; 47
     b14:	94 e0       	ldi	r25, 0x04	; 4
     b16:	f8 c0       	rjmp	.+496    	; 0xd08 <parse_and_execute_command+0x3bc>
				}
			}
			else if(buf[4] == '4')// heat and blower on
     b18:	84 33       	cpi	r24, 0x34	; 52
     b1a:	81 f4       	brne	.+32     	; 0xb3c <parse_and_execute_command+0x1f0>
			{
				SetGFan(1);
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	02 d5       	rcall	.+2564   	; 0x1524 <SetGFan>
				SetWHeat(0);// may be overridden by Furnace
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	10 d5       	rcall	.+2592   	; 0x1544 <SetWHeat>
				SetYCool(0);// may be overridden by Furnace
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	1e d5       	rcall	.+2620   	; 0x1564 <SetYCool>
				SetHVAC(1);
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	2c d5       	rcall	.+2648   	; 0x1584 <SetHVAC>
				if(verbose)
     b2c:	80 91 00 01 	lds	r24, 0x0100
     b30:	88 23       	and	r24, r24
     b32:	09 f4       	brne	.+2      	; 0xb36 <parse_and_execute_command+0x1ea>
     b34:	ea c0       	rjmp	.+468    	; 0xd0a <parse_and_execute_command+0x3be>
				{	
					send_str(PSTR("Server controlled Fan and Cooling\r\n"));
     b36:	8b e0       	ldi	r24, 0x0B	; 11
     b38:	94 e0       	ldi	r25, 0x04	; 4
     b3a:	e6 c0       	rjmp	.+460    	; 0xd08 <parse_and_execute_command+0x3bc>
				}
			}
			else if(buf[4] == '5')// Server controlled off
     b3c:	85 33       	cpi	r24, 0x35	; 53
     b3e:	09 f0       	breq	.+2      	; 0xb42 <parse_and_execute_command+0x1f6>
     b40:	e4 c0       	rjmp	.+456    	; 0xd0a <parse_and_execute_command+0x3be>
			{
				SetGFan(0);
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	ef d4       	rcall	.+2526   	; 0x1524 <SetGFan>
				SetWHeat(0);// may be overridden by Furnace
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	fd d4       	rcall	.+2554   	; 0x1544 <SetWHeat>
				SetYCool(0);// may be overridden by Furnace
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	0b d5       	rcall	.+2582   	; 0x1564 <SetYCool>
				SetHVAC(1);
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	19 d5       	rcall	.+2610   	; 0x1584 <SetHVAC>
				if(verbose)
     b52:	80 91 00 01 	lds	r24, 0x0100
     b56:	88 23       	and	r24, r24
     b58:	09 f4       	brne	.+2      	; 0xb5c <parse_and_execute_command+0x210>
     b5a:	d7 c0       	rjmp	.+430    	; 0xd0a <parse_and_execute_command+0x3be>
				{	
					send_str(PSTR("Server controlled OFF\r\n"));
     b5c:	83 ef       	ldi	r24, 0xF3	; 243
     b5e:	93 e0       	ldi	r25, 0x03	; 3
     b60:	d3 c0       	rjmp	.+422    	; 0xd08 <parse_and_execute_command+0x3bc>
	 // in the server code.
	 // this is a Sts only so it is Temp?## from 0 - 63 for ##
	 // example Temp?16 will read from temperature sensor 16 and return the
	 // value in C
	
	if(buf[0] == 'T') // Temperature Section (DEBUG)
     b62:	84 35       	cpi	r24, 0x54	; 84
     b64:	c1 f4       	brne	.+48     	; 0xb96 <parse_and_execute_command+0x24a>
	{
			//disable all other Devices and enable this
		//disable Damper
		DAMPER_ENABLE_OFF;
     b66:	76 9a       	sbi	0x0e, 6	; 14
		
		char tempStation[2];
		tempStation[0] = buf[4];
     b68:	f8 01       	movw	r30, r16
     b6a:	84 81       	ldd	r24, Z+4	; 0x04
     b6c:	89 83       	std	Y+1, r24	; 0x01
		tempStation[1] = buf[5];
     b6e:	85 81       	ldd	r24, Z+5	; 0x05
     b70:	8a 83       	std	Y+2, r24	; 0x02
		send_str(PSTR("\n\r"));
     b72:	80 ef       	ldi	r24, 0xF0	; 240
     b74:	93 e0       	ldi	r25, 0x03	; 3
     b76:	dd de       	rcall	.-582    	; 0x932 <send_str>
		
		uint16_t ADCResult = ReadTempSensor(tempStation);// query temperature section for info. this is a number from 0 to 1024
     b78:	ce 01       	movw	r24, r28
     b7a:	01 96       	adiw	r24, 0x01	; 1
     b7c:	48 d6       	rcall	.+3216   	; 0x180e <ReadTempSensor>
		char tempResultStr[4];
		//result is best left positive till C# level for easier conversion.
		convert_by_division(ADCResult, tempResultStr);
     b7e:	8e 01       	movw	r16, r28
     b80:	0d 5f       	subi	r16, 0xFD	; 253
     b82:	1f 4f       	sbci	r17, 0xFF	; 255
     b84:	b8 01       	movw	r22, r16
     b86:	ae de       	rcall	.-676    	; 0x8e4 <convert_by_division>
		usb_serial_write(tempResultStr, 4);
     b88:	c8 01       	movw	r24, r16
     b8a:	64 e0       	ldi	r22, 0x04	; 4
     b8c:	70 e0       	ldi	r23, 0x00	; 0
     b8e:	e1 d1       	rcall	.+962    	; 0xf52 <usb_serial_write>
		send_str(PSTR("\r\n"));
     b90:	8d ee       	ldi	r24, 0xED	; 237
     b92:	93 e0       	ldi	r25, 0x03	; 3
     b94:	b9 c0       	rjmp	.+370    	; 0xd08 <parse_and_execute_command+0x3bc>
		return;
	}
	else if(buf[0] == 'G')// Garage Section DONE
     b96:	87 34       	cpi	r24, 0x47	; 71
     b98:	11 f4       	brne	.+4      	; 0xb9e <parse_and_execute_command+0x252>
	{
		//this is only one thing. which is a pulse
		PulseGarage();
     b9a:	b8 d4       	rcall	.+2416   	; 0x150c <PulseGarage>
     b9c:	b6 c0       	rjmp	.+364    	; 0xd0a <parse_and_execute_command+0x3be>
		return;
	}
	else if(buf[0] == 'S')// Sprinkler Section DONE
     b9e:	83 35       	cpi	r24, 0x53	; 83
     ba0:	61 f4       	brne	.+24     	; 0xbba <parse_and_execute_command+0x26e>
	{
		
		//disable Damper
		if(verbose)
     ba2:	80 91 00 01 	lds	r24, 0x0100
     ba6:	88 23       	and	r24, r24
     ba8:	19 f0       	breq	.+6      	; 0xbb0 <parse_and_execute_command+0x264>
		{
			send_str(PSTR("Sprinkler Section\r\n"));
     baa:	89 ed       	ldi	r24, 0xD9	; 217
     bac:	93 e0       	ldi	r25, 0x03	; 3
     bae:	c1 de       	rcall	.-638    	; 0x932 <send_str>
		//now we need to create a string, and find out
		//which format is 
		//Sprinkler##
		//        (#) = station
		//   	   (#) = Open/On(1) or Closed/Off(0)
		SprinklerCntrl(buf[9],buf[10]);
     bb0:	f8 01       	movw	r30, r16
     bb2:	81 85       	ldd	r24, Z+9	; 0x09
     bb4:	62 85       	ldd	r22, Z+10	; 0x0a
     bb6:	90 d7       	rcall	.+3872   	; 0x1ad8 <SprinklerCntrl>
     bb8:	a8 c0       	rjmp	.+336    	; 0xd0a <parse_and_execute_command+0x3be>
		return;
	}	
	else if(buf[0] == 'F')// Fan Section 
     bba:	86 34       	cpi	r24, 0x46	; 70
     bbc:	09 f0       	breq	.+2      	; 0xbc0 <parse_and_execute_command+0x274>
     bbe:	68 c0       	rjmp	.+208    	; 0xc90 <parse_and_execute_command+0x344>
// alternative Fan Status
//			FAN?##
//	buf[3]	  (?) = status request
//	buf[4]	   (#) = Fan number(0,2,3,4)// only 4 fans.
//	buf[5]		(#) = Query type 's'= speed and 'o'= on or off
		if(verbose)
     bc0:	80 91 00 01 	lds	r24, 0x0100
     bc4:	88 23       	and	r24, r24
     bc6:	19 f0       	breq	.+6      	; 0xbce <parse_and_execute_command+0x282>
			send_str(PSTR("Fan Section\r\n"));
     bc8:	8b ec       	ldi	r24, 0xCB	; 203
     bca:	93 e0       	ldi	r25, 0x03	; 3
     bcc:	b2 de       	rcall	.-668    	; 0x932 <send_str>
		
		if(buf[3]== '?')//Check if status request
     bce:	f8 01       	movw	r30, r16
     bd0:	83 81       	ldd	r24, Z+3	; 0x03
     bd2:	8f 33       	cpi	r24, 0x3F	; 63
     bd4:	09 f0       	breq	.+2      	; 0xbd8 <parse_and_execute_command+0x28c>
     bd6:	3d c0       	rjmp	.+122    	; 0xc52 <parse_and_execute_command+0x306>
		{
			if(verbose)
     bd8:	80 91 00 01 	lds	r24, 0x0100
     bdc:	88 23       	and	r24, r24
     bde:	19 f0       	breq	.+6      	; 0xbe6 <parse_and_execute_command+0x29a>
				send_str(PSTR("\tFan Status section\r\n"));
     be0:	85 eb       	ldi	r24, 0xB5	; 181
     be2:	93 e0       	ldi	r25, 0x03	; 3
     be4:	a6 de       	rcall	.-692    	; 0x932 <send_str>
		
			
			if(buf[5] == 's')// status request for speed 0 - 9
     be6:	f8 01       	movw	r30, r16
     be8:	85 81       	ldd	r24, Z+5	; 0x05
     bea:	83 37       	cpi	r24, 0x73	; 115
     bec:	69 f4       	brne	.+26     	; 0xc08 <parse_and_execute_command+0x2bc>
			{	
				if(verbose)
     bee:	80 91 00 01 	lds	r24, 0x0100
     bf2:	88 23       	and	r24, r24
     bf4:	19 f0       	breq	.+6      	; 0xbfc <parse_and_execute_command+0x2b0>
					send_str(PSTR("\t\tFan Speed Status Section\r\n"));
     bf6:	88 e9       	ldi	r24, 0x98	; 152
     bf8:	93 e0       	ldi	r25, 0x03	; 3
     bfa:	9b de       	rcall	.-714    	; 0x932 <send_str>
		
				CharStatus = FanSpeedStatus(buf[4]);// status of fan speed.
     bfc:	f8 01       	movw	r30, r16
     bfe:	84 81       	ldd	r24, Z+4	; 0x04
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <FanSpeedStatus>
     c06:	0e c0       	rjmp	.+28     	; 0xc24 <parse_and_execute_command+0x2d8>
			}
			else if(buf[5] == 'o')
     c08:	8f 36       	cpi	r24, 0x6F	; 111
     c0a:	71 f4       	brne	.+28     	; 0xc28 <parse_and_execute_command+0x2dc>
			{
				if(verbose)
     c0c:	80 91 00 01 	lds	r24, 0x0100
     c10:	88 23       	and	r24, r24
     c12:	19 f0       	breq	.+6      	; 0xc1a <parse_and_execute_command+0x2ce>
					send_str(PSTR("\t\tFan On/Off Status Section\r\n"));
     c14:	8a e7       	ldi	r24, 0x7A	; 122
     c16:	93 e0       	ldi	r25, 0x03	; 3
     c18:	8c de       	rcall	.-744    	; 0x932 <send_str>
				CharStatus = FanStatus(buf[4]);// status whether on or off.
     c1a:	f8 01       	movw	r30, r16
     c1c:	84 81       	ldd	r24, Z+4	; 0x04
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <FanStatus>
     c24:	18 2f       	mov	r17, r24
     c26:	04 c0       	rjmp	.+8      	; 0xc30 <parse_and_execute_command+0x2e4>
			}
			else
			{
				invalidInput = 1;// triggers request for printing out instructions.
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	80 93 14 01 	sts	0x0114, r24
     c2e:	10 e3       	ldi	r17, 0x30	; 48
			}
			if(verbose)
     c30:	80 91 00 01 	lds	r24, 0x0100
     c34:	88 23       	and	r24, r24
     c36:	19 f0       	breq	.+6      	; 0xc3e <parse_and_execute_command+0x2f2>
				send_str(PSTR("\tFan Print Status Section>>>\r\n"));
     c38:	8b e5       	ldi	r24, 0x5B	; 91
     c3a:	93 e0       	ldi	r25, 0x03	; 3
     c3c:	7a de       	rcall	.-780    	; 0x932 <send_str>
			char charPrintStatus[2];
			charPrintStatus[1] = CharStatus;
     c3e:	1a 83       	std	Y+2, r17	; 0x02
			charPrintStatus[2] = CharStatus;
     c40:	1b 83       	std	Y+3, r17	; 0x03
			
			usb_serial_write(charPrintStatus, 2);//termination char
     c42:	ce 01       	movw	r24, r28
     c44:	01 96       	adiw	r24, 0x01	; 1
     c46:	62 e0       	ldi	r22, 0x02	; 2
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	83 d1       	rcall	.+774    	; 0xf52 <usb_serial_write>
			send_str(PSTR("\r\n"));
     c4c:	88 e5       	ldi	r24, 0x58	; 88
     c4e:	93 e0       	ldi	r25, 0x03	; 3
     c50:	5b c0       	rjmp	.+182    	; 0xd08 <parse_and_execute_command+0x3bc>
			return;
		}
		else if(buf[3] < ('5') && buf[3] > ('0'-1))//valid input
     c52:	80 53       	subi	r24, 0x30	; 48
     c54:	85 30       	cpi	r24, 0x05	; 5
     c56:	c8 f4       	brcc	.+50     	; 0xc8a <parse_and_execute_command+0x33e>
		{
			if(verbose)
     c58:	80 91 00 01 	lds	r24, 0x0100
     c5c:	88 23       	and	r24, r24
     c5e:	19 f0       	breq	.+6      	; 0xc66 <parse_and_execute_command+0x31a>
				send_str(PSTR("\tFan Command\r\n"));
     c60:	89 e4       	ldi	r24, 0x49	; 73
     c62:	93 e0       	ldi	r25, 0x03	; 3
     c64:	66 de       	rcall	.-820    	; 0x932 <send_str>
		
			// can still use some valid input checking.
			if(buf[4] == '0')//turn off fan.
     c66:	f8 01       	movw	r30, r16
     c68:	84 81       	ldd	r24, Z+4	; 0x04
     c6a:	93 81       	ldd	r25, Z+3	; 0x03
     c6c:	80 33       	cpi	r24, 0x30	; 48
     c6e:	29 f4       	brne	.+10     	; 0xc7a <parse_and_execute_command+0x32e>
			{
				TurnFanOff(buf[3]);
     c70:	89 2f       	mov	r24, r25
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	0e 94 17 10 	call	0x202e	; 0x202e <TurnFanOff>
     c78:	0b c0       	rjmp	.+22     	; 0xc90 <parse_and_execute_command+0x344>
			}
			//command
			else
			{
				SetFan(buf[3], buf[5]);//this will automatically turn on the PWM
     c7a:	f8 01       	movw	r30, r16
     c7c:	65 81       	ldd	r22, Z+5	; 0x05
     c7e:	89 2f       	mov	r24, r25
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	0e 94 47 10 	call	0x208e	; 0x208e <SetFan>
     c88:	03 c0       	rjmp	.+6      	; 0xc90 <parse_and_execute_command+0x344>
			}
		}
		else
		{
			invalidInput = 1;
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	80 93 14 01 	sts	0x0114, r24
		}
		
	}
	if((buf[0] == '-' && buf[1] == 'h') || buf[0] == '?' || invalidInput)// Help Section
     c90:	f8 01       	movw	r30, r16
     c92:	80 81       	ld	r24, Z
     c94:	8d 32       	cpi	r24, 0x2D	; 45
     c96:	21 f4       	brne	.+8      	; 0xca0 <parse_and_execute_command+0x354>
     c98:	81 81       	ldd	r24, Z+1	; 0x01
     c9a:	88 36       	cpi	r24, 0x68	; 104
     c9c:	19 f4       	brne	.+6      	; 0xca4 <parse_and_execute_command+0x358>
     c9e:	06 c0       	rjmp	.+12     	; 0xcac <parse_and_execute_command+0x360>
     ca0:	8f 33       	cpi	r24, 0x3F	; 63
     ca2:	21 f0       	breq	.+8      	; 0xcac <parse_and_execute_command+0x360>
     ca4:	80 91 14 01 	lds	r24, 0x0114
     ca8:	88 23       	and	r24, r24
     caa:	61 f1       	breq	.+88     	; 0xd04 <parse_and_execute_command+0x3b8>
	{
		//help commands so write a bunch of things that help people.
		send_str(PSTR("\r\n***************************************\r\n"));
     cac:	8d e1       	ldi	r24, 0x1D	; 29
     cae:	93 e0       	ldi	r25, 0x03	; 3
     cb0:	40 de       	rcall	.-896    	; 0x932 <send_str>
		send_str(PSTR("HELP I don't know what to do\r\n"));
     cb2:	8e ef       	ldi	r24, 0xFE	; 254
     cb4:	92 e0       	ldi	r25, 0x02	; 2
     cb6:	3d de       	rcall	.-902    	; 0x932 <send_str>
		send_str(PSTR("List of available commands\r\n\r\n"));
     cb8:	8f ed       	ldi	r24, 0xDF	; 223
     cba:	92 e0       	ldi	r25, 0x02	; 2
     cbc:	3a de       	rcall	.-908    	; 0x932 <send_str>
		send_str(PSTR("-help:\t\tprovides this menu\r\n"));
     cbe:	82 ec       	ldi	r24, 0xC2	; 194
     cc0:	92 e0       	ldi	r25, 0x02	; 2
     cc2:	37 de       	rcall	.-914    	; 0x932 <send_str>
		send_str(PSTR("Damper###:\tTurns on and off Damper\r\n"));
     cc4:	8d e9       	ldi	r24, 0x9D	; 157
     cc6:	92 e0       	ldi	r25, 0x02	; 2
     cc8:	34 de       	rcall	.-920    	; 0x932 <send_str>
		send_str(PSTR("Damper?##:\tReplies whether damper is open or closed\r\n"));
     cca:	87 e6       	ldi	r24, 0x67	; 103
     ccc:	92 e0       	ldi	r25, 0x02	; 2
     cce:	31 de       	rcall	.-926    	; 0x932 <send_str>
		send_str(PSTR("Temp?##:\tgets the temperature value of the specific sensor\r\n"));
     cd0:	8a e2       	ldi	r24, 0x2A	; 42
     cd2:	92 e0       	ldi	r25, 0x02	; 2
     cd4:	2e de       	rcall	.-932    	; 0x932 <send_str>
		send_str(PSTR("HVAC?:\t\tReturns HVAC status\r\n"));
     cd6:	8c e0       	ldi	r24, 0x0C	; 12
     cd8:	92 e0       	ldi	r25, 0x02	; 2
     cda:	2b de       	rcall	.-938    	; 0x932 <send_str>
		send_str(PSTR("HVAC#:\t\tSets the HVAC to a specific state\r\n"));
     cdc:	80 ee       	ldi	r24, 0xE0	; 224
     cde:	91 e0       	ldi	r25, 0x01	; 1
     ce0:	28 de       	rcall	.-944    	; 0x932 <send_str>
		send_str(PSTR("Garage:\t\tPulses the Garage open or closed\r\n"));
     ce2:	84 eb       	ldi	r24, 0xB4	; 180
     ce4:	91 e0       	ldi	r25, 0x01	; 1
     ce6:	25 de       	rcall	.-950    	; 0x932 <send_str>
		send_str(PSTR("Sprinkler###:\tturns on/off section of sprinklers\r\n"));
     ce8:	81 e8       	ldi	r24, 0x81	; 129
     cea:	91 e0       	ldi	r25, 0x01	; 1
     cec:	22 de       	rcall	.-956    	; 0x932 <send_str>
		send_str(PSTR("Sprinkler?:\tGets status of sprinkler\r\n"));
     cee:	8a e5       	ldi	r24, 0x5A	; 90
     cf0:	91 e0       	ldi	r25, 0x01	; 1
     cf2:	1f de       	rcall	.-962    	; 0x932 <send_str>
		send_str(PSTR("***************************************\r\n"));
     cf4:	80 e3       	ldi	r24, 0x30	; 48
     cf6:	91 e0       	ldi	r25, 0x01	; 1
     cf8:	1c de       	rcall	.-968    	; 0x932 <send_str>
		send_str(PSTR("Examples (to-do)\r\n"));
     cfa:	8d e1       	ldi	r24, 0x1D	; 29
     cfc:	91 e0       	ldi	r25, 0x01	; 1
     cfe:	19 de       	rcall	.-974    	; 0x932 <send_str>
		invalidInput = 0;
     d00:	10 92 14 01 	sts	0x0114, r1
	}
		send_str(PSTR("\r\n"));
     d04:	8a e1       	ldi	r24, 0x1A	; 26
     d06:	91 e0       	ldi	r25, 0x01	; 1
     d08:	14 de       	rcall	.-984    	; 0x932 <send_str>
}
     d0a:	26 96       	adiw	r28, 0x06	; 6
     d0c:	0f b6       	in	r0, 0x3f	; 63
     d0e:	f8 94       	cli
     d10:	de bf       	out	0x3e, r29	; 62
     d12:	0f be       	out	0x3f, r0	; 63
     d14:	cd bf       	out	0x3d, r28	; 61
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	1f 91       	pop	r17
     d1c:	0f 91       	pop	r16
     d1e:	ff 90       	pop	r15
     d20:	08 95       	ret

00000d22 <recv_str>:
* stored into the buffer.
* The return value is the number of characters received, or 255 if
* the virtual serial connection was closed while waiting.
**/
uint8_t recv_str(char *buf, uint8_t size)
{
     d22:	0f 93       	push	r16
     d24:	1f 93       	push	r17
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	ec 01       	movw	r28, r24
     d2c:	06 2f       	mov	r16, r22
     d2e:	10 e0       	ldi	r17, 0x00	; 0
     d30:	1c c0       	rjmp	.+56     	; 0xd6a <recv_str+0x48>
	
	int16_t r;
	uint8_t count=0;
	//send_str(PSTR("\r\nReceiving String"));
	while (count < size) {
		r = usb_serial_getchar();
     d32:	95 d0       	rcall	.+298    	; 0xe5e <usb_serial_getchar>
     d34:	9c 01       	movw	r18, r24
		if (r != -1) {
     d36:	8f ef       	ldi	r24, 0xFF	; 255
     d38:	2f 3f       	cpi	r18, 0xFF	; 255
     d3a:	38 07       	cpc	r19, r24
     d3c:	81 f0       	breq	.+32     	; 0xd5e <recv_str+0x3c>
			if (r == '\r' || r == '\n') return count;
     d3e:	2d 30       	cpi	r18, 0x0D	; 13
     d40:	31 05       	cpc	r19, r1
     d42:	b9 f0       	breq	.+46     	; 0xd72 <recv_str+0x50>
     d44:	2a 30       	cpi	r18, 0x0A	; 10
     d46:	31 05       	cpc	r19, r1
     d48:	a1 f0       	breq	.+40     	; 0xd72 <recv_str+0x50>
			if (r >= ' ' && r <= '~') {
     d4a:	c9 01       	movw	r24, r18
     d4c:	80 97       	sbiw	r24, 0x20	; 32
     d4e:	8f 35       	cpi	r24, 0x5F	; 95
     d50:	91 05       	cpc	r25, r1
     d52:	58 f4       	brcc	.+22     	; 0xd6a <recv_str+0x48>
				*buf++ = r;
     d54:	29 93       	st	Y+, r18
				usb_serial_putchar(r);
     d56:	82 2f       	mov	r24, r18
     d58:	ba d0       	rcall	.+372    	; 0xece <usb_serial_putchar>
				count++;
     d5a:	1f 5f       	subi	r17, 0xFF	; 255
     d5c:	06 c0       	rjmp	.+12     	; 0xd6a <recv_str+0x48>
			}
		} else {
			if (!usb_configured() ||
     d5e:	7c d0       	rcall	.+248    	; 0xe58 <usb_configured>
     d60:	88 23       	and	r24, r24
     d62:	31 f0       	breq	.+12     	; 0xd70 <recv_str+0x4e>
     d64:	1e d2       	rcall	.+1084   	; 0x11a2 <usb_serial_get_control>
     d66:	80 ff       	sbrs	r24, 0
     d68:	03 c0       	rjmp	.+6      	; 0xd70 <recv_str+0x4e>
{
	
	int16_t r;
	uint8_t count=0;
	//send_str(PSTR("\r\nReceiving String"));
	while (count < size) {
     d6a:	10 17       	cp	r17, r16
     d6c:	10 f3       	brcs	.-60     	; 0xd32 <recv_str+0x10>
     d6e:	01 c0       	rjmp	.+2      	; 0xd72 <recv_str+0x50>
     d70:	1f ef       	ldi	r17, 0xFF	; 255
		}
	}
	return count;
	
	//return 0;
}
     d72:	81 2f       	mov	r24, r17
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
     d78:	1f 91       	pop	r17
     d7a:	0f 91       	pop	r16
     d7c:	08 95       	ret

00000d7e <main>:
	while(us) us--;
}


int main(void)
{
     d7e:	ef 92       	push	r14
     d80:	ff 92       	push	r15
     d82:	1f 93       	push	r17
     d84:	df 93       	push	r29
     d86:	cf 93       	push	r28
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
     d8c:	a0 97       	sbiw	r28, 0x20	; 32
     d8e:	0f b6       	in	r0, 0x3f	; 63
     d90:	f8 94       	cli
     d92:	de bf       	out	0x3e, r29	; 62
     d94:	0f be       	out	0x3f, r0	; 63
     d96:	cd bf       	out	0x3d, r28	; 61
	//Start HeartBeat LED PB7
	PWMNew(2);//configures PB7
     d98:	82 e0       	ldi	r24, 0x02	; 2
     d9a:	4a d7       	rcall	.+3732   	; 0x1c30 <PWMNew>
	PWMStart(2);
     d9c:	82 e0       	ldi	r24, 0x02	; 2
     d9e:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <PWMStart>
	PWMDuty(2, 128);//
     da2:	82 e0       	ldi	r24, 0x02	; 2
     da4:	60 e8       	ldi	r22, 0x80	; 128
     da6:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <PWMDuty>
	
	char buf[32];
	uint8_t n;

	CPU_PRESCALE(0);
     daa:	80 e8       	ldi	r24, 0x80	; 128
     dac:	80 93 61 00 	sts	0x0061, r24
     db0:	10 92 61 00 	sts	0x0061, r1
	initializeGlobal();
     db4:	91 dd       	rcall	.-1246   	; 0x8d8 <initializeGlobal>
	initializeHVACGarage();
     db6:	a2 d3       	rcall	.+1860   	; 0x14fc <initializeHVACGarage>
	InitializeDamper();
     db8:	f5 d3       	rcall	.+2026   	; 0x15a4 <InitializeDamper>
	InitializeSprinkler();
     dba:	87 d6       	rcall	.+3342   	; 0x1aca <InitializeSprinkler>
	InitializeFans();
     dbc:	0e 94 9d 10 	call	0x213a	; 0x213a <InitializeFans>
	// still need to initialize fans

	usb_init();
     dc0:	32 d0       	rcall	.+100    	; 0xe26 <usb_init>
	while(!usb_configured());
     dc2:	4a d0       	rcall	.+148    	; 0xe58 <usb_configured>
     dc4:	88 23       	and	r24, r24
     dc6:	e9 f3       	breq	.-6      	; 0xdc2 <main+0x44>
     dc8:	80 e1       	ldi	r24, 0x10	; 16
     dca:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dcc:	20 e9       	ldi	r18, 0x90	; 144
     dce:	31 e0       	ldi	r19, 0x01	; 1
     dd0:	f9 01       	movw	r30, r18
     dd2:	31 97       	sbiw	r30, 0x01	; 1
     dd4:	f1 f7       	brne	.-4      	; 0xdd2 <main+0x54>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dd6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dd8:	d9 f7       	brne	.-10     	; 0xdd0 <main+0x52>
     dda:	02 c0       	rjmp	.+4      	; 0xde0 <main+0x62>
	_delay_ms(1000);
	//enter infinite loop
	while (1) 
	{
		while (!(usb_serial_get_control() & USB_SERIAL_DTR))// caught error with ";"
		usb_serial_flush_input();
     ddc:	65 d0       	rcall	.+202    	; 0xea8 <usb_serial_flush_input>
     dde:	04 c0       	rjmp	.+8      	; 0xde8 <main+0x6a>
		send_str(PSTR("\r\nto receive general help type \"-help\"\r\n\r\n>"));

		while (1) 
		{
			send_str(PSTR("> "));
			n = recv_str(buf, sizeof(buf));
     de0:	7e 01       	movw	r14, r28
     de2:	08 94       	sec
     de4:	e1 1c       	adc	r14, r1
     de6:	f1 1c       	adc	r15, r1
	while(!usb_configured());
	_delay_ms(1000);
	//enter infinite loop
	while (1) 
	{
		while (!(usb_serial_get_control() & USB_SERIAL_DTR))// caught error with ";"
     de8:	dc d1       	rcall	.+952    	; 0x11a2 <usb_serial_get_control>
     dea:	80 ff       	sbrs	r24, 0
     dec:	f7 cf       	rjmp	.-18     	; 0xddc <main+0x5e>
		usb_serial_flush_input();

		send_str(PSTR("\r\n***************************************"));
     dee:	83 ed       	ldi	r24, 0xD3	; 211
     df0:	95 e0       	ldi	r25, 0x05	; 5
     df2:	9f dd       	rcall	.-1218   	; 0x932 <send_str>
		send_str(PSTR("\r\nWelcome to Epic Cube Serial Control Version 0.0.1\r\n"));
     df4:	8d e9       	ldi	r24, 0x9D	; 157
     df6:	95 e0       	ldi	r25, 0x05	; 5
     df8:	9c dd       	rcall	.-1224   	; 0x932 <send_str>
		send_str(PSTR("***************************************"));
     dfa:	85 e7       	ldi	r24, 0x75	; 117
     dfc:	95 e0       	ldi	r25, 0x05	; 5
     dfe:	99 dd       	rcall	.-1230   	; 0x932 <send_str>
		send_str(PSTR("\r\nto receive general help type \"-help\"\r\n\r\n>"));
     e00:	89 e4       	ldi	r24, 0x49	; 73
     e02:	95 e0       	ldi	r25, 0x05	; 5
     e04:	96 dd       	rcall	.-1236   	; 0x932 <send_str>

		while (1) 
		{
			send_str(PSTR("> "));
     e06:	86 e4       	ldi	r24, 0x46	; 70
     e08:	95 e0       	ldi	r25, 0x05	; 5
     e0a:	93 dd       	rcall	.-1242   	; 0x932 <send_str>
			n = recv_str(buf, sizeof(buf));
     e0c:	c7 01       	movw	r24, r14
     e0e:	60 e2       	ldi	r22, 0x20	; 32
     e10:	88 df       	rcall	.-240    	; 0xd22 <recv_str>
     e12:	18 2f       	mov	r17, r24
			if (n == 255) break;
     e14:	8f 3f       	cpi	r24, 0xFF	; 255
     e16:	41 f3       	breq	.-48     	; 0xde8 <main+0x6a>
			send_str(PSTR("\r\n"));
     e18:	83 e4       	ldi	r24, 0x43	; 67
     e1a:	95 e0       	ldi	r25, 0x05	; 5
     e1c:	8a dd       	rcall	.-1260   	; 0x932 <send_str>
			parse_and_execute_command(buf, n);
     e1e:	c7 01       	movw	r24, r14
     e20:	61 2f       	mov	r22, r17
     e22:	94 dd       	rcall	.-1240   	; 0x94c <parse_and_execute_command>
     e24:	f0 cf       	rjmp	.-32     	; 0xe06 <main+0x88>

00000e26 <usb_init>:
 **************************************************************************/

// initialize USB serial
void usb_init(void)
{
	HW_CONFIG();
     e26:	81 e8       	ldi	r24, 0x81	; 129
     e28:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
     e2c:	80 ea       	ldi	r24, 0xA0	; 160
     e2e:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
     e32:	86 e1       	ldi	r24, 0x16	; 22
     e34:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
     e36:	09 b4       	in	r0, 0x29	; 41
     e38:	00 fe       	sbrs	r0, 0
     e3a:	fd cf       	rjmp	.-6      	; 0xe36 <usb_init+0x10>
        USB_CONFIG();				// start USB clock
     e3c:	80 e9       	ldi	r24, 0x90	; 144
     e3e:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
     e42:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
     e46:	10 92 15 01 	sts	0x0115, r1
	cdc_line_rtsdtr = 0;
     e4a:	10 92 16 01 	sts	0x0116, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
     e4e:	8c e0       	ldi	r24, 0x0C	; 12
     e50:	80 93 e2 00 	sts	0x00E2, r24
	sei();
     e54:	78 94       	sei
}
     e56:	08 95       	ret

00000e58 <usb_configured>:

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
uint8_t usb_configured(void)
{
	return usb_configuration;
     e58:	80 91 15 01 	lds	r24, 0x0115
}
     e5c:	08 95       	ret

00000e5e <usb_serial_getchar>:
	uint8_t c, intr_state;

	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     e5e:	2f b7       	in	r18, 0x3f	; 63
	cli();
     e60:	f8 94       	cli
	if (!usb_configuration) {
     e62:	80 91 15 01 	lds	r24, 0x0115
     e66:	88 23       	and	r24, r24
     e68:	69 f0       	breq	.+26     	; 0xe84 <usb_serial_getchar+0x26>
		SREG = intr_state;
		return -1;
	}
	UENUM = CDC_RX_ENDPOINT;
     e6a:	83 e0       	ldi	r24, 0x03	; 3
     e6c:	80 93 e9 00 	sts	0x00E9, r24
	retry:
	c = UEINTX;
	if (!(c & (1<<RWAL))) {
		// no data in buffer
		if (c & (1<<RXOUTI)) {
			UEINTX = 0x6B;
     e70:	9b e6       	ldi	r25, 0x6B	; 107
		SREG = intr_state;
		return -1;
	}
	UENUM = CDC_RX_ENDPOINT;
	retry:
	c = UEINTX;
     e72:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(c & (1<<RWAL))) {
     e76:	85 fd       	sbrc	r24, 5
     e78:	09 c0       	rjmp	.+18     	; 0xe8c <usb_serial_getchar+0x2e>
		// no data in buffer
		if (c & (1<<RXOUTI)) {
     e7a:	82 ff       	sbrs	r24, 2
     e7c:	03 c0       	rjmp	.+6      	; 0xe84 <usb_serial_getchar+0x26>
			UEINTX = 0x6B;
     e7e:	90 93 e8 00 	sts	0x00E8, r25
     e82:	f7 cf       	rjmp	.-18     	; 0xe72 <usb_serial_getchar+0x14>
			goto retry;
		}	
		SREG = intr_state;
     e84:	2f bf       	out	0x3f, r18	; 63
     e86:	2f ef       	ldi	r18, 0xFF	; 255
     e88:	3f ef       	ldi	r19, 0xFF	; 255
     e8a:	0c c0       	rjmp	.+24     	; 0xea4 <usb_serial_getchar+0x46>
		return -1;
	}
	// take one byte out of the buffer
	c = UEDATX;
     e8c:	90 91 f1 00 	lds	r25, 0x00F1
	// if buffer completely used, release it
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x6B;
     e90:	80 91 e8 00 	lds	r24, 0x00E8
     e94:	85 fd       	sbrc	r24, 5
     e96:	03 c0       	rjmp	.+6      	; 0xe9e <usb_serial_getchar+0x40>
     e98:	8b e6       	ldi	r24, 0x6B	; 107
     e9a:	80 93 e8 00 	sts	0x00E8, r24
	SREG = intr_state;
     e9e:	2f bf       	out	0x3f, r18	; 63
	return c;
     ea0:	29 2f       	mov	r18, r25
     ea2:	30 e0       	ldi	r19, 0x00	; 0
}
     ea4:	c9 01       	movw	r24, r18
     ea6:	08 95       	ret

00000ea8 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	uint8_t intr_state;

	if (usb_configuration) {
     ea8:	80 91 15 01 	lds	r24, 0x0115
     eac:	88 23       	and	r24, r24
     eae:	71 f0       	breq	.+28     	; 0xecc <usb_serial_flush_input+0x24>
		intr_state = SREG;
     eb0:	9f b7       	in	r25, 0x3f	; 63
		cli();
     eb2:	f8 94       	cli
		UENUM = CDC_RX_ENDPOINT;
     eb4:	83 e0       	ldi	r24, 0x03	; 3
     eb6:	80 93 e9 00 	sts	0x00E9, r24
		while ((UEINTX & (1<<RWAL))) {
			UEINTX = 0x6B; 
     eba:	2b e6       	ldi	r18, 0x6B	; 107
     ebc:	02 c0       	rjmp	.+4      	; 0xec2 <usb_serial_flush_input+0x1a>
     ebe:	20 93 e8 00 	sts	0x00E8, r18

	if (usb_configuration) {
		intr_state = SREG;
		cli();
		UENUM = CDC_RX_ENDPOINT;
		while ((UEINTX & (1<<RWAL))) {
     ec2:	80 91 e8 00 	lds	r24, 0x00E8
     ec6:	85 fd       	sbrc	r24, 5
     ec8:	fa cf       	rjmp	.-12     	; 0xebe <usb_serial_flush_input+0x16>
			UEINTX = 0x6B; 
		}
		SREG = intr_state;
     eca:	9f bf       	out	0x3f, r25	; 63
     ecc:	08 95       	ret

00000ece <usb_serial_putchar>:
	}
}

// transmit a character.  0 returned on success, -1 on error
int8_t usb_serial_putchar(uint8_t c)
{
     ece:	48 2f       	mov	r20, r24
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
     ed0:	80 91 15 01 	lds	r24, 0x0115
     ed4:	88 23       	and	r24, r24
     ed6:	d9 f1       	breq	.+118    	; 0xf4e <usb_serial_putchar+0x80>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     ed8:	2f b7       	in	r18, 0x3f	; 63
	cli();
     eda:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
     edc:	84 e0       	ldi	r24, 0x04	; 4
     ede:	80 93 e9 00 	sts	0x00E9, r24
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
     ee2:	80 91 18 01 	lds	r24, 0x0118
     ee6:	88 23       	and	r24, r24
     ee8:	41 f0       	breq	.+16     	; 0xefa <usb_serial_putchar+0x2c>
		if (!(UEINTX & (1<<RWAL))) {
     eea:	80 91 e8 00 	lds	r24, 0x00E8
     eee:	85 fd       	sbrc	r24, 5
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <usb_serial_putchar+0x28>
			SREG = intr_state;
     ef2:	2f bf       	out	0x3f, r18	; 63
     ef4:	12 c0       	rjmp	.+36     	; 0xf1a <usb_serial_putchar+0x4c>
			return -1;
		}
		transmit_previous_timeout = 0;
     ef6:	10 92 18 01 	sts	0x0118, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
     efa:	90 91 e4 00 	lds	r25, 0x00E4
     efe:	97 5e       	subi	r25, 0xE7	; 231
		// has the USB gone offline?
		if (!usb_configuration) return -1;
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
     f00:	34 e0       	ldi	r19, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     f02:	80 91 e8 00 	lds	r24, 0x00E8
     f06:	85 fd       	sbrc	r24, 5
     f08:	13 c0       	rjmp	.+38     	; 0xf30 <usb_serial_putchar+0x62>
		SREG = intr_state;
     f0a:	2f bf       	out	0x3f, r18	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     f0c:	80 91 e4 00 	lds	r24, 0x00E4
     f10:	89 17       	cp	r24, r25
     f12:	29 f4       	brne	.+10     	; 0xf1e <usb_serial_putchar+0x50>
			transmit_previous_timeout = 1;
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	80 93 18 01 	sts	0x0118, r24
     f1a:	8f ef       	ldi	r24, 0xFF	; 255
     f1c:	08 95       	ret
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     f1e:	80 91 15 01 	lds	r24, 0x0115
     f22:	88 23       	and	r24, r24
     f24:	a1 f0       	breq	.+40     	; 0xf4e <usb_serial_putchar+0x80>
		// get ready to try checking again
		intr_state = SREG;
     f26:	2f b7       	in	r18, 0x3f	; 63
		cli();
     f28:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
     f2a:	30 93 e9 00 	sts	0x00E9, r19
     f2e:	e9 cf       	rjmp	.-46     	; 0xf02 <usb_serial_putchar+0x34>
	}
	// actually write the byte into the FIFO
	UEDATX = c;
     f30:	40 93 f1 00 	sts	0x00F1, r20
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
     f34:	80 91 e8 00 	lds	r24, 0x00E8
     f38:	85 fd       	sbrc	r24, 5
     f3a:	03 c0       	rjmp	.+6      	; 0xf42 <usb_serial_putchar+0x74>
     f3c:	8a e3       	ldi	r24, 0x3A	; 58
     f3e:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
     f42:	85 e0       	ldi	r24, 0x05	; 5
     f44:	80 93 17 01 	sts	0x0117, r24
	SREG = intr_state;
     f48:	2f bf       	out	0x3f, r18	; 63
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	08 95       	ret
	return 0;
     f4e:	8f ef       	ldi	r24, 0xFF	; 255
}
     f50:	08 95       	ret

00000f52 <usb_serial_write>:
// can also be limited by how quickly the PC-based software reads data, as the host
// controller in the PC will not allocate bandwitdh without a pending read request.
// (thanks to Victor Suarez for testing and feedback and initial code)

int8_t usb_serial_write(const uint8_t *buffer, uint16_t size)
{
     f52:	cf 93       	push	r28
     f54:	df 93       	push	r29
     f56:	ec 01       	movw	r28, r24
	uint8_t timeout, intr_state, write_size;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
     f58:	80 91 15 01 	lds	r24, 0x0115
     f5c:	88 23       	and	r24, r24
     f5e:	09 f4       	brne	.+2      	; 0xf62 <usb_serial_write+0x10>
     f60:	1c c1       	rjmp	.+568    	; 0x119a <usb_serial_write+0x248>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     f62:	3f b7       	in	r19, 0x3f	; 63
	cli();
     f64:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
     f66:	84 e0       	ldi	r24, 0x04	; 4
     f68:	80 93 e9 00 	sts	0x00E9, r24
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
     f6c:	80 91 18 01 	lds	r24, 0x0118
     f70:	88 23       	and	r24, r24
     f72:	09 f4       	brne	.+2      	; 0xf76 <usb_serial_write+0x24>
     f74:	08 c1       	rjmp	.+528    	; 0x1186 <usb_serial_write+0x234>
		if (!(UEINTX & (1<<RWAL))) {
     f76:	80 91 e8 00 	lds	r24, 0x00E8
     f7a:	85 fd       	sbrc	r24, 5
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <usb_serial_write+0x30>
			SREG = intr_state;
     f7e:	3f bf       	out	0x3f, r19	; 63
     f80:	0c c1       	rjmp	.+536    	; 0x119a <usb_serial_write+0x248>
			return -1;
		}
		transmit_previous_timeout = 0;
     f82:	10 92 18 01 	sts	0x0118, r1
     f86:	ff c0       	rjmp	.+510    	; 0x1186 <usb_serial_write+0x234>
	}
	// each iteration of this loop transmits a packet
	while (size) {
		// wait for the FIFO to be ready to accept data
		timeout = UDFNUML + TRANSMIT_TIMEOUT;
     f88:	90 91 e4 00 	lds	r25, 0x00E4
     f8c:	97 5e       	subi	r25, 0xE7	; 231
		while (1) {
			// are we ready to transmit?
			if (UEINTX & (1<<RWAL)) break;
     f8e:	80 91 e8 00 	lds	r24, 0x00E8
     f92:	85 fd       	sbrc	r24, 5
     f94:	13 c0       	rjmp	.+38     	; 0xfbc <usb_serial_write+0x6a>
			SREG = intr_state;
     f96:	3f bf       	out	0x3f, r19	; 63
			// have we waited too long?  This happens if the user
			// is not running an application that is listening
			if (UDFNUML == timeout) {
     f98:	80 91 e4 00 	lds	r24, 0x00E4
     f9c:	89 17       	cp	r24, r25
     f9e:	21 f4       	brne	.+8      	; 0xfa8 <usb_serial_write+0x56>
				transmit_previous_timeout = 1;
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	80 93 18 01 	sts	0x0118, r24
     fa6:	f9 c0       	rjmp	.+498    	; 0x119a <usb_serial_write+0x248>
				return -1;
			}
			// has the USB gone offline?
			if (!usb_configuration) return -1;
     fa8:	80 91 15 01 	lds	r24, 0x0115
     fac:	88 23       	and	r24, r24
     fae:	09 f4       	brne	.+2      	; 0xfb2 <usb_serial_write+0x60>
     fb0:	f4 c0       	rjmp	.+488    	; 0x119a <usb_serial_write+0x248>
			// get ready to try checking again
			intr_state = SREG;
     fb2:	3f b7       	in	r19, 0x3f	; 63
			cli();
     fb4:	f8 94       	cli
			UENUM = CDC_TX_ENDPOINT;
     fb6:	b0 93 e9 00 	sts	0x00E9, r27
     fba:	e9 cf       	rjmp	.-46     	; 0xf8e <usb_serial_write+0x3c>
		}

		// compute how many bytes will fit into the next packet
		write_size = CDC_TX_SIZE - UEBCLX;
     fbc:	80 91 f2 00 	lds	r24, 0x00F2
     fc0:	24 2f       	mov	r18, r20
     fc2:	28 1b       	sub	r18, r24
		if (write_size > size) write_size = size;
     fc4:	82 2f       	mov	r24, r18
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	68 17       	cp	r22, r24
     fca:	79 07       	cpc	r23, r25
     fcc:	08 f4       	brcc	.+2      	; 0xfd0 <usb_serial_write+0x7e>
     fce:	26 2f       	mov	r18, r22
		size -= write_size;

		// write the packet
		switch (write_size) {
     fd0:	82 2f       	mov	r24, r18
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	81 34       	cpi	r24, 0x41	; 65
     fd6:	91 05       	cpc	r25, r1
     fd8:	08 f0       	brcs	.+2      	; 0xfdc <usb_serial_write+0x8a>
     fda:	c6 c0       	rjmp	.+396    	; 0x1168 <usb_serial_write+0x216>
     fdc:	84 5b       	subi	r24, 0xB4	; 180
     fde:	9f 4f       	sbci	r25, 0xFF	; 255
     fe0:	fc 01       	movw	r30, r24
     fe2:	ee 0f       	add	r30, r30
     fe4:	ff 1f       	adc	r31, r31
     fe6:	05 90       	lpm	r0, Z+
     fe8:	f4 91       	lpm	r31, Z+
     fea:	e0 2d       	mov	r30, r0
     fec:	09 94       	ijmp
			#if (CDC_TX_SIZE == 64)
			case 64: UEDATX = *buffer++;
     fee:	89 91       	ld	r24, Y+
     ff0:	80 93 f1 00 	sts	0x00F1, r24
			case 63: UEDATX = *buffer++;
     ff4:	89 91       	ld	r24, Y+
     ff6:	80 93 f1 00 	sts	0x00F1, r24
			case 62: UEDATX = *buffer++;
     ffa:	89 91       	ld	r24, Y+
     ffc:	80 93 f1 00 	sts	0x00F1, r24
			case 61: UEDATX = *buffer++;
    1000:	89 91       	ld	r24, Y+
    1002:	80 93 f1 00 	sts	0x00F1, r24
			case 60: UEDATX = *buffer++;
    1006:	89 91       	ld	r24, Y+
    1008:	80 93 f1 00 	sts	0x00F1, r24
			case 59: UEDATX = *buffer++;
    100c:	89 91       	ld	r24, Y+
    100e:	80 93 f1 00 	sts	0x00F1, r24
			case 58: UEDATX = *buffer++;
    1012:	89 91       	ld	r24, Y+
    1014:	80 93 f1 00 	sts	0x00F1, r24
			case 57: UEDATX = *buffer++;
    1018:	89 91       	ld	r24, Y+
    101a:	80 93 f1 00 	sts	0x00F1, r24
			case 56: UEDATX = *buffer++;
    101e:	89 91       	ld	r24, Y+
    1020:	80 93 f1 00 	sts	0x00F1, r24
			case 55: UEDATX = *buffer++;
    1024:	89 91       	ld	r24, Y+
    1026:	80 93 f1 00 	sts	0x00F1, r24
			case 54: UEDATX = *buffer++;
    102a:	89 91       	ld	r24, Y+
    102c:	80 93 f1 00 	sts	0x00F1, r24
			case 53: UEDATX = *buffer++;
    1030:	89 91       	ld	r24, Y+
    1032:	80 93 f1 00 	sts	0x00F1, r24
			case 52: UEDATX = *buffer++;
    1036:	89 91       	ld	r24, Y+
    1038:	80 93 f1 00 	sts	0x00F1, r24
			case 51: UEDATX = *buffer++;
    103c:	89 91       	ld	r24, Y+
    103e:	80 93 f1 00 	sts	0x00F1, r24
			case 50: UEDATX = *buffer++;
    1042:	89 91       	ld	r24, Y+
    1044:	80 93 f1 00 	sts	0x00F1, r24
			case 49: UEDATX = *buffer++;
    1048:	89 91       	ld	r24, Y+
    104a:	80 93 f1 00 	sts	0x00F1, r24
			case 48: UEDATX = *buffer++;
    104e:	89 91       	ld	r24, Y+
    1050:	80 93 f1 00 	sts	0x00F1, r24
			case 47: UEDATX = *buffer++;
    1054:	89 91       	ld	r24, Y+
    1056:	80 93 f1 00 	sts	0x00F1, r24
			case 46: UEDATX = *buffer++;
    105a:	89 91       	ld	r24, Y+
    105c:	80 93 f1 00 	sts	0x00F1, r24
			case 45: UEDATX = *buffer++;
    1060:	89 91       	ld	r24, Y+
    1062:	80 93 f1 00 	sts	0x00F1, r24
			case 44: UEDATX = *buffer++;
    1066:	89 91       	ld	r24, Y+
    1068:	80 93 f1 00 	sts	0x00F1, r24
			case 43: UEDATX = *buffer++;
    106c:	89 91       	ld	r24, Y+
    106e:	80 93 f1 00 	sts	0x00F1, r24
			case 42: UEDATX = *buffer++;
    1072:	89 91       	ld	r24, Y+
    1074:	80 93 f1 00 	sts	0x00F1, r24
			case 41: UEDATX = *buffer++;
    1078:	89 91       	ld	r24, Y+
    107a:	80 93 f1 00 	sts	0x00F1, r24
			case 40: UEDATX = *buffer++;
    107e:	89 91       	ld	r24, Y+
    1080:	80 93 f1 00 	sts	0x00F1, r24
			case 39: UEDATX = *buffer++;
    1084:	89 91       	ld	r24, Y+
    1086:	80 93 f1 00 	sts	0x00F1, r24
			case 38: UEDATX = *buffer++;
    108a:	89 91       	ld	r24, Y+
    108c:	80 93 f1 00 	sts	0x00F1, r24
			case 37: UEDATX = *buffer++;
    1090:	89 91       	ld	r24, Y+
    1092:	80 93 f1 00 	sts	0x00F1, r24
			case 36: UEDATX = *buffer++;
    1096:	89 91       	ld	r24, Y+
    1098:	80 93 f1 00 	sts	0x00F1, r24
			case 35: UEDATX = *buffer++;
    109c:	89 91       	ld	r24, Y+
    109e:	80 93 f1 00 	sts	0x00F1, r24
			case 34: UEDATX = *buffer++;
    10a2:	89 91       	ld	r24, Y+
    10a4:	80 93 f1 00 	sts	0x00F1, r24
			case 33: UEDATX = *buffer++;
    10a8:	89 91       	ld	r24, Y+
    10aa:	80 93 f1 00 	sts	0x00F1, r24
			#endif
			#if (CDC_TX_SIZE >= 32)
			case 32: UEDATX = *buffer++;
    10ae:	89 91       	ld	r24, Y+
    10b0:	80 93 f1 00 	sts	0x00F1, r24
			case 31: UEDATX = *buffer++;
    10b4:	89 91       	ld	r24, Y+
    10b6:	80 93 f1 00 	sts	0x00F1, r24
			case 30: UEDATX = *buffer++;
    10ba:	89 91       	ld	r24, Y+
    10bc:	80 93 f1 00 	sts	0x00F1, r24
			case 29: UEDATX = *buffer++;
    10c0:	89 91       	ld	r24, Y+
    10c2:	80 93 f1 00 	sts	0x00F1, r24
			case 28: UEDATX = *buffer++;
    10c6:	89 91       	ld	r24, Y+
    10c8:	80 93 f1 00 	sts	0x00F1, r24
			case 27: UEDATX = *buffer++;
    10cc:	89 91       	ld	r24, Y+
    10ce:	80 93 f1 00 	sts	0x00F1, r24
			case 26: UEDATX = *buffer++;
    10d2:	89 91       	ld	r24, Y+
    10d4:	80 93 f1 00 	sts	0x00F1, r24
			case 25: UEDATX = *buffer++;
    10d8:	89 91       	ld	r24, Y+
    10da:	80 93 f1 00 	sts	0x00F1, r24
			case 24: UEDATX = *buffer++;
    10de:	89 91       	ld	r24, Y+
    10e0:	80 93 f1 00 	sts	0x00F1, r24
			case 23: UEDATX = *buffer++;
    10e4:	89 91       	ld	r24, Y+
    10e6:	80 93 f1 00 	sts	0x00F1, r24
			case 22: UEDATX = *buffer++;
    10ea:	89 91       	ld	r24, Y+
    10ec:	80 93 f1 00 	sts	0x00F1, r24
			case 21: UEDATX = *buffer++;
    10f0:	89 91       	ld	r24, Y+
    10f2:	80 93 f1 00 	sts	0x00F1, r24
			case 20: UEDATX = *buffer++;
    10f6:	89 91       	ld	r24, Y+
    10f8:	80 93 f1 00 	sts	0x00F1, r24
			case 19: UEDATX = *buffer++;
    10fc:	89 91       	ld	r24, Y+
    10fe:	80 93 f1 00 	sts	0x00F1, r24
			case 18: UEDATX = *buffer++;
    1102:	89 91       	ld	r24, Y+
    1104:	80 93 f1 00 	sts	0x00F1, r24
			case 17: UEDATX = *buffer++;
    1108:	89 91       	ld	r24, Y+
    110a:	80 93 f1 00 	sts	0x00F1, r24
			#endif
			#if (CDC_TX_SIZE >= 16)
			case 16: UEDATX = *buffer++;
    110e:	89 91       	ld	r24, Y+
    1110:	80 93 f1 00 	sts	0x00F1, r24
			case 15: UEDATX = *buffer++;
    1114:	89 91       	ld	r24, Y+
    1116:	80 93 f1 00 	sts	0x00F1, r24
			case 14: UEDATX = *buffer++;
    111a:	89 91       	ld	r24, Y+
    111c:	80 93 f1 00 	sts	0x00F1, r24
			case 13: UEDATX = *buffer++;
    1120:	89 91       	ld	r24, Y+
    1122:	80 93 f1 00 	sts	0x00F1, r24
			case 12: UEDATX = *buffer++;
    1126:	89 91       	ld	r24, Y+
    1128:	80 93 f1 00 	sts	0x00F1, r24
			case 11: UEDATX = *buffer++;
    112c:	89 91       	ld	r24, Y+
    112e:	80 93 f1 00 	sts	0x00F1, r24
			case 10: UEDATX = *buffer++;
    1132:	89 91       	ld	r24, Y+
    1134:	80 93 f1 00 	sts	0x00F1, r24
			case  9: UEDATX = *buffer++;
    1138:	89 91       	ld	r24, Y+
    113a:	80 93 f1 00 	sts	0x00F1, r24
			#endif
			case  8: UEDATX = *buffer++;
    113e:	89 91       	ld	r24, Y+
    1140:	80 93 f1 00 	sts	0x00F1, r24
			case  7: UEDATX = *buffer++;
    1144:	89 91       	ld	r24, Y+
    1146:	80 93 f1 00 	sts	0x00F1, r24
			case  6: UEDATX = *buffer++;
    114a:	89 91       	ld	r24, Y+
    114c:	80 93 f1 00 	sts	0x00F1, r24
			case  5: UEDATX = *buffer++;
    1150:	89 91       	ld	r24, Y+
    1152:	80 93 f1 00 	sts	0x00F1, r24
			case  4: UEDATX = *buffer++;
    1156:	89 91       	ld	r24, Y+
    1158:	80 93 f1 00 	sts	0x00F1, r24
			case  3: UEDATX = *buffer++;
    115c:	89 91       	ld	r24, Y+
    115e:	80 93 f1 00 	sts	0x00F1, r24
			case  2: UEDATX = *buffer++;
    1162:	89 91       	ld	r24, Y+
    1164:	80 93 f1 00 	sts	0x00F1, r24
			default:
			case  1: UEDATX = *buffer++;
    1168:	89 91       	ld	r24, Y+
    116a:	80 93 f1 00 	sts	0x00F1, r24
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    116e:	80 91 e8 00 	lds	r24, 0x00E8
    1172:	85 fd       	sbrc	r24, 5
    1174:	02 c0       	rjmp	.+4      	; 0x117a <usb_serial_write+0x228>
    1176:	50 93 e8 00 	sts	0x00E8, r21
		}

		// compute how many bytes will fit into the next packet
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;
    117a:	62 1b       	sub	r22, r18
    117c:	71 09       	sbc	r23, r1
			case  1: UEDATX = *buffer++;
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    117e:	a0 93 17 01 	sts	0x0117, r26
		SREG = intr_state;
    1182:	3f bf       	out	0x3f, r19	; 63
    1184:	04 c0       	rjmp	.+8      	; 0x118e <usb_serial_write+0x23c>
			// has the USB gone offline?
			if (!usb_configuration) return -1;
			// get ready to try checking again
			intr_state = SREG;
			cli();
			UENUM = CDC_TX_ENDPOINT;
    1186:	b4 e0       	ldi	r27, 0x04	; 4
		}

		// compute how many bytes will fit into the next packet
		write_size = CDC_TX_SIZE - UEBCLX;
    1188:	40 e4       	ldi	r20, 0x40	; 64
			default:
			case  1: UEDATX = *buffer++;
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    118a:	5a e3       	ldi	r21, 0x3A	; 58
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    118c:	a5 e0       	ldi	r26, 0x05	; 5
			return -1;
		}
		transmit_previous_timeout = 0;
	}
	// each iteration of this loop transmits a packet
	while (size) {
    118e:	61 15       	cp	r22, r1
    1190:	71 05       	cpc	r23, r1
    1192:	09 f0       	breq	.+2      	; 0x1196 <usb_serial_write+0x244>
    1194:	f9 ce       	rjmp	.-526    	; 0xf88 <usb_serial_write+0x36>
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	01 c0       	rjmp	.+2      	; 0x119c <usb_serial_write+0x24a>
    119a:	8f ef       	ldi	r24, 0xFF	; 255
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
		SREG = intr_state;
	}
	return 0;
}
    119c:	df 91       	pop	r29
    119e:	cf 91       	pop	r28
    11a0:	08 95       	ret

000011a2 <usb_serial_get_control>:
	return cdc_line_coding[6];
}
uint8_t usb_serial_get_control(void)
{
	return cdc_line_rtsdtr;
}
    11a2:	80 91 16 01 	lds	r24, 0x0116
    11a6:	08 95       	ret

000011a8 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    11a8:	1f 92       	push	r1
    11aa:	0f 92       	push	r0
    11ac:	0f b6       	in	r0, 0x3f	; 63
    11ae:	0f 92       	push	r0
    11b0:	11 24       	eor	r1, r1
    11b2:	8f 93       	push	r24
    11b4:	9f 93       	push	r25
	uint8_t intbits, t;

        intbits = UDINT;
    11b6:	80 91 e1 00 	lds	r24, 0x00E1
        UDINT = 0;
    11ba:	10 92 e1 00 	sts	0x00E1, r1
        if (intbits & (1<<EORSTI)) {
    11be:	98 2f       	mov	r25, r24
    11c0:	83 ff       	sbrs	r24, 3
    11c2:	11 c0       	rjmp	.+34     	; 0x11e6 <__vector_10+0x3e>
		UENUM = 0;
    11c4:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	80 93 eb 00 	sts	0x00EB, r24
		UECFG0X = EP_TYPE_CONTROL;
    11ce:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    11d2:	82 e1       	ldi	r24, 0x12	; 18
    11d4:	80 93 ed 00 	sts	0x00ED, r24
		UEIENX = (1<<RXSTPE);
    11d8:	88 e0       	ldi	r24, 0x08	; 8
    11da:	80 93 f0 00 	sts	0x00F0, r24
		usb_configuration = 0;
    11de:	10 92 15 01 	sts	0x0115, r1
		cdc_line_rtsdtr = 0;
    11e2:	10 92 16 01 	sts	0x0116, r1
        }
	if (intbits & (1<<SOFI)) {
    11e6:	92 ff       	sbrs	r25, 2
    11e8:	13 c0       	rjmp	.+38     	; 0x1210 <__vector_10+0x68>
		if (usb_configuration) {
    11ea:	80 91 15 01 	lds	r24, 0x0115
    11ee:	88 23       	and	r24, r24
    11f0:	79 f0       	breq	.+30     	; 0x1210 <__vector_10+0x68>
			t = transmit_flush_timer;
    11f2:	80 91 17 01 	lds	r24, 0x0117
			if (t) {
    11f6:	88 23       	and	r24, r24
    11f8:	59 f0       	breq	.+22     	; 0x1210 <__vector_10+0x68>
				transmit_flush_timer = --t;
    11fa:	81 50       	subi	r24, 0x01	; 1
    11fc:	80 93 17 01 	sts	0x0117, r24
				if (!t) {
    1200:	88 23       	and	r24, r24
    1202:	31 f4       	brne	.+12     	; 0x1210 <__vector_10+0x68>
					UENUM = CDC_TX_ENDPOINT;
    1204:	84 e0       	ldi	r24, 0x04	; 4
    1206:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    120a:	8a e3       	ldi	r24, 0x3A	; 58
    120c:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    1210:	9f 91       	pop	r25
    1212:	8f 91       	pop	r24
    1214:	0f 90       	pop	r0
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	0f 90       	pop	r0
    121a:	1f 90       	pop	r1
    121c:	18 95       	reti

0000121e <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    121e:	1f 92       	push	r1
    1220:	0f 92       	push	r0
    1222:	0f b6       	in	r0, 0x3f	; 63
    1224:	0f 92       	push	r0
    1226:	0b b6       	in	r0, 0x3b	; 59
    1228:	0f 92       	push	r0
    122a:	11 24       	eor	r1, r1
    122c:	0f 93       	push	r16
    122e:	1f 93       	push	r17
    1230:	2f 93       	push	r18
    1232:	3f 93       	push	r19
    1234:	4f 93       	push	r20
    1236:	5f 93       	push	r21
    1238:	6f 93       	push	r22
    123a:	7f 93       	push	r23
    123c:	8f 93       	push	r24
    123e:	9f 93       	push	r25
    1240:	af 93       	push	r26
    1242:	bf 93       	push	r27
    1244:	ef 93       	push	r30
    1246:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    1248:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    124c:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    1250:	83 ff       	sbrs	r24, 3
    1252:	3c c1       	rjmp	.+632    	; 0x14cc <__vector_11+0x2ae>
                bmRequestType = UEDATX;
    1254:	40 91 f1 00 	lds	r20, 0x00F1
                bRequest = UEDATX;
    1258:	30 91 f1 00 	lds	r19, 0x00F1
                wValue = UEDATX;
    125c:	80 91 f1 00 	lds	r24, 0x00F1
    1260:	68 2f       	mov	r22, r24
    1262:	70 e0       	ldi	r23, 0x00	; 0
                wValue |= (UEDATX << 8);
    1264:	20 91 f1 00 	lds	r18, 0x00F1
    1268:	92 2f       	mov	r25, r18
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	68 2b       	or	r22, r24
    126e:	79 2b       	or	r23, r25
                wIndex = UEDATX;
    1270:	80 91 f1 00 	lds	r24, 0x00F1
    1274:	a8 2f       	mov	r26, r24
    1276:	b0 e0       	ldi	r27, 0x00	; 0
                wIndex |= (UEDATX << 8);
    1278:	20 91 f1 00 	lds	r18, 0x00F1
    127c:	92 2f       	mov	r25, r18
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	a8 2b       	or	r26, r24
    1282:	b9 2b       	or	r27, r25
                wLength = UEDATX;
    1284:	10 91 f1 00 	lds	r17, 0x00F1
                wLength |= (UEDATX << 8);
    1288:	00 91 f1 00 	lds	r16, 0x00F1
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    128c:	82 ef       	ldi	r24, 0xF2	; 242
    128e:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
    1292:	36 30       	cpi	r19, 0x06	; 6
    1294:	09 f0       	breq	.+2      	; 0x1298 <__vector_11+0x7a>
    1296:	5a c0       	rjmp	.+180    	; 0x134c <__vector_11+0x12e>
    1298:	24 e0       	ldi	r18, 0x04	; 4
    129a:	36 e0       	ldi	r19, 0x06	; 6
    129c:	a9 01       	movw	r20, r18
    129e:	45 50       	subi	r20, 0x05	; 5
    12a0:	50 40       	sbci	r21, 0x00	; 0
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
    12a2:	f9 01       	movw	r30, r18
    12a4:	37 97       	sbiw	r30, 0x07	; 7
				}
				desc_val = pgm_read_word(list);
    12a6:	85 91       	lpm	r24, Z+
    12a8:	94 91       	lpm	r25, Z+
				if (desc_val != wValue) {
    12aa:	86 17       	cp	r24, r22
    12ac:	97 07       	cpc	r25, r23
    12ae:	01 f5       	brne	.+64     	; 0x12f0 <__vector_11+0xd2>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
    12b0:	fa 01       	movw	r30, r20
    12b2:	85 91       	lpm	r24, Z+
    12b4:	94 91       	lpm	r25, Z+
				if (desc_val != wIndex) {
    12b6:	8a 17       	cp	r24, r26
    12b8:	9b 07       	cpc	r25, r27
    12ba:	d1 f4       	brne	.+52     	; 0x12f0 <__vector_11+0xd2>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
    12bc:	9a 01       	movw	r18, r20
    12be:	2e 5f       	subi	r18, 0xFE	; 254
    12c0:	3f 4f       	sbci	r19, 0xFF	; 255
				desc_addr = (const uint8_t *)pgm_read_word(list);
    12c2:	f9 01       	movw	r30, r18
    12c4:	65 91       	lpm	r22, Z+
    12c6:	74 91       	lpm	r23, Z+
				list += 2;
				desc_length = pgm_read_byte(list);
    12c8:	2e 5f       	subi	r18, 0xFE	; 254
    12ca:	3f 4f       	sbci	r19, 0xFF	; 255
    12cc:	f9 01       	movw	r30, r18
    12ce:	44 91       	lpm	r20, Z+
                bRequest = UEDATX;
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
    12d0:	21 2f       	mov	r18, r17
    12d2:	30 e0       	ldi	r19, 0x00	; 0
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    12d4:	90 2f       	mov	r25, r16
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	28 2b       	or	r18, r24
    12da:	39 2b       	or	r19, r25
    12dc:	2f 3f       	cpi	r18, 0xFF	; 255
    12de:	31 05       	cpc	r19, r1
    12e0:	19 f0       	breq	.+6      	; 0x12e8 <__vector_11+0xca>
    12e2:	10 f0       	brcs	.+4      	; 0x12e8 <__vector_11+0xca>
    12e4:	2f ef       	ldi	r18, 0xFF	; 255
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	24 17       	cp	r18, r20
    12ea:	58 f4       	brcc	.+22     	; 0x1302 <__vector_11+0xe4>
    12ec:	42 2f       	mov	r20, r18
    12ee:	09 c0       	rjmp	.+18     	; 0x1302 <__vector_11+0xe4>
    12f0:	29 5f       	subi	r18, 0xF9	; 249
    12f2:	3f 4f       	sbci	r19, 0xFF	; 255
    12f4:	49 5f       	subi	r20, 0xF9	; 249
    12f6:	5f 4f       	sbci	r21, 0xFF	; 255
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    12f8:	f6 e0       	ldi	r31, 0x06	; 6
    12fa:	2e 32       	cpi	r18, 0x2E	; 46
    12fc:	3f 07       	cpc	r19, r31
    12fe:	89 f6       	brne	.-94     	; 0x12a2 <__vector_11+0x84>
    1300:	e5 c0       	rjmp	.+458    	; 0x14cc <__vector_11+0x2ae>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1302:	5e ef       	ldi	r21, 0xFE	; 254
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    1304:	80 91 e8 00 	lds	r24, 0x00E8
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    1308:	28 2f       	mov	r18, r24
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	c9 01       	movw	r24, r18
    130e:	85 70       	andi	r24, 0x05	; 5
    1310:	90 70       	andi	r25, 0x00	; 0
    1312:	89 2b       	or	r24, r25
    1314:	b9 f3       	breq	.-18     	; 0x1304 <__vector_11+0xe6>
				if (i & (1<<RXOUTI)) return;	// abort
    1316:	22 fd       	sbrc	r18, 2
    1318:	dc c0       	rjmp	.+440    	; 0x14d2 <__vector_11+0x2b4>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    131a:	34 2f       	mov	r19, r20
    131c:	41 31       	cpi	r20, 0x11	; 17
    131e:	08 f0       	brcs	.+2      	; 0x1322 <__vector_11+0x104>
    1320:	30 e1       	ldi	r19, 0x10	; 16
    1322:	23 2f       	mov	r18, r19
    1324:	cb 01       	movw	r24, r22
    1326:	06 c0       	rjmp	.+12     	; 0x1334 <__vector_11+0x116>
				for (i = n; i; i--) {
    1328:	fc 01       	movw	r30, r24
					UEDATX = pgm_read_byte(desc_addr++);
    132a:	01 96       	adiw	r24, 0x01	; 1
    132c:	e4 91       	lpm	r30, Z+
    132e:	e0 93 f1 00 	sts	0x00F1, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    1332:	21 50       	subi	r18, 0x01	; 1
    1334:	22 23       	and	r18, r18
    1336:	c1 f7       	brne	.-16     	; 0x1328 <__vector_11+0x10a>
    1338:	63 0f       	add	r22, r19
    133a:	71 1d       	adc	r23, r1
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    133c:	43 1b       	sub	r20, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    133e:	50 93 e8 00 	sts	0x00E8, r21
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1342:	44 23       	and	r20, r20
    1344:	f9 f6       	brne	.-66     	; 0x1304 <__vector_11+0xe6>
    1346:	30 31       	cpi	r19, 0x10	; 16
    1348:	e9 f2       	breq	.-70     	; 0x1304 <__vector_11+0xe6>
    134a:	c3 c0       	rjmp	.+390    	; 0x14d2 <__vector_11+0x2b4>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    134c:	35 30       	cpi	r19, 0x05	; 5
    134e:	61 f4       	brne	.+24     	; 0x1368 <__vector_11+0x14a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1350:	8e ef       	ldi	r24, 0xFE	; 254
    1352:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1356:	80 91 e8 00 	lds	r24, 0x00E8
    135a:	80 ff       	sbrs	r24, 0
    135c:	fc cf       	rjmp	.-8      	; 0x1356 <__vector_11+0x138>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    135e:	86 2f       	mov	r24, r22
    1360:	80 68       	ori	r24, 0x80	; 128
    1362:	80 93 e3 00 	sts	0x00E3, r24
    1366:	b5 c0       	rjmp	.+362    	; 0x14d2 <__vector_11+0x2b4>
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    1368:	39 30       	cpi	r19, 0x09	; 9
    136a:	51 f5       	brne	.+84     	; 0x13c0 <__vector_11+0x1a2>
    136c:	44 23       	and	r20, r20
    136e:	09 f0       	breq	.+2      	; 0x1372 <__vector_11+0x154>
    1370:	ad c0       	rjmp	.+346    	; 0x14cc <__vector_11+0x2ae>
			usb_configuration = wValue;
    1372:	60 93 15 01 	sts	0x0115, r22
			cdc_line_rtsdtr = 0;
    1376:	10 92 16 01 	sts	0x0116, r1
			transmit_flush_timer = 0;
    137a:	10 92 17 01 	sts	0x0117, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    137e:	8e ef       	ldi	r24, 0xFE	; 254
    1380:	80 93 e8 00 	sts	0x00E8, r24
    1384:	87 e2       	ldi	r24, 0x27	; 39
    1386:	96 e0       	ldi	r25, 0x06	; 6
    1388:	21 e0       	ldi	r18, 0x01	; 1
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    138a:	20 93 e9 00 	sts	0x00E9, r18
				en = pgm_read_byte(cfg++);
    138e:	fc 01       	movw	r30, r24
    1390:	01 96       	adiw	r24, 0x01	; 1
    1392:	e4 91       	lpm	r30, Z+
				UECONX = en;
    1394:	e0 93 eb 00 	sts	0x00EB, r30
				if (en) {
    1398:	ee 23       	and	r30, r30
    139a:	69 f0       	breq	.+26     	; 0x13b6 <__vector_11+0x198>
					UECFG0X = pgm_read_byte(cfg++);
    139c:	ac 01       	movw	r20, r24
    139e:	4f 5f       	subi	r20, 0xFF	; 255
    13a0:	5f 4f       	sbci	r21, 0xFF	; 255
    13a2:	fc 01       	movw	r30, r24
    13a4:	84 91       	lpm	r24, Z+
    13a6:	80 93 ec 00 	sts	0x00EC, r24
					UECFG1X = pgm_read_byte(cfg++);
    13aa:	ca 01       	movw	r24, r20
    13ac:	01 96       	adiw	r24, 0x01	; 1
    13ae:	fa 01       	movw	r30, r20
    13b0:	34 91       	lpm	r19, Z+
    13b2:	30 93 ed 00 	sts	0x00ED, r19
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    13b6:	2f 5f       	subi	r18, 0xFF	; 255
    13b8:	25 30       	cpi	r18, 0x05	; 5
    13ba:	39 f7       	brne	.-50     	; 0x138a <__vector_11+0x16c>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    13bc:	8e e1       	ldi	r24, 0x1E	; 30
    13be:	81 c0       	rjmp	.+258    	; 0x14c2 <__vector_11+0x2a4>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    13c0:	38 30       	cpi	r19, 0x08	; 8
    13c2:	61 f4       	brne	.+24     	; 0x13dc <__vector_11+0x1be>
    13c4:	40 38       	cpi	r20, 0x80	; 128
    13c6:	09 f0       	breq	.+2      	; 0x13ca <__vector_11+0x1ac>
    13c8:	81 c0       	rjmp	.+258    	; 0x14cc <__vector_11+0x2ae>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    13ca:	80 91 e8 00 	lds	r24, 0x00E8
    13ce:	80 ff       	sbrs	r24, 0
    13d0:	fc cf       	rjmp	.-8      	; 0x13ca <__vector_11+0x1ac>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    13d2:	80 91 15 01 	lds	r24, 0x0115
    13d6:	80 93 f1 00 	sts	0x00F1, r24
    13da:	50 c0       	rjmp	.+160    	; 0x147c <__vector_11+0x25e>
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    13dc:	31 32       	cpi	r19, 0x21	; 33
    13de:	89 f4       	brne	.+34     	; 0x1402 <__vector_11+0x1e4>
    13e0:	41 3a       	cpi	r20, 0xA1	; 161
    13e2:	09 f0       	breq	.+2      	; 0x13e6 <__vector_11+0x1c8>
    13e4:	73 c0       	rjmp	.+230    	; 0x14cc <__vector_11+0x2ae>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    13e6:	80 91 e8 00 	lds	r24, 0x00E8
    13ea:	80 ff       	sbrs	r24, 0
    13ec:	fc cf       	rjmp	.-8      	; 0x13e6 <__vector_11+0x1c8>
    13ee:	e1 e0       	ldi	r30, 0x01	; 1
    13f0:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    13f2:	81 91       	ld	r24, Z+
    13f4:	80 93 f1 00 	sts	0x00F1, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	e8 30       	cpi	r30, 0x08	; 8
    13fc:	f8 07       	cpc	r31, r24
    13fe:	c9 f7       	brne	.-14     	; 0x13f2 <__vector_11+0x1d4>
    1400:	3d c0       	rjmp	.+122    	; 0x147c <__vector_11+0x25e>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    1402:	30 32       	cpi	r19, 0x20	; 32
    1404:	a1 f4       	brne	.+40     	; 0x142e <__vector_11+0x210>
    1406:	41 32       	cpi	r20, 0x21	; 33
    1408:	09 f0       	breq	.+2      	; 0x140c <__vector_11+0x1ee>
    140a:	60 c0       	rjmp	.+192    	; 0x14cc <__vector_11+0x2ae>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    140c:	80 91 e8 00 	lds	r24, 0x00E8
    1410:	82 ff       	sbrs	r24, 2
    1412:	fc cf       	rjmp	.-8      	; 0x140c <__vector_11+0x1ee>
    1414:	e1 e0       	ldi	r30, 0x01	; 1
    1416:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    1418:	80 91 f1 00 	lds	r24, 0x00F1
    141c:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	e8 30       	cpi	r30, 0x08	; 8
    1422:	f8 07       	cpc	r31, r24
    1424:	c9 f7       	brne	.-14     	; 0x1418 <__vector_11+0x1fa>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    1426:	8b ef       	ldi	r24, 0xFB	; 251
    1428:	80 93 e8 00 	sts	0x00E8, r24
    142c:	27 c0       	rjmp	.+78     	; 0x147c <__vector_11+0x25e>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    142e:	32 32       	cpi	r19, 0x22	; 34
    1430:	51 f4       	brne	.+20     	; 0x1446 <__vector_11+0x228>
    1432:	41 32       	cpi	r20, 0x21	; 33
    1434:	09 f0       	breq	.+2      	; 0x1438 <__vector_11+0x21a>
    1436:	4a c0       	rjmp	.+148    	; 0x14cc <__vector_11+0x2ae>
			cdc_line_rtsdtr = wValue;
    1438:	60 93 16 01 	sts	0x0116, r22


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    143c:	80 91 e8 00 	lds	r24, 0x00E8
    1440:	80 ff       	sbrs	r24, 0
    1442:	fc cf       	rjmp	.-8      	; 0x143c <__vector_11+0x21e>
    1444:	1b c0       	rjmp	.+54     	; 0x147c <__vector_11+0x25e>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    1446:	33 23       	and	r19, r19
    1448:	e9 f4       	brne	.+58     	; 0x1484 <__vector_11+0x266>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    144a:	80 91 e8 00 	lds	r24, 0x00E8
    144e:	80 ff       	sbrs	r24, 0
    1450:	fc cf       	rjmp	.-8      	; 0x144a <__vector_11+0x22c>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    1452:	42 38       	cpi	r20, 0x82	; 130
    1454:	11 f0       	breq	.+4      	; 0x145a <__vector_11+0x23c>
    1456:	80 e0       	ldi	r24, 0x00	; 0
    1458:	0d c0       	rjmp	.+26     	; 0x1474 <__vector_11+0x256>
				UENUM = wIndex;
    145a:	a0 93 e9 00 	sts	0x00E9, r26
				if (UECONX & (1<<STALLRQ)) i = 1;
    145e:	80 91 eb 00 	lds	r24, 0x00EB
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	25 e0       	ldi	r18, 0x05	; 5
    1466:	96 95       	lsr	r25
    1468:	87 95       	ror	r24
    146a:	2a 95       	dec	r18
    146c:	e1 f7       	brne	.-8      	; 0x1466 <__vector_11+0x248>
    146e:	81 70       	andi	r24, 0x01	; 1
				UENUM = 0;
    1470:	10 92 e9 00 	sts	0x00E9, r1
			}
			#endif
			UEDATX = i;
    1474:	80 93 f1 00 	sts	0x00F1, r24
			UEDATX = 0;
    1478:	10 92 f1 00 	sts	0x00F1, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    147c:	8e ef       	ldi	r24, 0xFE	; 254
    147e:	80 93 e8 00 	sts	0x00E8, r24
    1482:	27 c0       	rjmp	.+78     	; 0x14d2 <__vector_11+0x2b4>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    1484:	31 30       	cpi	r19, 0x01	; 1
    1486:	11 f0       	breq	.+4      	; 0x148c <__vector_11+0x26e>
    1488:	33 30       	cpi	r19, 0x03	; 3
    148a:	01 f5       	brne	.+64     	; 0x14cc <__vector_11+0x2ae>
    148c:	42 30       	cpi	r20, 0x02	; 2
    148e:	f1 f4       	brne	.+60     	; 0x14cc <__vector_11+0x2ae>
    1490:	67 2b       	or	r22, r23
    1492:	e1 f4       	brne	.+56     	; 0x14cc <__vector_11+0x2ae>
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
    1494:	2a 2f       	mov	r18, r26
    1496:	2f 77       	andi	r18, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    1498:	82 2f       	mov	r24, r18
    149a:	81 50       	subi	r24, 0x01	; 1
    149c:	84 30       	cpi	r24, 0x04	; 4
    149e:	b0 f4       	brcc	.+44     	; 0x14cc <__vector_11+0x2ae>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    14a0:	8e ef       	ldi	r24, 0xFE	; 254
    14a2:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    14a6:	20 93 e9 00 	sts	0x00E9, r18
				if (bRequest == SET_FEATURE) {
    14aa:	33 30       	cpi	r19, 0x03	; 3
    14ac:	79 f0       	breq	.+30     	; 0x14cc <__vector_11+0x2ae>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    14ae:	89 e1       	ldi	r24, 0x19	; 25
    14b0:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	02 c0       	rjmp	.+4      	; 0x14be <__vector_11+0x2a0>
    14ba:	88 0f       	add	r24, r24
    14bc:	99 1f       	adc	r25, r25
    14be:	2a 95       	dec	r18
    14c0:	e2 f7       	brpl	.-8      	; 0x14ba <__vector_11+0x29c>
    14c2:	80 93 ea 00 	sts	0x00EA, r24
					UERST = 0;
    14c6:	10 92 ea 00 	sts	0x00EA, r1
    14ca:	03 c0       	rjmp	.+6      	; 0x14d2 <__vector_11+0x2b4>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    14cc:	81 e2       	ldi	r24, 0x21	; 33
    14ce:	80 93 eb 00 	sts	0x00EB, r24
}
    14d2:	ff 91       	pop	r31
    14d4:	ef 91       	pop	r30
    14d6:	bf 91       	pop	r27
    14d8:	af 91       	pop	r26
    14da:	9f 91       	pop	r25
    14dc:	8f 91       	pop	r24
    14de:	7f 91       	pop	r23
    14e0:	6f 91       	pop	r22
    14e2:	5f 91       	pop	r21
    14e4:	4f 91       	pop	r20
    14e6:	3f 91       	pop	r19
    14e8:	2f 91       	pop	r18
    14ea:	1f 91       	pop	r17
    14ec:	0f 91       	pop	r16
    14ee:	0f 90       	pop	r0
    14f0:	0b be       	out	0x3b, r0	; 59
    14f2:	0f 90       	pop	r0
    14f4:	0f be       	out	0x3f, r0	; 63
    14f6:	0f 90       	pop	r0
    14f8:	1f 90       	pop	r1
    14fa:	18 95       	reti

000014fc <initializeHVACGarage>:


void initializeHVACGarage(void)
{
	// configures all of the pins to be outputs or inputs
	GARAGE_SWITCH_CONFIG;//out
    14fc:	54 9a       	sbi	0x0a, 4	; 10
	G_FAN_SWITCH_CONFIG;// out
    14fe:	55 9a       	sbi	0x0a, 5	; 10
	W_HEAT_SWITCH_CONFIG;// out
    1500:	56 9a       	sbi	0x0a, 6	; 10
	Y_COOL_SWITCH_CONFIG;// out
    1502:	57 9a       	sbi	0x0a, 7	; 10
	G_FAN_TRIGGER_CONFIG;// in
    1504:	39 98       	cbi	0x07, 1	; 7
	W_HEAT_TRIGGER_CONFIG;// in
    1506:	69 98       	cbi	0x0d, 1	; 13
	Y_COOL_TRIGGER_CONFIG;// in
    1508:	38 98       	cbi	0x07, 0	; 7
	
}
    150a:	08 95       	ret

0000150c <PulseGarage>:
*	makes the Garage door relay turn on for 0.5 seconds, then back off.
*	this will either open, close or stop the garage door.
*/
void PulseGarage(void)
{
	GARAGE_SWITCH_ON;
    150c:	5c 9a       	sbi	0x0b, 4	; 11
	for(int i = 0; i < 1000; i++);//wait
	GARAGE_SWITCH_OFF;
    150e:	5c 98       	cbi	0x0b, 4	; 11
}
    1510:	08 95       	ret

00001512 <ReadGFan>:
*	really it is on.
*	returns 1 for on and 0 for off.
*/
uint8_t ReadGFan(void)
{
	return G_FAN_TRIGGER_READ;
    1512:	86 b1       	in	r24, 0x06	; 6
}
    1514:	82 70       	andi	r24, 0x02	; 2
    1516:	08 95       	ret

00001518 <ReadWHeat>:
*	really it is on.
*	returns 1 for on and 0 for off.
*/
uint8_t ReadWHeat(void)
{
	return W_HEAT_TRIGGER_READ;
    1518:	8c b1       	in	r24, 0x0c	; 12
}
    151a:	82 70       	andi	r24, 0x02	; 2
    151c:	08 95       	ret

0000151e <ReadYCool>:
*	really it is on.
*	returns 1 for on and 0 for off.
*/
uint8_t ReadYCool(void)
{
	return Y_COOL_TRIGGER_READ;
    151e:	86 b1       	in	r24, 0x06	; 6
}
    1520:	81 70       	andi	r24, 0x01	; 1
    1522:	08 95       	ret

00001524 <SetGFan>:
*	Probably should have a failsafe on this.
*	if state equals 1 the relay is on, and if 0 for off.
*/
void SetGFan(uint8_t state)
{
	if(state == 1)
    1524:	81 30       	cpi	r24, 0x01	; 1
    1526:	41 f4       	brne	.+16     	; 0x1538 <SetGFan+0x14>
	{
		G_FAN_SWITCH_ON;
    1528:	5d 9a       	sbi	0x0b, 5	; 11
		GFanStatus = 1;
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	90 93 20 01 	sts	0x0120, r25
    1532:	80 93 1f 01 	sts	0x011F, r24
    1536:	08 95       	ret
	}
	else
	{
		G_FAN_SWITCH_OFF;
    1538:	5d 98       	cbi	0x0b, 5	; 11
		GFanStatus = 0;
    153a:	10 92 20 01 	sts	0x0120, r1
    153e:	10 92 1f 01 	sts	0x011F, r1
    1542:	08 95       	ret

00001544 <SetWHeat>:
*	Probably should have a failsafe on this.
*	if state equals 1 the relay is on, and if 0 for off.
*/
void SetWHeat(uint8_t state)
{
	if(state == 1)
    1544:	81 30       	cpi	r24, 0x01	; 1
    1546:	41 f4       	brne	.+16     	; 0x1558 <SetWHeat+0x14>
	{
		W_HEAT_SWITCH_ON;
    1548:	5e 9a       	sbi	0x0b, 6	; 11
		WHeatStatus = 1;
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	90 93 1e 01 	sts	0x011E, r25
    1552:	80 93 1d 01 	sts	0x011D, r24
    1556:	08 95       	ret
	}
	else
	{
		W_HEAT_SWITCH_OFF;
    1558:	5e 98       	cbi	0x0b, 6	; 11
		WHeatStatus = 0;
    155a:	10 92 1e 01 	sts	0x011E, r1
    155e:	10 92 1d 01 	sts	0x011D, r1
    1562:	08 95       	ret

00001564 <SetYCool>:
*	Probably should have a failsafe on this.
*	if state equals 1 the relay is on, and if 0 for off.
*/
void SetYCool(uint8_t state)
{
	if(state == 1)
    1564:	81 30       	cpi	r24, 0x01	; 1
    1566:	41 f4       	brne	.+16     	; 0x1578 <SetYCool+0x14>
	{
		Y_COOL_SWITCH_ON;
    1568:	5f 9a       	sbi	0x0b, 7	; 11
		YCoolStatus = 1;
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	90 93 1a 01 	sts	0x011A, r25
    1572:	80 93 19 01 	sts	0x0119, r24
    1576:	08 95       	ret
	}
	else
	{
		Y_COOL_SWITCH_OFF;
    1578:	5f 98       	cbi	0x0b, 7	; 11
		YCoolStatus = 0;
    157a:	10 92 1a 01 	sts	0x011A, r1
    157e:	10 92 19 01 	sts	0x0119, r1
    1582:	08 95       	ret

00001584 <SetHVAC>:
*	want to keep this off unless we want it on.
*
**/
void SetHVAC(uint8_t state)
{
	if(state == 1)
    1584:	81 30       	cpi	r24, 0x01	; 1
    1586:	41 f4       	brne	.+16     	; 0x1598 <SetHVAC+0x14>
	{
		HVAC_SWITCH_ON;
    1588:	70 9a       	sbi	0x0e, 0	; 14
		HVACStatus = 1;
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	90 93 1c 01 	sts	0x011C, r25
    1592:	80 93 1b 01 	sts	0x011B, r24
    1596:	08 95       	ret
	}
	else
	{
		HVAC_SWITCH_OFF;
    1598:	70 98       	cbi	0x0e, 0	; 14
		HVACStatus = 0;
    159a:	10 92 1c 01 	sts	0x011C, r1
    159e:	10 92 1b 01 	sts	0x011B, r1
    15a2:	08 95       	ret

000015a4 <InitializeDamper>:
/**
*	initializes all of the dampers outputs.
*/
void InitializeDamper()
{
	MotorDirection1_CONFIG;// A4988 driver us this one
    15a4:	26 9a       	sbi	0x04, 6	; 4
	MotorDirection2_CONFIG;
    15a6:	25 9a       	sbi	0x04, 5	; 4
	MotorStep_CONFIG;
    15a8:	24 9a       	sbi	0x04, 4	; 4
	ISBUTTONCLOSE_CONFIG;
    15aa:	50 98       	cbi	0x0a, 0	; 10
	ISBUTTONOPEN_CONFIG;
    15ac:	51 98       	cbi	0x0a, 1	; 10
}
    15ae:	08 95       	ret

000015b0 <ActivateDamper>:
*	Sets the correct damper to be active.
* Damper is high when button isn't pressed
* for simplicity it would be better to switch this to string comparisons.
*/
void ActivateDamper(uint8_t damper)
{
    15b0:	ef 92       	push	r14
    15b2:	ff 92       	push	r15
    15b4:	0f 93       	push	r16
    15b6:	1f 93       	push	r17
    15b8:	df 93       	push	r29
    15ba:	cf 93       	push	r28
    15bc:	00 d0       	rcall	.+0      	; 0x15be <ActivateDamper+0xe>
    15be:	00 d0       	rcall	.+0      	; 0x15c0 <ActivateDamper+0x10>
    15c0:	cd b7       	in	r28, 0x3d	; 61
    15c2:	de b7       	in	r29, 0x3e	; 62
// converts decimal to binary digits for ABCD
// could be backwards.
// example input A hex or 1010 bin or 10 dec
	uint8_t D = damper / 8;//  D = 1bin or 1 dec
    15c4:	f8 2e       	mov	r15, r24
    15c6:	f6 94       	lsr	r15
    15c8:	f6 94       	lsr	r15
    15ca:	f6 94       	lsr	r15
	uint8_t temp = damper % 8;// temp = 10bin and 2 dec
    15cc:	08 2f       	mov	r16, r24
    15ce:	07 70       	andi	r16, 0x07	; 7
	
	uint8_t C = temp / 4;// C = (2)/4 = 0
    15d0:	06 95       	lsr	r16
    15d2:	06 95       	lsr	r16
	temp = temp % 4;// temp = (2)%4 = 2
    15d4:	18 2f       	mov	r17, r24
    15d6:	13 70       	andi	r17, 0x03	; 3
	
	uint8_t B = temp / 2;// 1
    15d8:	16 95       	lsr	r17
	temp = temp % 2;// 0
    15da:	ee 24       	eor	r14, r14
    15dc:	e3 94       	inc	r14
    15de:	e8 22       	and	r14, r24
	uint8_t A = temp; 
	
	char tempBuf[4];
					//itoa(Command, tempBuf,10);
					
					tempBuf[0] = (char)A + '0';
    15e0:	80 e3       	ldi	r24, 0x30	; 48
    15e2:	e8 0e       	add	r14, r24
    15e4:	e9 82       	std	Y+1, r14	; 0x01
    15e6:	80 ed       	ldi	r24, 0xD0	; 208
    15e8:	e8 0e       	add	r14, r24
					tempBuf[1] = (char)B + '0';
    15ea:	10 5d       	subi	r17, 0xD0	; 208
    15ec:	1a 83       	std	Y+2, r17	; 0x02
    15ee:	10 53       	subi	r17, 0x30	; 48
					tempBuf[2] = (char)C + '0';
    15f0:	00 5d       	subi	r16, 0xD0	; 208
    15f2:	0b 83       	std	Y+3, r16	; 0x03
    15f4:	00 53       	subi	r16, 0x30	; 48
					tempBuf[3] = (char)D + '0';
    15f6:	80 e3       	ldi	r24, 0x30	; 48
    15f8:	f8 0e       	add	r15, r24
    15fa:	fc 82       	std	Y+4, r15	; 0x04
    15fc:	80 ed       	ldi	r24, 0xD0	; 208
    15fe:	f8 0e       	add	r15, r24
					send_str(PSTR("Test Outputs of ABCD:\r\n"));
    1600:	8f ec       	ldi	r24, 0xCF	; 207
    1602:	96 e0       	ldi	r25, 0x06	; 6
    1604:	96 d9       	rcall	.-3284   	; 0x932 <send_str>
					usb_serial_write(tempBuf, 4);
    1606:	ce 01       	movw	r24, r28
    1608:	01 96       	adiw	r24, 0x01	; 1
    160a:	64 e0       	ldi	r22, 0x04	; 4
    160c:	70 e0       	ldi	r23, 0x00	; 0
    160e:	a1 dc       	rcall	.-1726   	; 0xf52 <usb_serial_write>
					//usb_serial_write(itemBuf, 2);
					send_str(PSTR("\r\n"));
    1610:	8c ec       	ldi	r24, 0xCC	; 204
    1612:	96 e0       	ldi	r25, 0x06	; 6
    1614:	8e d9       	rcall	.-3300   	; 0x932 <send_str>
	//set the output pins as such.
	//d to A
	if(D==1)
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	f8 16       	cp	r15, r24
    161a:	11 f4       	brne	.+4      	; 0x1620 <ActivateDamper+0x70>
	{
		DEMUX_D_ON;
    161c:	2a 9a       	sbi	0x05, 2	; 5
    161e:	01 c0       	rjmp	.+2      	; 0x1622 <ActivateDamper+0x72>
	}
	else
	{
		DEMUX_D_OFF;
    1620:	2a 98       	cbi	0x05, 2	; 5
	}
	if(C==1)
    1622:	01 30       	cpi	r16, 0x01	; 1
    1624:	11 f4       	brne	.+4      	; 0x162a <ActivateDamper+0x7a>
	{
		DEMUX_C_ON;
    1626:	29 9a       	sbi	0x05, 1	; 5
    1628:	01 c0       	rjmp	.+2      	; 0x162c <ActivateDamper+0x7c>
	}
	else
	{
		DEMUX_C_OFF;
    162a:	29 98       	cbi	0x05, 1	; 5
	}
	if(B==1)
    162c:	11 30       	cpi	r17, 0x01	; 1
    162e:	11 f4       	brne	.+4      	; 0x1634 <ActivateDamper+0x84>
	{
		DEMUX_B_ON;
    1630:	28 9a       	sbi	0x05, 0	; 5
    1632:	01 c0       	rjmp	.+2      	; 0x1636 <ActivateDamper+0x86>
	}
	else
	{
		DEMUX_B_OFF;
    1634:	28 98       	cbi	0x05, 0	; 5
	}
	if(A==1)
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	e8 16       	cp	r14, r24
    163a:	11 f4       	brne	.+4      	; 0x1640 <ActivateDamper+0x90>
	{
		DEMUX_A_ON;
    163c:	77 9a       	sbi	0x0e, 7	; 14
    163e:	01 c0       	rjmp	.+2      	; 0x1642 <ActivateDamper+0x92>
	}
	else
	{
		DEMUX_A_OFF;
    1640:	77 98       	cbi	0x0e, 7	; 14
	}
}
    1642:	0f 90       	pop	r0
    1644:	0f 90       	pop	r0
    1646:	0f 90       	pop	r0
    1648:	0f 90       	pop	r0
    164a:	cf 91       	pop	r28
    164c:	df 91       	pop	r29
    164e:	1f 91       	pop	r17
    1650:	0f 91       	pop	r16
    1652:	ff 90       	pop	r15
    1654:	ef 90       	pop	r14
    1656:	08 95       	ret

00001658 <CheckDamper>:
*/
uint8_t CheckDamper(uint8_t damper)
{
	//Go through each damper and check if the input on the Bus is high or low.
	//double make sure it is good.
	ActivateDamper(damper);
    1658:	ab df       	rcall	.-170    	; 0x15b0 <ActivateDamper>
	
	// check if it is in the middle
	for(int i; i < 10000; i++);// wait for signal propagation 0.5 seconds is
	// enough
	// it is in the middle of turning
	if(ISBUTTONOPENBUSHIGH & ISBUTTONCLOSEBUSHIGH)
    165a:	89 b1       	in	r24, 0x09	; 9
    165c:	89 b1       	in	r24, 0x09	; 9
		{
			send_str(PSTR("Both inputs are HIGH\r\n"));
		}	
		return 2;
	}
	else if(!ISBUTTONOPENBUSHIGH & ISBUTTONCLOSEBUSHIGH)
    165e:	89 b1       	in	r24, 0x09	; 9
    1660:	99 b1       	in	r25, 0x09	; 9
    1662:	81 fd       	sbrc	r24, 1
    1664:	0b c0       	rjmp	.+22     	; 0x167c <CheckDamper+0x24>
    1666:	90 ff       	sbrs	r25, 0
    1668:	09 c0       	rjmp	.+18     	; 0x167c <CheckDamper+0x24>
	{
		if(DamperVerbose)
    166a:	80 91 08 01 	lds	r24, 0x0108
    166e:	88 23       	and	r24, r24
    1670:	79 f0       	breq	.+30     	; 0x1690 <CheckDamper+0x38>
		{
			send_str(PSTR("OPENBUS is LOW and CLOSE Button is HIGH\r\n"));
    1672:	84 e1       	ldi	r24, 0x14	; 20
    1674:	97 e0       	ldi	r25, 0x07	; 7
    1676:	5d d9       	rcall	.-3398   	; 0x932 <send_str>
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	08 95       	ret
		return 0;
	}
	else 
	{
	
		if(DamperVerbose)
    167c:	80 91 08 01 	lds	r24, 0x0108
    1680:	88 23       	and	r24, r24
    1682:	11 f4       	brne	.+4      	; 0x1688 <CheckDamper+0x30>
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	08 95       	ret
		{
			send_str(PSTR("CloseButton is Low and Open Button is HIGH\r\n"));
    1688:	87 ee       	ldi	r24, 0xE7	; 231
    168a:	96 e0       	ldi	r25, 0x06	; 6
    168c:	52 d9       	rcall	.-3420   	; 0x932 <send_str>
    168e:	81 e0       	ldi	r24, 0x01	; 1
		}	
		return 1;
	}
}
    1690:	08 95       	ret

00001692 <CloseDamper>:
}
/**
*	Closes the damper shut.
*/
void CloseDamper( uint8_t damper)
{
    1692:	ef 92       	push	r14
    1694:	ff 92       	push	r15
    1696:	0f 93       	push	r16
    1698:	1f 93       	push	r17
    169a:	cf 93       	push	r28
    169c:	df 93       	push	r29
    169e:	18 2f       	mov	r17, r24
	if(DamperVerbose)
    16a0:	80 91 08 01 	lds	r24, 0x0108
    16a4:	88 23       	and	r24, r24
    16a6:	51 f0       	breq	.+20     	; 0x16bc <CloseDamper+0x2a>
	{
		send_str(PSTR("\r\nDamper: "));
    16a8:	89 e8       	ldi	r24, 0x89	; 137
    16aa:	97 e0       	ldi	r25, 0x07	; 7
    16ac:	42 d9       	rcall	.-3452   	; 0x932 <send_str>
		usb_serial_putchar((damper + '0'));
    16ae:	81 2f       	mov	r24, r17
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	c0 96       	adiw	r24, 0x30	; 48
    16b4:	0c dc       	rcall	.-2024   	; 0xece <usb_serial_putchar>
		send_str(PSTR("\r\nEnter CloseDamper Section \r\n"));
    16b6:	8a e6       	ldi	r24, 0x6A	; 106
    16b8:	97 e0       	ldi	r25, 0x07	; 7
    16ba:	3b d9       	rcall	.-3466   	; 0x932 <send_str>
	}
	
	ActivateDamper(damper);
    16bc:	81 2f       	mov	r24, r17
    16be:	78 df       	rcall	.-272    	; 0x15b0 <ActivateDamper>
    16c0:	88 e8       	ldi	r24, 0x88	; 136
    16c2:	93 e1       	ldi	r25, 0x13	; 19
    16c4:	20 e9       	ldi	r18, 0x90	; 144
    16c6:	31 e0       	ldi	r19, 0x01	; 1
    16c8:	f9 01       	movw	r30, r18
    16ca:	31 97       	sbiw	r30, 0x01	; 1
    16cc:	f1 f7       	brne	.-4      	; 0x16ca <CloseDamper+0x38>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ce:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16d0:	d9 f7       	brne	.-10     	; 0x16c8 <CloseDamper+0x36>
	
	_delay_ms(500);
	
	//step the device close
	uint8_t DamperStatus = CheckDamper(damper);
    16d2:	81 2f       	mov	r24, r17
    16d4:	c1 df       	rcall	.-126    	; 0x1658 <CheckDamper>
	// if already close, return
	if(DamperStatus == 1)
    16d6:	81 30       	cpi	r24, 0x01	; 1
    16d8:	99 f1       	breq	.+102    	; 0x1740 <CloseDamper+0xae>
	{
		return;
	}
	unsigned int timeout = 0; // make sure the motor doesn't spin 
	MotorDirection1LOW;// go in opposite direction
    16da:	2e 98       	cbi	0x05, 6	; 5
    16dc:	c0 e0       	ldi	r28, 0x00	; 0
    16de:	d0 e0       	ldi	r29, 0x00	; 0
    16e0:	80 e9       	ldi	r24, 0x90	; 144
    16e2:	e8 2e       	mov	r14, r24
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	f8 2e       	mov	r15, r24
	//MotorDirection2HIGH;
	// set a timeout to 5 seconds
	while(DamperStatus != 1 || timeout == 50)
	{
		// step a lot
		MotorStepHIGH;
    16e8:	2c 9a       	sbi	0x05, 4	; 5
		DamperStatus = CheckDamper(damper);
    16ea:	81 2f       	mov	r24, r17
    16ec:	b5 df       	rcall	.-150    	; 0x1658 <CheckDamper>
    16ee:	08 2f       	mov	r16, r24
    16f0:	88 ee       	ldi	r24, 0xE8	; 232
    16f2:	93 e0       	ldi	r25, 0x03	; 3
    16f4:	f7 01       	movw	r30, r14
    16f6:	31 97       	sbiw	r30, 0x01	; 1
    16f8:	f1 f7       	brne	.-4      	; 0x16f6 <CloseDamper+0x64>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16fa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16fc:	d9 f7       	brne	.-10     	; 0x16f4 <CloseDamper+0x62>
		_delay_ms(100);
		MotorStepLOW;
    16fe:	2c 98       	cbi	0x05, 4	; 5
		timeout++;
    1700:	21 96       	adiw	r28, 0x01	; 1
		if(DamperVerbose)
    1702:	80 91 08 01 	lds	r24, 0x0108
    1706:	88 23       	and	r24, r24
    1708:	61 f0       	breq	.+24     	; 0x1722 <CloseDamper+0x90>
		{
			send_str(PSTR("ModTimer: "));
    170a:	8f e5       	ldi	r24, 0x5F	; 95
    170c:	97 e0       	ldi	r25, 0x07	; 7
    170e:	11 d9       	rcall	.-3550   	; 0x932 <send_str>
			usb_serial_putchar((timeout / '0'));
    1710:	ce 01       	movw	r24, r28
    1712:	60 e3       	ldi	r22, 0x30	; 48
    1714:	70 e0       	ldi	r23, 0x00	; 0
    1716:	31 d5       	rcall	.+2658   	; 0x217a <__udivmodhi4>
    1718:	cb 01       	movw	r24, r22
    171a:	d9 db       	rcall	.-2126   	; 0xece <usb_serial_putchar>
			send_str(PSTR("\r\n"));
    171c:	8c e5       	ldi	r24, 0x5C	; 92
    171e:	97 e0       	ldi	r25, 0x07	; 7
    1720:	08 d9       	rcall	.-3568   	; 0x932 <send_str>
	}
	unsigned int timeout = 0; // make sure the motor doesn't spin 
	MotorDirection1LOW;// go in opposite direction
	//MotorDirection2HIGH;
	// set a timeout to 5 seconds
	while(DamperStatus != 1 || timeout == 50)
    1722:	01 30       	cpi	r16, 0x01	; 1
    1724:	09 f7       	brne	.-62     	; 0x16e8 <CloseDamper+0x56>
    1726:	c2 33       	cpi	r28, 0x32	; 50
    1728:	d1 05       	cpc	r29, r1
    172a:	f1 f2       	breq	.-68     	; 0x16e8 <CloseDamper+0x56>
			usb_serial_putchar((timeout / '0'));
			send_str(PSTR("\r\n"));
		}	
			
	}
	if(timeout == 10000)
    172c:	c0 51       	subi	r28, 0x10	; 16
    172e:	d7 42       	sbci	r29, 0x27	; 39
    1730:	39 f4       	brne	.+14     	; 0x1740 <CloseDamper+0xae>
	{
		// report error to main Could be the wrong board that
		// we are trying to access.
		if(DamperVerbose)
    1732:	80 91 08 01 	lds	r24, 0x0108
    1736:	88 23       	and	r24, r24
    1738:	19 f0       	breq	.+6      	; 0x1740 <CloseDamper+0xae>
		{
			send_str(PSTR(" Damper Close Error:TIMEOUT\r\n"));
    173a:	8e e3       	ldi	r24, 0x3E	; 62
    173c:	97 e0       	ldi	r25, 0x07	; 7
    173e:	f9 d8       	rcall	.-3598   	; 0x932 <send_str>
		}
	}
	
}
    1740:	df 91       	pop	r29
    1742:	cf 91       	pop	r28
    1744:	1f 91       	pop	r17
    1746:	0f 91       	pop	r16
    1748:	ff 90       	pop	r15
    174a:	ef 90       	pop	r14
    174c:	08 95       	ret

0000174e <OpenDamper>:
*	this activates the correct damper
* 	Then while checking the Damper's status
*	runs the stepper motor.
*/
void OpenDamper( uint8_t damper)
{
    174e:	ef 92       	push	r14
    1750:	ff 92       	push	r15
    1752:	1f 93       	push	r17
    1754:	cf 93       	push	r28
    1756:	df 93       	push	r29
    1758:	18 2f       	mov	r17, r24
	if(DamperVerbose)
    175a:	80 91 08 01 	lds	r24, 0x0108
    175e:	88 23       	and	r24, r24
    1760:	51 f0       	breq	.+20     	; 0x1776 <OpenDamper+0x28>
	{
		
		send_str(PSTR("\r\nDamper: "));
    1762:	82 eb       	ldi	r24, 0xB2	; 178
    1764:	97 e0       	ldi	r25, 0x07	; 7
    1766:	e5 d8       	rcall	.-3638   	; 0x932 <send_str>
		usb_serial_putchar((damper + '0'));
    1768:	81 2f       	mov	r24, r17
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	c0 96       	adiw	r24, 0x30	; 48
    176e:	af db       	rcall	.-2210   	; 0xece <usb_serial_putchar>
		send_str(PSTR("\r\nEnter OpenDamper Section \r\n"));
    1770:	84 e9       	ldi	r24, 0x94	; 148
    1772:	97 e0       	ldi	r25, 0x07	; 7
    1774:	de d8       	rcall	.-3652   	; 0x932 <send_str>
	}
	//set the Damper Demux correctly
	ActivateDamper(damper);
    1776:	81 2f       	mov	r24, r17
    1778:	1b df       	rcall	.-458    	; 0x15b0 <ActivateDamper>
    177a:	88 ee       	ldi	r24, 0xE8	; 232
    177c:	93 e0       	ldi	r25, 0x03	; 3
    177e:	20 e9       	ldi	r18, 0x90	; 144
    1780:	31 e0       	ldi	r19, 0x01	; 1
    1782:	f9 01       	movw	r30, r18
    1784:	31 97       	sbiw	r30, 0x01	; 1
    1786:	f1 f7       	brne	.-4      	; 0x1784 <OpenDamper+0x36>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1788:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    178a:	d9 f7       	brne	.-10     	; 0x1782 <OpenDamper+0x34>
//	for(int i; i < 10000; i++);// wait for signal propagation 0.5 seconds is
	_delay_ms(100);
	//step the device open
	uint8_t DamperStatus = CheckDamper(damper);
    178c:	81 2f       	mov	r24, r17
    178e:	64 df       	rcall	.-312    	; 0x1658 <CheckDamper>
	// if already open, return
	if(DamperStatus == 0)
    1790:	88 23       	and	r24, r24
    1792:	c9 f0       	breq	.+50     	; 0x17c6 <OpenDamper+0x78>
	{
		return;
	}
	// if not run the motor
	MotorDirection1HIGH;
    1794:	2e 9a       	sbi	0x05, 6	; 5
    1796:	c0 e0       	ldi	r28, 0x00	; 0
    1798:	d0 e0       	ldi	r29, 0x00	; 0
    179a:	90 e9       	ldi	r25, 0x90	; 144
    179c:	e9 2e       	mov	r14, r25
    179e:	91 e0       	ldi	r25, 0x01	; 1
    17a0:	f9 2e       	mov	r15, r25
	unsigned int timeout = 0; // make sure the motor doesn't spin forever
	// timeout is 5 seconds is 100ms * 50 = 5 seconds
	while(DamperStatus != 0 || timeout > 50)
	{
		// step a lot// need a pause
		MotorStepHIGH;
    17a2:	2c 9a       	sbi	0x05, 4	; 5
		DamperStatus = CheckDamper(damper);
    17a4:	81 2f       	mov	r24, r17
    17a6:	58 df       	rcall	.-336    	; 0x1658 <CheckDamper>
    17a8:	28 ee       	ldi	r18, 0xE8	; 232
    17aa:	33 e0       	ldi	r19, 0x03	; 3
    17ac:	f7 01       	movw	r30, r14
    17ae:	31 97       	sbiw	r30, 0x01	; 1
    17b0:	f1 f7       	brne	.-4      	; 0x17ae <OpenDamper+0x60>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17b2:	21 50       	subi	r18, 0x01	; 1
    17b4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17b6:	d1 f7       	brne	.-12     	; 0x17ac <OpenDamper+0x5e>
		// add ~500 milisec plenty of time for stepper motor not to crush everything 
		_delay_ms(100);
		
		MotorStepLOW;
    17b8:	2c 98       	cbi	0x05, 4	; 5
		timeout++;
    17ba:	21 96       	adiw	r28, 0x01	; 1
	MotorDirection1HIGH;
//	MotorDirection2LOW; // current setting for A4988
	// set a timeout
	unsigned int timeout = 0; // make sure the motor doesn't spin forever
	// timeout is 5 seconds is 100ms * 50 = 5 seconds
	while(DamperStatus != 0 || timeout > 50)
    17bc:	88 23       	and	r24, r24
    17be:	89 f7       	brne	.-30     	; 0x17a2 <OpenDamper+0x54>
    17c0:	c3 33       	cpi	r28, 0x33	; 51
    17c2:	d1 05       	cpc	r29, r1
    17c4:	70 f7       	brcc	.-36     	; 0x17a2 <OpenDamper+0x54>
			send_str(PSTR(" Damper Open Error:TIMEOUT\r\n"));
		}
	}
	
	
}
    17c6:	df 91       	pop	r29
    17c8:	cf 91       	pop	r28
    17ca:	1f 91       	pop	r17
    17cc:	ff 90       	pop	r15
    17ce:	ef 90       	pop	r14
    17d0:	08 95       	ret

000017d2 <ReadADC>:
{
	//simple read on the adc analog pin.
	
	uint8_t low;

	ADCSRA = (1<<ADEN) | ADC_PRESCALER;		// enable ADC
    17d2:	96 e8       	ldi	r25, 0x86	; 134
    17d4:	90 93 7a 00 	sts	0x007A, r25
	ADCSRB = (1<<ADHSM) | (pin & 0x20);		// high speed mode
    17d8:	98 2f       	mov	r25, r24
    17da:	90 72       	andi	r25, 0x20	; 32
    17dc:	90 68       	ori	r25, 0x80	; 128
    17de:	90 93 7b 00 	sts	0x007B, r25
	ADMUX = aref | (pin & 0x1F);			// configure mux input
    17e2:	8f 71       	andi	r24, 0x1F	; 31
    17e4:	80 64       	ori	r24, 0x40	; 64
    17e6:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADEN) | ADC_PRESCALER | (1<<ADSC);	// start the conversion
    17ea:	86 ec       	ldi	r24, 0xC6	; 198
    17ec:	80 93 7a 00 	sts	0x007A, r24
	while (ADCSRA & (1<<ADSC)) ;			// wait for result
    17f0:	80 91 7a 00 	lds	r24, 0x007A
    17f4:	86 fd       	sbrc	r24, 6
    17f6:	fc cf       	rjmp	.-8      	; 0x17f0 <ReadADC+0x1e>
	low = ADCL;					// must read LSB first
    17f8:	20 91 78 00 	lds	r18, 0x0078
	return ((ADCH << 8) | low);			// must read MSB only once!
    17fc:	40 91 79 00 	lds	r20, 0x0079
    1800:	94 2f       	mov	r25, r20
    1802:	80 e0       	ldi	r24, 0x00	; 0
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	28 2b       	or	r18, r24
    1808:	39 2b       	or	r19, r25
    180a:	c9 01       	movw	r24, r18
    180c:	08 95       	ret

0000180e <ReadTempSensor>:
*	32 to 63 for board 2(if connected)
* 	if not connected returns max or min(currently unknown)
* Sensor Number must be 2 digits long
*/
uint16_t ReadTempSensor(char * SensorNumber)
{
    180e:	fc 01       	movw	r30, r24
		if(SensorNumber[0] == '0')//sensors 0 through 9
    1810:	80 81       	ld	r24, Z
    1812:	80 33       	cpi	r24, 0x30	; 48
    1814:	a9 f5       	brne	.+106    	; 0x1880 <ReadTempSensor+0x72>
		{
			if(SensorNumber[1] == '0')
    1816:	81 81       	ldd	r24, Z+1	; 0x01
    1818:	80 33       	cpi	r24, 0x30	; 48
    181a:	11 f4       	brne	.+4      	; 0x1820 <ReadTempSensor+0x12>
				//case 1 read adc 
				// set A = 0
				// set B = 0
				// set C = 0
				// Read PF0(pin 33)
				DEMUX_A_OFF;
    181c:	77 98       	cbi	0x0e, 7	; 14
    181e:	03 c0       	rjmp	.+6      	; 0x1826 <ReadTempSensor+0x18>
				DEMUX_B_OFF;
				DEMUX_C_OFF;
				return ReadADC(0);
			}
			else if(SensorNumber[1] == '1')
    1820:	81 33       	cpi	r24, 0x31	; 49
    1822:	39 f4       	brne	.+14     	; 0x1832 <ReadTempSensor+0x24>
				//case 2 read adc 
				// set A = 1
				// set B = 0
				// set C = 0
				// Read PF0(pin 33)
				DEMUX_A_ON;
    1824:	77 9a       	sbi	0x0e, 7	; 14
				DEMUX_B_OFF;
    1826:	28 98       	cbi	0x05, 0	; 5
				DEMUX_C_OFF;
    1828:	29 98       	cbi	0x05, 1	; 5
				return ReadADC(0);
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	d2 df       	rcall	.-92     	; 0x17d2 <ReadADC>
    182e:	9c 01       	movw	r18, r24
    1830:	4a c1       	rjmp	.+660    	; 0x1ac6 <ReadTempSensor+0x2b8>
			}
			else if(SensorNumber[1] == '2')
    1832:	82 33       	cpi	r24, 0x32	; 50
    1834:	11 f4       	brne	.+4      	; 0x183a <ReadTempSensor+0x2c>
				//case 3 read adc 
				// set A = 0
				// set B = 1
				// set C = 0
				// Read PF0(pin 33)
				DEMUX_A_OFF;
    1836:	77 98       	cbi	0x0e, 7	; 14
    1838:	03 c0       	rjmp	.+6      	; 0x1840 <ReadTempSensor+0x32>
				DEMUX_B_ON;
				DEMUX_C_OFF;
				return ReadADC(0);
			}
			else if(SensorNumber[1] == '3')
    183a:	83 33       	cpi	r24, 0x33	; 51
    183c:	19 f4       	brne	.+6      	; 0x1844 <ReadTempSensor+0x36>
				//case 3 read adc 
				// set A = 1
				// set B = 1
				// set C = 0
				// Read PF0(pin 33)
				DEMUX_A_ON;
    183e:	77 9a       	sbi	0x0e, 7	; 14
				DEMUX_B_ON;
    1840:	28 9a       	sbi	0x05, 0	; 5
    1842:	f2 cf       	rjmp	.-28     	; 0x1828 <ReadTempSensor+0x1a>
				DEMUX_C_OFF;
				return ReadADC(0);
			}
			else if(SensorNumber[1] == '4')
    1844:	84 33       	cpi	r24, 0x34	; 52
    1846:	11 f4       	brne	.+4      	; 0x184c <ReadTempSensor+0x3e>
				//case 4 read adc 
				// set A = 0
				// set B = 0
				// set C = 1
				// Read PF0(pin 33)
				DEMUX_A_OFF;
    1848:	77 98       	cbi	0x0e, 7	; 14
    184a:	03 c0       	rjmp	.+6      	; 0x1852 <ReadTempSensor+0x44>
				DEMUX_B_OFF;
				DEMUX_C_ON;
				return ReadADC(0);
			}
			else if(SensorNumber[1] == '5')
    184c:	85 33       	cpi	r24, 0x35	; 53
    184e:	21 f4       	brne	.+8      	; 0x1858 <ReadTempSensor+0x4a>
				//case 5 read adc 
				// set A = 1
				// set B = 0
				// set C = 1
				// Read PF0(pin 33)
				DEMUX_A_ON;
    1850:	77 9a       	sbi	0x0e, 7	; 14
				DEMUX_B_OFF;
    1852:	28 98       	cbi	0x05, 0	; 5
				DEMUX_C_ON;
    1854:	29 9a       	sbi	0x05, 1	; 5
    1856:	e9 cf       	rjmp	.-46     	; 0x182a <ReadTempSensor+0x1c>
				return ReadADC(0);
			}
			else if(SensorNumber[1] == '6')
    1858:	86 33       	cpi	r24, 0x36	; 54
    185a:	11 f4       	brne	.+4      	; 0x1860 <ReadTempSensor+0x52>
				//case 6 read adc 
				// set A = 0
				// set B = 1
				// set C = 1
				// Read PF0(pin 33)
				DEMUX_A_OFF;
    185c:	77 98       	cbi	0x0e, 7	; 14
    185e:	03 c0       	rjmp	.+6      	; 0x1866 <ReadTempSensor+0x58>
				DEMUX_B_ON;
				DEMUX_C_ON;
				return ReadADC(0);
			}
			else if(SensorNumber[1] == '7')
    1860:	87 33       	cpi	r24, 0x37	; 55
    1862:	19 f4       	brne	.+6      	; 0x186a <ReadTempSensor+0x5c>
				//case 7 read adc 
				// set A = 1
				// set B = 1
				// set C = 1
				// Read PF0(pin 33)
				DEMUX_A_ON;
    1864:	77 9a       	sbi	0x0e, 7	; 14
				DEMUX_B_ON;
    1866:	28 9a       	sbi	0x05, 0	; 5
    1868:	f5 cf       	rjmp	.-22     	; 0x1854 <ReadTempSensor+0x46>
				DEMUX_C_ON;
				return ReadADC(0);
			}
			else if(SensorNumber[1] == '8')
    186a:	88 33       	cpi	r24, 0x38	; 56
    186c:	11 f4       	brne	.+4      	; 0x1872 <ReadTempSensor+0x64>
				//case 8 read adc 
				// set A = 0
				// set B = 0
				// set C = 0
				// Read PF0(pin 33)
				DEMUX_A_OFF;
    186e:	77 98       	cbi	0x0e, 7	; 14
    1870:	04 c0       	rjmp	.+8      	; 0x187a <ReadTempSensor+0x6c>
				DEMUX_B_OFF;
				DEMUX_C_OFF;
				return ReadADC(1);
			}
			else if(SensorNumber[1] == '9')
    1872:	89 33       	cpi	r24, 0x39	; 57
    1874:	09 f0       	breq	.+2      	; 0x1878 <ReadTempSensor+0x6a>
    1876:	21 c1       	rjmp	.+578    	; 0x1aba <ReadTempSensor+0x2ac>
				//case 9 read adc 
				// set A = 1
				// set B = 0
				// set C = 0
				// Read PF0(pin 33)
				DEMUX_A_ON;
    1878:	77 9a       	sbi	0x0e, 7	; 14
				DEMUX_B_OFF;
    187a:	28 98       	cbi	0x05, 0	; 5
				DEMUX_C_OFF;
    187c:	29 98       	cbi	0x05, 1	; 5
    187e:	1e c0       	rjmp	.+60     	; 0x18bc <ReadTempSensor+0xae>
				return ReadADC(1);
			}
		}		
		else if(SensorNumber[0] == '1')//sensors 10 through 19
    1880:	81 33       	cpi	r24, 0x31	; 49
    1882:	91 f5       	brne	.+100    	; 0x18e8 <ReadTempSensor+0xda>
		{
			if(SensorNumber[1] == '0')
    1884:	81 81       	ldd	r24, Z+1	; 0x01
    1886:	80 33       	cpi	r24, 0x30	; 48
    1888:	11 f4       	brne	.+4      	; 0x188e <ReadTempSensor+0x80>
				//case 10 read adc 
				// set A = 0
				// set B = 1
				// set C = 0
				// Read PF1(pin 34)
				DEMUX_A_OFF;
    188a:	77 98       	cbi	0x0e, 7	; 14
    188c:	03 c0       	rjmp	.+6      	; 0x1894 <ReadTempSensor+0x86>
				DEMUX_B_ON;
				DEMUX_C_OFF;
				return ReadADC(1);
			}
			else if(SensorNumber[1] == '1')
    188e:	81 33       	cpi	r24, 0x31	; 49
    1890:	19 f4       	brne	.+6      	; 0x1898 <ReadTempSensor+0x8a>
				//case 11 read adc 
				// set A = 1
				// set B = 1
				// set C = 0
				// Read PF1(pin 34)
				DEMUX_A_ON;
    1892:	77 9a       	sbi	0x0e, 7	; 14
				DEMUX_B_ON;
    1894:	28 9a       	sbi	0x05, 0	; 5
    1896:	f2 cf       	rjmp	.-28     	; 0x187c <ReadTempSensor+0x6e>
				DEMUX_C_OFF;
				return ReadADC(1);
			}
			else if(SensorNumber[1] == '2')
    1898:	82 33       	cpi	r24, 0x32	; 50
    189a:	11 f4       	brne	.+4      	; 0x18a0 <ReadTempSensor+0x92>
				//case 12 read adc 
				// set A = 0
				// set B = 0
				// set C = 1
				// Read PF1(pin 34)
				DEMUX_A_OFF;
    189c:	77 98       	cbi	0x0e, 7	; 14
    189e:	03 c0       	rjmp	.+6      	; 0x18a6 <ReadTempSensor+0x98>
				DEMUX_B_OFF;
				DEMUX_C_ON;
				return ReadADC(1);
			}
			else if(SensorNumber[1] == '3')
    18a0:	83 33       	cpi	r24, 0x33	; 51
    18a2:	19 f4       	brne	.+6      	; 0x18aa <ReadTempSensor+0x9c>
				//case 13 read adc 
				// set A = 1
				// set B = 0
				// set C = 1
				// Read PF1(pin 34)
				DEMUX_A_ON;
    18a4:	77 9a       	sbi	0x0e, 7	; 14
				DEMUX_B_OFF;
    18a6:	28 98       	cbi	0x05, 0	; 5
    18a8:	08 c0       	rjmp	.+16     	; 0x18ba <ReadTempSensor+0xac>
				DEMUX_C_ON;
				return ReadADC(1);
			}
			else if(SensorNumber[1] == '4')
    18aa:	84 33       	cpi	r24, 0x34	; 52
    18ac:	11 f4       	brne	.+4      	; 0x18b2 <ReadTempSensor+0xa4>
				//case 14 read adc 
				// set A = 0
				// set B = 1
				// set C = 1
				// Read PF1(pin 34)
				DEMUX_A_OFF;
    18ae:	77 98       	cbi	0x0e, 7	; 14
    18b0:	03 c0       	rjmp	.+6      	; 0x18b8 <ReadTempSensor+0xaa>
				DEMUX_B_ON;
				DEMUX_C_ON;
				return ReadADC(1);
			}
			else if(SensorNumber[1] == '5')
    18b2:	85 33       	cpi	r24, 0x35	; 53
    18b4:	29 f4       	brne	.+10     	; 0x18c0 <ReadTempSensor+0xb2>
				//case 15 read adc 
				// set A = 1
				// set B = 1
				// set C = 1
				// Read PF1(pin 34)
				DEMUX_A_ON;
    18b6:	77 9a       	sbi	0x0e, 7	; 14
				DEMUX_B_ON;
    18b8:	28 9a       	sbi	0x05, 0	; 5
				DEMUX_C_ON;
    18ba:	29 9a       	sbi	0x05, 1	; 5
				return ReadADC(1);
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	b6 cf       	rjmp	.-148    	; 0x182c <ReadTempSensor+0x1e>
			}
			else if(SensorNumber[1] == '6')
    18c0:	86 33       	cpi	r24, 0x36	; 54
    18c2:	11 f4       	brne	.+4      	; 0x18c8 <ReadTempSensor+0xba>
				//case 16 read adc 
				// set A = 0
				// set B = 0
				// set C = 0
				// Read PF2(pin 35)
				DEMUX_A_OFF;
    18c4:	77 98       	cbi	0x0e, 7	; 14
    18c6:	03 c0       	rjmp	.+6      	; 0x18ce <ReadTempSensor+0xc0>
				DEMUX_B_OFF;
				DEMUX_C_OFF;
				return ReadADC(2);
			}
			else if(SensorNumber[1] == '7')
    18c8:	87 33       	cpi	r24, 0x37	; 55
    18ca:	21 f4       	brne	.+8      	; 0x18d4 <ReadTempSensor+0xc6>
				//case 17 read adc 
				// set A = 1
				// set B = 0
				// set C = 0
				// Read PF2(pin 35)
				DEMUX_A_ON;
    18cc:	77 9a       	sbi	0x0e, 7	; 14
				DEMUX_B_OFF;
    18ce:	28 98       	cbi	0x05, 0	; 5
				DEMUX_C_OFF;
    18d0:	29 98       	cbi	0x05, 1	; 5
    18d2:	1f c0       	rjmp	.+62     	; 0x1912 <ReadTempSensor+0x104>
				return ReadADC(2);
			}
			else if(SensorNumber[1] == '8')
    18d4:	88 33       	cpi	r24, 0x38	; 56
    18d6:	11 f4       	brne	.+4      	; 0x18dc <ReadTempSensor+0xce>
				//case 18 read adc 
				// set A = 0
				// set B = 1
				// set C = 0
				// Read PF2(pin 35)
				DEMUX_A_OFF;
    18d8:	77 98       	cbi	0x0e, 7	; 14
    18da:	04 c0       	rjmp	.+8      	; 0x18e4 <ReadTempSensor+0xd6>
				DEMUX_B_ON;
				DEMUX_C_OFF;
				return ReadADC(2);
			}
			else if(SensorNumber[1] == '9')
    18dc:	89 33       	cpi	r24, 0x39	; 57
    18de:	09 f0       	breq	.+2      	; 0x18e2 <ReadTempSensor+0xd4>
    18e0:	ec c0       	rjmp	.+472    	; 0x1aba <ReadTempSensor+0x2ac>
				//case 19 read adc 
				// set A = 1
				// set B = 1
				// set C = 0
				// Read PF2(pin 35)
				DEMUX_A_ON;
    18e2:	77 9a       	sbi	0x0e, 7	; 14
				DEMUX_B_ON;
    18e4:	28 9a       	sbi	0x05, 0	; 5
    18e6:	f4 cf       	rjmp	.-24     	; 0x18d0 <ReadTempSensor+0xc2>
				DEMUX_C_OFF;
				return ReadADC(2);
			}
		}		
		else if(SensorNumber[0] == '2')//sensors 20 through 29
    18e8:	82 33       	cpi	r24, 0x32	; 50
    18ea:	91 f5       	brne	.+100    	; 0x1950 <ReadTempSensor+0x142>
		{
			if(SensorNumber[1] == '0')
    18ec:	81 81       	ldd	r24, Z+1	; 0x01
    18ee:	80 33       	cpi	r24, 0x30	; 48
    18f0:	11 f4       	brne	.+4      	; 0x18f6 <ReadTempSensor+0xe8>
				//case 20 read adc 
				// set A = 0
				// set B = 0
				// set C = 1
				// Read PF2(pin 35)
				DEMUX_A_OFF;
    18f2:	77 98       	cbi	0x0e, 7	; 14
    18f4:	03 c0       	rjmp	.+6      	; 0x18fc <ReadTempSensor+0xee>
				DEMUX_B_OFF;
				DEMUX_C_ON;
				return ReadADC(2);
			}
			else if(SensorNumber[1] == '1')
    18f6:	81 33       	cpi	r24, 0x31	; 49
    18f8:	19 f4       	brne	.+6      	; 0x1900 <ReadTempSensor+0xf2>
				//case 21 read adc 
				// set A = 1
				// set B = 0
				// set C = 1
				// Read PF2(pin 35)
				DEMUX_A_ON;
    18fa:	77 9a       	sbi	0x0e, 7	; 14
				DEMUX_B_OFF;
    18fc:	28 98       	cbi	0x05, 0	; 5
    18fe:	08 c0       	rjmp	.+16     	; 0x1910 <ReadTempSensor+0x102>
				DEMUX_C_ON;
				return ReadADC(2);
			}
			else if(SensorNumber[1] == '2')
    1900:	82 33       	cpi	r24, 0x32	; 50
    1902:	11 f4       	brne	.+4      	; 0x1908 <ReadTempSensor+0xfa>
				//case 22 read adc 
				// set A = 0
				// set B = 1
				// set C = 1
				// Read PF2(pin 35)
				DEMUX_A_OFF;
    1904:	77 98       	cbi	0x0e, 7	; 14
    1906:	03 c0       	rjmp	.+6      	; 0x190e <ReadTempSensor+0x100>
				DEMUX_B_ON;
				DEMUX_C_ON;
				return ReadADC(2);
			}
			else if(SensorNumber[1] == '3')
    1908:	83 33       	cpi	r24, 0x33	; 51
    190a:	29 f4       	brne	.+10     	; 0x1916 <ReadTempSensor+0x108>
				//case 23 read adc 
				// set A = 1
				// set B = 1
				// set C = 1
				// Read PF2(pin 35)
				DEMUX_A_ON;
    190c:	77 9a       	sbi	0x0e, 7	; 14
				DEMUX_B_ON;
    190e:	28 9a       	sbi	0x05, 0	; 5
				DEMUX_C_ON;
    1910:	29 9a       	sbi	0x05, 1	; 5
				return ReadADC(2);
    1912:	82 e0       	ldi	r24, 0x02	; 2
    1914:	8b cf       	rjmp	.-234    	; 0x182c <ReadTempSensor+0x1e>
			}
			else if(SensorNumber[1] == '4')
    1916:	84 33       	cpi	r24, 0x34	; 52
    1918:	11 f4       	brne	.+4      	; 0x191e <ReadTempSensor+0x110>
				//case 24 read adc 
				// set A = 0
				// set B = 0
				// set C = 0
				// Read PF3(pin 36)
				DEMUX_A_OFF;
    191a:	77 98       	cbi	0x0e, 7	; 14
    191c:	03 c0       	rjmp	.+6      	; 0x1924 <ReadTempSensor+0x116>
				DEMUX_B_OFF;
				DEMUX_C_OFF;
				return ReadADC(3);
			}
			else if(SensorNumber[1] == '5')
    191e:	85 33       	cpi	r24, 0x35	; 53
    1920:	21 f4       	brne	.+8      	; 0x192a <ReadTempSensor+0x11c>
				//case 25 read adc 
				// set A = 1
				// set B = 0
				// set C = 0
				// Read PF3(pin 36)
				DEMUX_A_ON;
    1922:	77 9a       	sbi	0x0e, 7	; 14
				DEMUX_B_OFF;
    1924:	28 98       	cbi	0x05, 0	; 5
				DEMUX_C_OFF;
    1926:	29 98       	cbi	0x05, 1	; 5
    1928:	1f c0       	rjmp	.+62     	; 0x1968 <ReadTempSensor+0x15a>
				return ReadADC(3);
			}
			else if(SensorNumber[1] == '6')
    192a:	86 33       	cpi	r24, 0x36	; 54
    192c:	11 f4       	brne	.+4      	; 0x1932 <ReadTempSensor+0x124>
				//case 26 read adc 
				// set A = 0
				// set B = 1
				// set C = 0
				// Read PF3(pin 36)
				DEMUX_A_OFF;
    192e:	77 98       	cbi	0x0e, 7	; 14
    1930:	03 c0       	rjmp	.+6      	; 0x1938 <ReadTempSensor+0x12a>
				DEMUX_B_ON;
				DEMUX_C_OFF;
				return ReadADC(3);
			}
			else if(SensorNumber[1] == '7')
    1932:	87 33       	cpi	r24, 0x37	; 55
    1934:	19 f4       	brne	.+6      	; 0x193c <ReadTempSensor+0x12e>
				//case 27 read adc 
				// set A = 1
				// set B = 1
				// set C = 0
				// Read PF3(pin 36)
				DEMUX_A_ON;
    1936:	77 9a       	sbi	0x0e, 7	; 14
				DEMUX_B_ON;
    1938:	28 9a       	sbi	0x05, 0	; 5
    193a:	f5 cf       	rjmp	.-22     	; 0x1926 <ReadTempSensor+0x118>
				DEMUX_C_OFF;
				return ReadADC(3);
			}
			else if(SensorNumber[1] == '8')
    193c:	88 33       	cpi	r24, 0x38	; 56
    193e:	11 f4       	brne	.+4      	; 0x1944 <ReadTempSensor+0x136>
				//case 28 read adc 
				// set A = 0
				// set B = 0
				// set C = 1
				// Read PF3(pin 36)
				DEMUX_A_OFF;
    1940:	77 98       	cbi	0x0e, 7	; 14
    1942:	04 c0       	rjmp	.+8      	; 0x194c <ReadTempSensor+0x13e>
				DEMUX_B_OFF;
				DEMUX_C_ON;
				return ReadADC(3);
			}
			else if(SensorNumber[1] == '9')
    1944:	89 33       	cpi	r24, 0x39	; 57
    1946:	09 f0       	breq	.+2      	; 0x194a <ReadTempSensor+0x13c>
    1948:	b8 c0       	rjmp	.+368    	; 0x1aba <ReadTempSensor+0x2ac>
				//case 29 read adc 
				// set A = 1
				// set B = 0
				// set C = 1
				// Read PF3(pin 36)
				DEMUX_A_ON;
    194a:	77 9a       	sbi	0x0e, 7	; 14
				DEMUX_B_OFF;
    194c:	28 98       	cbi	0x05, 0	; 5
    194e:	0b c0       	rjmp	.+22     	; 0x1966 <ReadTempSensor+0x158>
				DEMUX_C_ON;
				return ReadADC(3);
			}
		}		
		else if(SensorNumber[0] == '3')//sensors 30 through 39
    1950:	83 33       	cpi	r24, 0x33	; 51
    1952:	a1 f5       	brne	.+104    	; 0x19bc <ReadTempSensor+0x1ae>
		{
			if(SensorNumber[1] == '0')
    1954:	81 81       	ldd	r24, Z+1	; 0x01
    1956:	80 33       	cpi	r24, 0x30	; 48
    1958:	11 f4       	brne	.+4      	; 0x195e <ReadTempSensor+0x150>
				//case 30 read adc 
				// set A = 0
				// set B = 1
				// set C = 1
				// Read PF3(pin 36)
				DEMUX_A_OFF;
    195a:	77 98       	cbi	0x0e, 7	; 14
    195c:	03 c0       	rjmp	.+6      	; 0x1964 <ReadTempSensor+0x156>
				DEMUX_B_ON;
				DEMUX_C_ON;
				return ReadADC(3);
			}
			else if(SensorNumber[1] == '1')
    195e:	81 33       	cpi	r24, 0x31	; 49
    1960:	29 f4       	brne	.+10     	; 0x196c <ReadTempSensor+0x15e>
				//case 31 read adc 
				// set A = 1
				// set B = 1
				// set C = 1
				// Read PF3(pin 36)
				DEMUX_A_ON;
    1962:	77 9a       	sbi	0x0e, 7	; 14
				DEMUX_B_ON;
    1964:	28 9a       	sbi	0x05, 0	; 5
				DEMUX_C_ON;
    1966:	29 9a       	sbi	0x05, 1	; 5
				return ReadADC(3);
    1968:	83 e0       	ldi	r24, 0x03	; 3
    196a:	60 cf       	rjmp	.-320    	; 0x182c <ReadTempSensor+0x1e>
			}
			else if(SensorNumber[1] == '2')
    196c:	82 33       	cpi	r24, 0x32	; 50
    196e:	11 f4       	brne	.+4      	; 0x1974 <ReadTempSensor+0x166>
				//case 32 read adc 
				// set A = 0
				// set B = 0
				// set C = 0
				// Read PF4(pin 37)
				DEMUX_A_OFF;
    1970:	77 98       	cbi	0x0e, 7	; 14
    1972:	03 c0       	rjmp	.+6      	; 0x197a <ReadTempSensor+0x16c>
				DEMUX_B_OFF;
				DEMUX_C_OFF;
				return ReadADC(4);
			}
			else if(SensorNumber[1] == '3')
    1974:	83 33       	cpi	r24, 0x33	; 51
    1976:	21 f4       	brne	.+8      	; 0x1980 <ReadTempSensor+0x172>
				//case 33 read adc 
				// set A = 1
				// set B = 0
				// set C = 0
				// Read PF4(pin 37)
				DEMUX_A_ON;
    1978:	77 9a       	sbi	0x0e, 7	; 14
				DEMUX_B_OFF;
    197a:	28 98       	cbi	0x05, 0	; 5
				DEMUX_C_OFF;
    197c:	29 98       	cbi	0x05, 1	; 5
    197e:	1c c0       	rjmp	.+56     	; 0x19b8 <ReadTempSensor+0x1aa>
				return ReadADC(4);
			}
			else if(SensorNumber[1] == '4')
    1980:	84 33       	cpi	r24, 0x34	; 52
    1982:	11 f4       	brne	.+4      	; 0x1988 <ReadTempSensor+0x17a>
				//case 34 read adc 
				// set A = 0
				// set B = 1
				// set C = 0
				// Read PF4(pin 37)
				DEMUX_A_OFF;
    1984:	77 98       	cbi	0x0e, 7	; 14
    1986:	03 c0       	rjmp	.+6      	; 0x198e <ReadTempSensor+0x180>
				DEMUX_B_ON;
				DEMUX_C_OFF;
				return ReadADC(4);
			}
			else if(SensorNumber[1] == '5')
    1988:	85 33       	cpi	r24, 0x35	; 53
    198a:	19 f4       	brne	.+6      	; 0x1992 <ReadTempSensor+0x184>
				//case 35 read adc 
				// set A = 1
				// set B = 1
				// set C = 0
				// Read PF4(pin 37)
				DEMUX_A_ON;
    198c:	77 9a       	sbi	0x0e, 7	; 14
				DEMUX_B_ON;
    198e:	28 9a       	sbi	0x05, 0	; 5
    1990:	f5 cf       	rjmp	.-22     	; 0x197c <ReadTempSensor+0x16e>
				DEMUX_C_OFF;
				return ReadADC(4);
			}
			else if(SensorNumber[1] == '6')
    1992:	86 33       	cpi	r24, 0x36	; 54
    1994:	11 f4       	brne	.+4      	; 0x199a <ReadTempSensor+0x18c>
				//case 36 read adc 
				// set A = 0
				// set B = 0
				// set C = 1
				// Read PF4(pin 37)
				DEMUX_A_OFF;
    1996:	77 98       	cbi	0x0e, 7	; 14
    1998:	03 c0       	rjmp	.+6      	; 0x19a0 <ReadTempSensor+0x192>
				DEMUX_B_OFF;
				DEMUX_C_ON;
				return ReadADC(4);
			}
			else if(SensorNumber[1] == '7')
    199a:	87 33       	cpi	r24, 0x37	; 55
    199c:	19 f4       	brne	.+6      	; 0x19a4 <ReadTempSensor+0x196>
				//case 37 read adc 
				// set A = 1
				// set B = 0
				// set C = 1
				// Read PF4(pin 37)
				DEMUX_A_ON;
    199e:	77 9a       	sbi	0x0e, 7	; 14
				DEMUX_B_OFF;
    19a0:	28 98       	cbi	0x05, 0	; 5
    19a2:	09 c0       	rjmp	.+18     	; 0x19b6 <ReadTempSensor+0x1a8>
				DEMUX_C_ON;
				return ReadADC(4);
			}
			else if(SensorNumber[1] == '8')
    19a4:	88 33       	cpi	r24, 0x38	; 56
    19a6:	11 f4       	brne	.+4      	; 0x19ac <ReadTempSensor+0x19e>
				//case 38 read adc 
				// set A = 0
				// set B = 1
				// set C = 1
				// Read PF4(pin 37)
				DEMUX_A_OFF;
    19a8:	77 98       	cbi	0x0e, 7	; 14
    19aa:	04 c0       	rjmp	.+8      	; 0x19b4 <ReadTempSensor+0x1a6>
				DEMUX_B_ON;
				DEMUX_C_ON;
				return ReadADC(4);
			}
			else if(SensorNumber[1] == '9')
    19ac:	89 33       	cpi	r24, 0x39	; 57
    19ae:	09 f0       	breq	.+2      	; 0x19b2 <ReadTempSensor+0x1a4>
    19b0:	84 c0       	rjmp	.+264    	; 0x1aba <ReadTempSensor+0x2ac>
				//case 39 read adc 
				// set A = 1
				// set B = 1
				// set C = 1
				// Read PF4(pin 37)
				DEMUX_A_ON;
    19b2:	77 9a       	sbi	0x0e, 7	; 14
				DEMUX_B_ON;
    19b4:	28 9a       	sbi	0x05, 0	; 5
				DEMUX_C_ON;
    19b6:	29 9a       	sbi	0x05, 1	; 5
				return ReadADC(4);
    19b8:	84 e0       	ldi	r24, 0x04	; 4
    19ba:	38 cf       	rjmp	.-400    	; 0x182c <ReadTempSensor+0x1e>
			}
		}		
		else if(SensorNumber[0] == '4')//sensors 40 through 49
    19bc:	84 33       	cpi	r24, 0x34	; 52
    19be:	99 f5       	brne	.+102    	; 0x1a26 <ReadTempSensor+0x218>
		{
			if(SensorNumber[1] == '0')
    19c0:	81 81       	ldd	r24, Z+1	; 0x01
    19c2:	80 33       	cpi	r24, 0x30	; 48
    19c4:	11 f4       	brne	.+4      	; 0x19ca <ReadTempSensor+0x1bc>
				//case 40 read adc 
				// set A = 0
				// set B = 0
				// set C = 0
				// Read PF5(pin 38)
				DEMUX_A_OFF;
    19c6:	77 98       	cbi	0x0e, 7	; 14
    19c8:	03 c0       	rjmp	.+6      	; 0x19d0 <ReadTempSensor+0x1c2>
				DEMUX_B_OFF;
				DEMUX_C_OFF;
				return ReadADC(5);
			}
			else if(SensorNumber[1] == '1')
    19ca:	81 33       	cpi	r24, 0x31	; 49
    19cc:	21 f4       	brne	.+8      	; 0x19d6 <ReadTempSensor+0x1c8>
				//case 41 read adc 
				// set A = 1
				// set B = 0
				// set C = 0
				// Read PF5(pin 38)
				DEMUX_A_ON;
    19ce:	77 9a       	sbi	0x0e, 7	; 14
				DEMUX_B_OFF;
    19d0:	28 98       	cbi	0x05, 0	; 5
				DEMUX_C_OFF;
    19d2:	29 98       	cbi	0x05, 1	; 5
    19d4:	1b c0       	rjmp	.+54     	; 0x1a0c <ReadTempSensor+0x1fe>
				return ReadADC(5);
			}
			else if(SensorNumber[1] == '2')
    19d6:	82 33       	cpi	r24, 0x32	; 50
    19d8:	11 f4       	brne	.+4      	; 0x19de <ReadTempSensor+0x1d0>
				//case 42 read adc 
				// set A = 0
				// set B = 1
				// set C = 0
				// Read PF5(pin 38)
				DEMUX_A_OFF;
    19da:	77 98       	cbi	0x0e, 7	; 14
    19dc:	03 c0       	rjmp	.+6      	; 0x19e4 <ReadTempSensor+0x1d6>
				DEMUX_B_ON;
				DEMUX_C_OFF;
				return ReadADC(5);
			}
			else if(SensorNumber[1] == '3')
    19de:	83 33       	cpi	r24, 0x33	; 51
    19e0:	19 f4       	brne	.+6      	; 0x19e8 <ReadTempSensor+0x1da>
				//case 43 read adc 
				// set A = 1
				// set B = 1
				// set C = 0
				// Read PF5(pin 38)
				DEMUX_A_ON;
    19e2:	77 9a       	sbi	0x0e, 7	; 14
				DEMUX_B_ON;
    19e4:	28 9a       	sbi	0x05, 0	; 5
    19e6:	f5 cf       	rjmp	.-22     	; 0x19d2 <ReadTempSensor+0x1c4>
				DEMUX_C_OFF;
				return ReadADC(5);
			}
			else if(SensorNumber[1] == '4')
    19e8:	84 33       	cpi	r24, 0x34	; 52
    19ea:	11 f4       	brne	.+4      	; 0x19f0 <ReadTempSensor+0x1e2>
				//case 44 read adc 
				// set A = 0
				// set B = 0
				// set C = 1
				// Read PF5(pin 38)
				DEMUX_A_OFF;
    19ec:	77 98       	cbi	0x0e, 7	; 14
    19ee:	03 c0       	rjmp	.+6      	; 0x19f6 <ReadTempSensor+0x1e8>
				DEMUX_B_OFF;
				DEMUX_C_ON;
				return ReadADC(5);
			}
			else if(SensorNumber[1] == '5')
    19f0:	85 33       	cpi	r24, 0x35	; 53
    19f2:	19 f4       	brne	.+6      	; 0x19fa <ReadTempSensor+0x1ec>
				//case 45 read adc 
				// set A = 1
				// set B = 0
				// set C = 1
				// Read PF5(pin 38)
				DEMUX_A_ON;
    19f4:	77 9a       	sbi	0x0e, 7	; 14
				DEMUX_B_OFF;
    19f6:	28 98       	cbi	0x05, 0	; 5
    19f8:	08 c0       	rjmp	.+16     	; 0x1a0a <ReadTempSensor+0x1fc>
				DEMUX_C_ON;
				return ReadADC(5);
			}
			else if(SensorNumber[1] == '6')
    19fa:	86 33       	cpi	r24, 0x36	; 54
    19fc:	11 f4       	brne	.+4      	; 0x1a02 <ReadTempSensor+0x1f4>
				//case 46 read adc 
				// set A = 0
				// set B = 1
				// set C = 1
				// Read PF5(pin 38)
				DEMUX_A_OFF;
    19fe:	77 98       	cbi	0x0e, 7	; 14
    1a00:	03 c0       	rjmp	.+6      	; 0x1a08 <ReadTempSensor+0x1fa>
				DEMUX_B_ON;
				DEMUX_C_ON;
				return ReadADC(5);
			}
			else if(SensorNumber[1] == '7')
    1a02:	87 33       	cpi	r24, 0x37	; 55
    1a04:	29 f4       	brne	.+10     	; 0x1a10 <ReadTempSensor+0x202>
				//case 47 read adc 
				// set A = 1
				// set B = 1
				// set C = 1
				// Read PF5(pin 38)
				DEMUX_A_ON;
    1a06:	77 9a       	sbi	0x0e, 7	; 14
				DEMUX_B_ON;
    1a08:	28 9a       	sbi	0x05, 0	; 5
				DEMUX_C_ON;
    1a0a:	29 9a       	sbi	0x05, 1	; 5
				return ReadADC(5);
    1a0c:	85 e0       	ldi	r24, 0x05	; 5
    1a0e:	0e cf       	rjmp	.-484    	; 0x182c <ReadTempSensor+0x1e>
			}
			else if(SensorNumber[1] == '8')
    1a10:	88 33       	cpi	r24, 0x38	; 56
    1a12:	11 f4       	brne	.+4      	; 0x1a18 <ReadTempSensor+0x20a>
				//case 48 read adc 
				// set A = 0
				// set B = 0
				// set C = 0
				// Read PF6(pin 39)
				DEMUX_A_OFF;
    1a14:	77 98       	cbi	0x0e, 7	; 14
    1a16:	04 c0       	rjmp	.+8      	; 0x1a20 <ReadTempSensor+0x212>
				DEMUX_B_OFF;
				DEMUX_C_OFF;
				return ReadADC(6);
			}
			else if(SensorNumber[1] == '9')
    1a18:	89 33       	cpi	r24, 0x39	; 57
    1a1a:	09 f0       	breq	.+2      	; 0x1a1e <ReadTempSensor+0x210>
    1a1c:	4e c0       	rjmp	.+156    	; 0x1aba <ReadTempSensor+0x2ac>
				//case 49 read adc 
				// set A = 1
				// set B = 0
				// set C = 0
				// Read PF6(pin 39)
				DEMUX_A_ON;
    1a1e:	77 9a       	sbi	0x0e, 7	; 14
				DEMUX_B_OFF;
    1a20:	28 98       	cbi	0x05, 0	; 5
				DEMUX_C_OFF;
    1a22:	29 98       	cbi	0x05, 1	; 5
    1a24:	1e c0       	rjmp	.+60     	; 0x1a62 <ReadTempSensor+0x254>
				return ReadADC(6);
			}
		}		
		else if(SensorNumber[0] == '5')//sensors 50 through 59
    1a26:	85 33       	cpi	r24, 0x35	; 53
    1a28:	89 f5       	brne	.+98     	; 0x1a8c <ReadTempSensor+0x27e>
		{
			if(SensorNumber[1] == '0')
    1a2a:	81 81       	ldd	r24, Z+1	; 0x01
    1a2c:	80 33       	cpi	r24, 0x30	; 48
    1a2e:	11 f4       	brne	.+4      	; 0x1a34 <ReadTempSensor+0x226>
				//case 50 read adc 
				// set A = 0
				// set B = 1
				// set C = 0
				// Read PF6(pin 39)
				DEMUX_A_OFF;
    1a30:	77 98       	cbi	0x0e, 7	; 14
    1a32:	03 c0       	rjmp	.+6      	; 0x1a3a <ReadTempSensor+0x22c>
				DEMUX_B_ON;
				DEMUX_C_OFF;
				return ReadADC(6);
			}
			else if(SensorNumber[1] == '1')
    1a34:	81 33       	cpi	r24, 0x31	; 49
    1a36:	19 f4       	brne	.+6      	; 0x1a3e <ReadTempSensor+0x230>
				//case 51 read adc 
				// set A = 1
				// set B = 1
				// set C = 0
				// Read PF6(pin 39)
				DEMUX_A_ON;
    1a38:	77 9a       	sbi	0x0e, 7	; 14
				DEMUX_B_ON;
    1a3a:	28 9a       	sbi	0x05, 0	; 5
    1a3c:	f2 cf       	rjmp	.-28     	; 0x1a22 <ReadTempSensor+0x214>
				DEMUX_C_OFF;
				return ReadADC(6);
			}
			else if(SensorNumber[1] == '2')
    1a3e:	82 33       	cpi	r24, 0x32	; 50
    1a40:	11 f4       	brne	.+4      	; 0x1a46 <ReadTempSensor+0x238>
				//case 52 read adc 
				// set A = 0
				// set B = 0
				// set C = 1
				// Read PF6(pin 39)
				DEMUX_A_OFF;
    1a42:	77 98       	cbi	0x0e, 7	; 14
    1a44:	03 c0       	rjmp	.+6      	; 0x1a4c <ReadTempSensor+0x23e>
				DEMUX_B_OFF;
				DEMUX_C_ON;
				return ReadADC(6);
			}
			else if(SensorNumber[1] == '3')
    1a46:	83 33       	cpi	r24, 0x33	; 51
    1a48:	19 f4       	brne	.+6      	; 0x1a50 <ReadTempSensor+0x242>
				//case 53 read adc 
				// set A = 1
				// set B = 0
				// set C = 1
				// Read PF6(pin 39)
				DEMUX_A_ON;
    1a4a:	77 9a       	sbi	0x0e, 7	; 14
				DEMUX_B_OFF;
    1a4c:	28 98       	cbi	0x05, 0	; 5
    1a4e:	08 c0       	rjmp	.+16     	; 0x1a60 <ReadTempSensor+0x252>
				DEMUX_C_ON;
				return ReadADC(6);
			}
			else if(SensorNumber[1] == '4')
    1a50:	84 33       	cpi	r24, 0x34	; 52
    1a52:	11 f4       	brne	.+4      	; 0x1a58 <ReadTempSensor+0x24a>
				//case 54 read adc 
				// set A = 0
				// set B = 1
				// set C = 1
				// Read PF6(pin 39)
				DEMUX_A_OFF;
    1a54:	77 98       	cbi	0x0e, 7	; 14
    1a56:	03 c0       	rjmp	.+6      	; 0x1a5e <ReadTempSensor+0x250>
				DEMUX_B_ON;
				DEMUX_C_ON;
				return ReadADC(6);
			}
			else if(SensorNumber[1] == '5')
    1a58:	85 33       	cpi	r24, 0x35	; 53
    1a5a:	29 f4       	brne	.+10     	; 0x1a66 <ReadTempSensor+0x258>
				//case 55 read adc 
				// set A = 1
				// set B = 1
				// set C = 1
				// Read PF6(pin 39)
				DEMUX_A_ON;
    1a5c:	77 9a       	sbi	0x0e, 7	; 14
				DEMUX_B_ON;
    1a5e:	28 9a       	sbi	0x05, 0	; 5
				DEMUX_C_ON;
    1a60:	29 9a       	sbi	0x05, 1	; 5
				return ReadADC(6);
    1a62:	86 e0       	ldi	r24, 0x06	; 6
    1a64:	e3 ce       	rjmp	.-570    	; 0x182c <ReadTempSensor+0x1e>
			}
			else if(SensorNumber[1] == '6')
    1a66:	86 33       	cpi	r24, 0x36	; 54
    1a68:	11 f4       	brne	.+4      	; 0x1a6e <ReadTempSensor+0x260>
				//case 56 read adc 
				// set A = 0
				// set B = 0
				// set C = 0
				// Read PF7(pin 40)
				DEMUX_A_OFF;
    1a6a:	77 98       	cbi	0x0e, 7	; 14
    1a6c:	03 c0       	rjmp	.+6      	; 0x1a74 <ReadTempSensor+0x266>
				DEMUX_B_OFF;
				DEMUX_C_OFF;
				return ReadADC(7);
			}
			else if(SensorNumber[1] == '7')
    1a6e:	87 33       	cpi	r24, 0x37	; 55
    1a70:	19 f4       	brne	.+6      	; 0x1a78 <ReadTempSensor+0x26a>
				//case 57 read adc 
				// set A = 1
				// set B = 0
				// set C = 0
				// Read PF7(pin 40)
				DEMUX_A_ON;
    1a72:	77 9a       	sbi	0x0e, 7	; 14
				DEMUX_B_OFF;
    1a74:	28 98       	cbi	0x05, 0	; 5
    1a76:	08 c0       	rjmp	.+16     	; 0x1a88 <ReadTempSensor+0x27a>
				DEMUX_C_OFF;
				return ReadADC(7);
			}
			else if(SensorNumber[1] == '8')
    1a78:	88 33       	cpi	r24, 0x38	; 56
    1a7a:	11 f4       	brne	.+4      	; 0x1a80 <ReadTempSensor+0x272>
				//case 58 read adc 
				// set A = 0
				// set B = 1
				// set C = 0
				// Read PF7(pin 40)
				DEMUX_A_OFF;
    1a7c:	77 98       	cbi	0x0e, 7	; 14
    1a7e:	03 c0       	rjmp	.+6      	; 0x1a86 <ReadTempSensor+0x278>
				DEMUX_B_ON;
				DEMUX_C_OFF;
				return ReadADC(7);
			}
			else if(SensorNumber[1] == '9')
    1a80:	89 33       	cpi	r24, 0x39	; 57
    1a82:	d9 f4       	brne	.+54     	; 0x1aba <ReadTempSensor+0x2ac>
				//case 59 read adc 
				// set A = 1
				// set B = 1
				// set C = 0
				// Read PF7(pin 40)
				DEMUX_A_ON;
    1a84:	77 9a       	sbi	0x0e, 7	; 14
				DEMUX_B_ON;
    1a86:	28 9a       	sbi	0x05, 0	; 5
				DEMUX_C_OFF;
    1a88:	29 98       	cbi	0x05, 1	; 5
    1a8a:	15 c0       	rjmp	.+42     	; 0x1ab6 <ReadTempSensor+0x2a8>
				return ReadADC(7);
			}
		}		
		else if(SensorNumber[0] == '6')//sensors 60 through 63
    1a8c:	86 33       	cpi	r24, 0x36	; 54
    1a8e:	a9 f4       	brne	.+42     	; 0x1aba <ReadTempSensor+0x2ac>
		{
			if(SensorNumber[1] == '0')
    1a90:	81 81       	ldd	r24, Z+1	; 0x01
    1a92:	80 33       	cpi	r24, 0x30	; 48
    1a94:	11 f4       	brne	.+4      	; 0x1a9a <ReadTempSensor+0x28c>
				//case 60 read adc 
				// set A = 0
				// set B = 0
				// set C = 1
				// Read PF7(pin 40)
				DEMUX_A_OFF;
    1a96:	77 98       	cbi	0x0e, 7	; 14
    1a98:	03 c0       	rjmp	.+6      	; 0x1aa0 <ReadTempSensor+0x292>
				DEMUX_B_OFF;
				DEMUX_C_ON;
				return ReadADC(7);
			}
			else if(SensorNumber[1] == '1')
    1a9a:	81 33       	cpi	r24, 0x31	; 49
    1a9c:	19 f4       	brne	.+6      	; 0x1aa4 <ReadTempSensor+0x296>
				//case 61 read adc 
				// set A = 1
				// set B = 0
				// set C = 1
				// Read PF7(pin 40)
				DEMUX_A_ON;
    1a9e:	77 9a       	sbi	0x0e, 7	; 14
				DEMUX_B_OFF;
    1aa0:	28 98       	cbi	0x05, 0	; 5
    1aa2:	08 c0       	rjmp	.+16     	; 0x1ab4 <ReadTempSensor+0x2a6>
				DEMUX_C_ON;
				return ReadADC(7);
			}
			else if(SensorNumber[1] == '2')
    1aa4:	82 33       	cpi	r24, 0x32	; 50
    1aa6:	11 f4       	brne	.+4      	; 0x1aac <ReadTempSensor+0x29e>
				//case 62 read adc 
				// set A = 0
				// set B = 1
				// set C = 1
				// Read PF7(pin 40)
				DEMUX_A_OFF;
    1aa8:	77 98       	cbi	0x0e, 7	; 14
    1aaa:	03 c0       	rjmp	.+6      	; 0x1ab2 <ReadTempSensor+0x2a4>
				DEMUX_B_ON;
				DEMUX_C_ON;
				return ReadADC(7);
			}
			else if(SensorNumber[1] == '3')
    1aac:	83 33       	cpi	r24, 0x33	; 51
    1aae:	29 f4       	brne	.+10     	; 0x1aba <ReadTempSensor+0x2ac>
				//case 63 read adc 
				// set A = 1
				// set B = 1
				// set C = 1
				// Read PF7(pin 40)
				DEMUX_A_ON;
    1ab0:	77 9a       	sbi	0x0e, 7	; 14
				DEMUX_B_ON;
    1ab2:	28 9a       	sbi	0x05, 0	; 5
				DEMUX_C_ON;
    1ab4:	29 9a       	sbi	0x05, 1	; 5
				return ReadADC(7);
    1ab6:	87 e0       	ldi	r24, 0x07	; 7
    1ab8:	b9 ce       	rjmp	.-654    	; 0x182c <ReadTempSensor+0x1e>
			}
		}
	
		send_str(PSTR("ERRORTEMP\n\r"));
    1aba:	8d eb       	ldi	r24, 0xBD	; 189
    1abc:	97 e0       	ldi	r25, 0x07	; 7
    1abe:	0e 94 99 04 	call	0x932	; 0x932 <send_str>
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
	return 0;
}
    1ac6:	c9 01       	movw	r24, r18
    1ac8:	08 95       	ret

00001aca <InitializeSprinkler>:

uint8_t sprinklerVerbose = 1;

void InitializeSprinkler( void)
{
	SPRINKLERDEMUX_C_CONFIG;
    1aca:	3a 9a       	sbi	0x07, 2	; 7
	SPRINKLERDEMUX_B_CONFIG;
    1acc:	3b 9a       	sbi	0x07, 3	; 7
	SPRINKLERDEMUX_A_CONFIG;
    1ace:	23 9a       	sbi	0x04, 3	; 4
	SPRINKLERDEMUX_A_ON;//default all on
    1ad0:	2b 9a       	sbi	0x05, 3	; 5
	SPRINKLERDEMUX_B_ON;
    1ad2:	43 9a       	sbi	0x08, 3	; 8
	SPRINKLERDEMUX_C_ON;
    1ad4:	42 9a       	sbi	0x08, 2	; 8
}
    1ad6:	08 95       	ret

00001ad8 <SprinklerCntrl>:
*	this section requires that the section is 6 or less.
* returns 1 if there is an error, and return 0 if not.
* timing will be handled by the server/software
*/
void SprinklerCntrl( char section, char isOn)
{
    1ad8:	0f 93       	push	r16
    1ada:	1f 93       	push	r17
    1adc:	18 2f       	mov	r17, r24
    1ade:	06 2f       	mov	r16, r22
	if(sprinklerVerbose)
    1ae0:	80 91 09 01 	lds	r24, 0x0109
    1ae4:	88 23       	and	r24, r24
    1ae6:	21 f0       	breq	.+8      	; 0x1af0 <SprinklerCntrl+0x18>
	{
		send_str(PSTR("Entered SprinklerCntrl\r\n"));
    1ae8:	81 e8       	ldi	r24, 0x81	; 129
    1aea:	98 e0       	ldi	r25, 0x08	; 8
    1aec:	0e 94 99 04 	call	0x932	; 0x932 <send_str>
	}
	if(section > '5')
    1af0:	16 33       	cpi	r17, 0x36	; 54
    1af2:	40 f0       	brcs	.+16     	; 0x1b04 <SprinklerCntrl+0x2c>
	{
	
		if(sprinklerVerbose)
    1af4:	80 91 09 01 	lds	r24, 0x0109
    1af8:	88 23       	and	r24, r24
    1afa:	09 f4       	brne	.+2      	; 0x1afe <SprinklerCntrl+0x26>
    1afc:	93 c0       	rjmp	.+294    	; 0x1c24 <SprinklerCntrl+0x14c>
		{
			send_str(PSTR("Section is > 5\r\n"));
    1afe:	80 e7       	ldi	r24, 0x70	; 112
    1b00:	98 e0       	ldi	r25, 0x08	; 8
    1b02:	8e c0       	rjmp	.+284    	; 0x1c20 <SprinklerCntrl+0x148>
		SPRINKLERDEMUX_B_ON;
		SPRINKLERDEMUX_A_ON;
		return ;
	}
	
	if(section == '0') // Section 0
    1b04:	10 33       	cpi	r17, 0x30	; 48
    1b06:	b9 f4       	brne	.+46     	; 0x1b36 <SprinklerCntrl+0x5e>
	{
	
		if(sprinklerVerbose)
    1b08:	80 91 09 01 	lds	r24, 0x0109
    1b0c:	88 23       	and	r24, r24
    1b0e:	21 f0       	breq	.+8      	; 0x1b18 <SprinklerCntrl+0x40>
		{
			send_str(PSTR("Section == \'0\'\r\n"));
    1b10:	8f e5       	ldi	r24, 0x5F	; 95
    1b12:	98 e0       	ldi	r25, 0x08	; 8
    1b14:	0e 94 99 04 	call	0x932	; 0x932 <send_str>
		}
		if(isOn == '1') // if true turn on
    1b18:	01 33       	cpi	r16, 0x31	; 49
    1b1a:	09 f0       	breq	.+2      	; 0x1b1e <SprinklerCntrl+0x46>
    1b1c:	83 c0       	rjmp	.+262    	; 0x1c24 <SprinklerCntrl+0x14c>
		{
		
			if(sprinklerVerbose)
    1b1e:	80 91 09 01 	lds	r24, 0x0109
    1b22:	88 23       	and	r24, r24
    1b24:	21 f0       	breq	.+8      	; 0x1b2e <SprinklerCntrl+0x56>
			{
				send_str(PSTR("isOn == 1\r\n"));
    1b26:	83 e5       	ldi	r24, 0x53	; 83
    1b28:	98 e0       	ldi	r25, 0x08	; 8
    1b2a:	0e 94 99 04 	call	0x932	; 0x932 <send_str>
			}
			SPRINKLERDEMUX_C_OFF;
    1b2e:	42 98       	cbi	0x08, 2	; 8
			SPRINKLERDEMUX_B_OFF;
    1b30:	43 98       	cbi	0x08, 3	; 8
			SPRINKLERDEMUX_A_OFF;
    1b32:	2b 98       	cbi	0x05, 3	; 5
    1b34:	7a c0       	rjmp	.+244    	; 0x1c2a <SprinklerCntrl+0x152>
			SPRINKLERDEMUX_B_ON;
			SPRINKLERDEMUX_A_ON;
			return;
		}
	}
	else if(section == '1') // Section 1
    1b36:	11 33       	cpi	r17, 0x31	; 49
    1b38:	d9 f4       	brne	.+54     	; 0x1b70 <SprinklerCntrl+0x98>
	{
			if(sprinklerVerbose)
    1b3a:	80 91 09 01 	lds	r24, 0x0109
    1b3e:	88 23       	and	r24, r24
    1b40:	21 f0       	breq	.+8      	; 0x1b4a <SprinklerCntrl+0x72>
			{
				send_str(PSTR("Enter Section 1\r\n"));
    1b42:	81 e4       	ldi	r24, 0x41	; 65
    1b44:	98 e0       	ldi	r25, 0x08	; 8
    1b46:	0e 94 99 04 	call	0x932	; 0x932 <send_str>
    1b4a:	80 91 09 01 	lds	r24, 0x0109
			}
		if(isOn == '1') // if true turn on
    1b4e:	01 33       	cpi	r16, 0x31	; 49
    1b50:	49 f4       	brne	.+18     	; 0x1b64 <SprinklerCntrl+0x8c>
		{
			if(sprinklerVerbose)
    1b52:	88 23       	and	r24, r24
    1b54:	21 f0       	breq	.+8      	; 0x1b5e <SprinklerCntrl+0x86>
			{
				send_str(PSTR("isOn == 1\r\n"));
    1b56:	85 e3       	ldi	r24, 0x35	; 53
    1b58:	98 e0       	ldi	r25, 0x08	; 8
    1b5a:	0e 94 99 04 	call	0x932	; 0x932 <send_str>
			}
			SPRINKLERDEMUX_A_ON;
    1b5e:	2b 9a       	sbi	0x05, 3	; 5
			SPRINKLERDEMUX_B_OFF;	
    1b60:	43 98       	cbi	0x08, 3	; 8
    1b62:	2a c0       	rjmp	.+84     	; 0x1bb8 <SprinklerCntrl+0xe0>
			SPRINKLERDEMUX_C_OFF;
			return;
		}
		else // else turn off
		{
			if(sprinklerVerbose)
    1b64:	88 23       	and	r24, r24
    1b66:	09 f4       	brne	.+2      	; 0x1b6a <SprinklerCntrl+0x92>
    1b68:	5d c0       	rjmp	.+186    	; 0x1c24 <SprinklerCntrl+0x14c>
			{
				send_str(PSTR("isOn == 0\r\n"));
    1b6a:	89 e2       	ldi	r24, 0x29	; 41
    1b6c:	98 e0       	ldi	r25, 0x08	; 8
    1b6e:	58 c0       	rjmp	.+176    	; 0x1c20 <SprinklerCntrl+0x148>
			SPRINKLERDEMUX_B_ON;
			SPRINKLERDEMUX_A_ON;
			return;
		}
	}
	else if(section == '2') // Section 2
    1b70:	12 33       	cpi	r17, 0x32	; 50
    1b72:	a1 f4       	brne	.+40     	; 0x1b9c <SprinklerCntrl+0xc4>
	{
			if(sprinklerVerbose)
    1b74:	80 91 09 01 	lds	r24, 0x0109
    1b78:	88 23       	and	r24, r24
    1b7a:	21 f0       	breq	.+8      	; 0x1b84 <SprinklerCntrl+0xac>
			{
				send_str(PSTR("Section 2\r\n"));
    1b7c:	8d e1       	ldi	r24, 0x1D	; 29
    1b7e:	98 e0       	ldi	r25, 0x08	; 8
    1b80:	0e 94 99 04 	call	0x932	; 0x932 <send_str>
			}
		if(isOn == '1') // if true turn on
    1b84:	01 33       	cpi	r16, 0x31	; 49
    1b86:	11 f4       	brne	.+4      	; 0x1b8c <SprinklerCntrl+0xb4>
		{
			SPRINKLERDEMUX_A_OFF;
    1b88:	2b 98       	cbi	0x05, 3	; 5
    1b8a:	15 c0       	rjmp	.+42     	; 0x1bb6 <SprinklerCntrl+0xde>
			SPRINKLERDEMUX_C_OFF;
			return;
		}
		else // else turn off
		{
			if(sprinklerVerbose)
    1b8c:	80 91 09 01 	lds	r24, 0x0109
    1b90:	88 23       	and	r24, r24
    1b92:	09 f4       	brne	.+2      	; 0x1b96 <SprinklerCntrl+0xbe>
    1b94:	47 c0       	rjmp	.+142    	; 0x1c24 <SprinklerCntrl+0x14c>
			{
				send_str(PSTR("isOn == 0\r\n"));
    1b96:	81 e1       	ldi	r24, 0x11	; 17
    1b98:	98 e0       	ldi	r25, 0x08	; 8
    1b9a:	42 c0       	rjmp	.+132    	; 0x1c20 <SprinklerCntrl+0x148>
			SPRINKLERDEMUX_B_ON;
			SPRINKLERDEMUX_A_ON;
			return;
		}
	}
	else if(section == '3') // Section 3
    1b9c:	13 33       	cpi	r17, 0x33	; 51
    1b9e:	a9 f4       	brne	.+42     	; 0x1bca <SprinklerCntrl+0xf2>
	{

		if(sprinklerVerbose)
    1ba0:	80 91 09 01 	lds	r24, 0x0109
    1ba4:	88 23       	and	r24, r24
    1ba6:	21 f0       	breq	.+8      	; 0x1bb0 <SprinklerCntrl+0xd8>
		{
			send_str(PSTR("Section 3\r\n"));
    1ba8:	85 e0       	ldi	r24, 0x05	; 5
    1baa:	98 e0       	ldi	r25, 0x08	; 8
    1bac:	0e 94 99 04 	call	0x932	; 0x932 <send_str>
		}
		if(isOn == '1') // if true turn on
    1bb0:	01 33       	cpi	r16, 0x31	; 49
    1bb2:	21 f4       	brne	.+8      	; 0x1bbc <SprinklerCntrl+0xe4>
		{
			SPRINKLERDEMUX_A_ON;
    1bb4:	2b 9a       	sbi	0x05, 3	; 5
			SPRINKLERDEMUX_B_ON;	
    1bb6:	43 9a       	sbi	0x08, 3	; 8
			SPRINKLERDEMUX_C_OFF;
    1bb8:	42 98       	cbi	0x08, 2	; 8
    1bba:	37 c0       	rjmp	.+110    	; 0x1c2a <SprinklerCntrl+0x152>
			return;
		}
		else // else turn off
		{
			if(sprinklerVerbose)
    1bbc:	80 91 09 01 	lds	r24, 0x0109
    1bc0:	88 23       	and	r24, r24
    1bc2:	81 f1       	breq	.+96     	; 0x1c24 <SprinklerCntrl+0x14c>
			{
				send_str(PSTR("isOn == 0\r\n"));
    1bc4:	89 ef       	ldi	r24, 0xF9	; 249
    1bc6:	97 e0       	ldi	r25, 0x07	; 7
    1bc8:	2b c0       	rjmp	.+86     	; 0x1c20 <SprinklerCntrl+0x148>
			SPRINKLERDEMUX_B_ON;
			SPRINKLERDEMUX_A_ON;
			return;
		}
	}
	else if(section == '4') // Section 4
    1bca:	14 33       	cpi	r17, 0x34	; 52
    1bcc:	99 f4       	brne	.+38     	; 0x1bf4 <SprinklerCntrl+0x11c>
	{
	
		if(sprinklerVerbose)
    1bce:	80 91 09 01 	lds	r24, 0x0109
    1bd2:	88 23       	and	r24, r24
    1bd4:	21 f0       	breq	.+8      	; 0x1bde <SprinklerCntrl+0x106>
		{
			send_str(PSTR("Section 4\r\n"));
    1bd6:	8d ee       	ldi	r24, 0xED	; 237
    1bd8:	97 e0       	ldi	r25, 0x07	; 7
    1bda:	0e 94 99 04 	call	0x932	; 0x932 <send_str>
		}
		if(isOn == '1') // if true turn on
    1bde:	01 33       	cpi	r16, 0x31	; 49
    1be0:	11 f4       	brne	.+4      	; 0x1be6 <SprinklerCntrl+0x10e>
		{
			SPRINKLERDEMUX_A_OFF;
    1be2:	2b 98       	cbi	0x05, 3	; 5
    1be4:	14 c0       	rjmp	.+40     	; 0x1c0e <SprinklerCntrl+0x136>
			SPRINKLERDEMUX_C_ON;
			return;
		}
		else // else turn off
		{
			if(sprinklerVerbose)
    1be6:	80 91 09 01 	lds	r24, 0x0109
    1bea:	88 23       	and	r24, r24
    1bec:	d9 f0       	breq	.+54     	; 0x1c24 <SprinklerCntrl+0x14c>
			{
				send_str(PSTR("isOn == 0\r\n"));
    1bee:	81 ee       	ldi	r24, 0xE1	; 225
    1bf0:	97 e0       	ldi	r25, 0x07	; 7
    1bf2:	16 c0       	rjmp	.+44     	; 0x1c20 <SprinklerCntrl+0x148>
			SPRINKLERDEMUX_B_ON;
			SPRINKLERDEMUX_A_ON;
			return;
		}
	}
	else if(section == '5') // Section 5
    1bf4:	15 33       	cpi	r17, 0x35	; 53
    1bf6:	c9 f4       	brne	.+50     	; 0x1c2a <SprinklerCntrl+0x152>
	{
			if(sprinklerVerbose)
    1bf8:	80 91 09 01 	lds	r24, 0x0109
    1bfc:	88 23       	and	r24, r24
    1bfe:	21 f0       	breq	.+8      	; 0x1c08 <SprinklerCntrl+0x130>
			{
				send_str(PSTR("Section 5\r\n"));
    1c00:	85 ed       	ldi	r24, 0xD5	; 213
    1c02:	97 e0       	ldi	r25, 0x07	; 7
    1c04:	0e 94 99 04 	call	0x932	; 0x932 <send_str>
			}
		if(isOn == '1') // if true turn on
    1c08:	01 33       	cpi	r16, 0x31	; 49
    1c0a:	21 f4       	brne	.+8      	; 0x1c14 <SprinklerCntrl+0x13c>
		{
			SPRINKLERDEMUX_A_ON;
    1c0c:	2b 9a       	sbi	0x05, 3	; 5
			SPRINKLERDEMUX_B_OFF;	
    1c0e:	43 98       	cbi	0x08, 3	; 8
			SPRINKLERDEMUX_C_ON;
    1c10:	42 9a       	sbi	0x08, 2	; 8
    1c12:	0b c0       	rjmp	.+22     	; 0x1c2a <SprinklerCntrl+0x152>
			return;
		}
		else // else turn off
		{
			if(sprinklerVerbose)
    1c14:	80 91 09 01 	lds	r24, 0x0109
    1c18:	88 23       	and	r24, r24
    1c1a:	21 f0       	breq	.+8      	; 0x1c24 <SprinklerCntrl+0x14c>
			{
				send_str(PSTR("isOn == 0\r\n"));
    1c1c:	89 ec       	ldi	r24, 0xC9	; 201
    1c1e:	97 e0       	ldi	r25, 0x07	; 7
    1c20:	0e 94 99 04 	call	0x932	; 0x932 <send_str>
			}
			SPRINKLERDEMUX_C_ON;
    1c24:	42 9a       	sbi	0x08, 2	; 8
			SPRINKLERDEMUX_B_ON;
    1c26:	43 9a       	sbi	0x08, 3	; 8
			SPRINKLERDEMUX_A_ON;
    1c28:	2b 9a       	sbi	0x05, 3	; 5
			return;
		}
	}
	
}
    1c2a:	1f 91       	pop	r17
    1c2c:	0f 91       	pop	r16
    1c2e:	08 95       	ret

00001c30 <PWMNew>:
//select which pins to enable.
/**
*	This creates a PWM pin ready to be set.
*/
void PWMNew(uint8_t pin)// we are going with the physical pin numbers
{
    1c30:	98 2f       	mov	r25, r24
	if(pin == 2||pin == 3)// Timer 0: PB7(A), PD0(B)
    1c32:	82 50       	subi	r24, 0x02	; 2
    1c34:	82 30       	cpi	r24, 0x02	; 2
    1c36:	70 f4       	brcc	.+28     	; 0x1c54 <PWMNew+0x24>
	{
		if(pin == 2)
    1c38:	92 30       	cpi	r25, 0x02	; 2
    1c3a:	21 f4       	brne	.+8      	; 0x1c44 <PWMNew+0x14>
		{
			PWM0A_CONFIG;// check header file for more info
    1c3c:	27 9a       	sbi	0x04, 7	; 4
			TCCR0A |= (1 << COM0A1);
    1c3e:	84 b5       	in	r24, 0x24	; 36
    1c40:	80 68       	ori	r24, 0x80	; 128
    1c42:	03 c0       	rjmp	.+6      	; 0x1c4a <PWMNew+0x1a>
		}			
		else
		{
			PWM0B_CONFIG;
    1c44:	50 9a       	sbi	0x0a, 0	; 10
			TCCR0A |= (1 << COM0B1);
    1c46:	84 b5       	in	r24, 0x24	; 36
    1c48:	80 62       	ori	r24, 0x20	; 32
    1c4a:	84 bd       	out	0x24, r24	; 36
		}
		TCCR0A |= (1 << WGM01) | (1 << WGM00);// set fast PWM Mode pg 106(section 13.6.3)
    1c4c:	84 b5       	in	r24, 0x24	; 36
    1c4e:	83 60       	ori	r24, 0x03	; 3
    1c50:	84 bd       	out	0x24, r24	; 36
    1c52:	08 95       	ret
	}
	else if(pin == 22 || pin == 23)// Timer 1: PB6(B), PB5(A)
    1c54:	89 2f       	mov	r24, r25
    1c56:	86 51       	subi	r24, 0x16	; 22
    1c58:	82 30       	cpi	r24, 0x02	; 2
    1c5a:	c0 f4       	brcc	.+48     	; 0x1c8c <PWMNew+0x5c>
	{
		if(pin == 23)
    1c5c:	97 31       	cpi	r25, 0x17	; 23
    1c5e:	29 f4       	brne	.+10     	; 0x1c6a <PWMNew+0x3a>
		{
			PWM1A_CONFIG;
    1c60:	25 9a       	sbi	0x04, 5	; 4
			TCCR1A |= (1 << COM1A1);
    1c62:	80 91 80 00 	lds	r24, 0x0080
    1c66:	80 68       	ori	r24, 0x80	; 128
    1c68:	04 c0       	rjmp	.+8      	; 0x1c72 <PWMNew+0x42>
		}
		else
		{
			PWM1B_CONFIG;
    1c6a:	26 9a       	sbi	0x04, 6	; 4
			TCCR1A |= (1 << COM1B1);
    1c6c:	80 91 80 00 	lds	r24, 0x0080
    1c70:	80 62       	ori	r24, 0x20	; 32
    1c72:	80 93 80 00 	sts	0x0080, r24
		}
		// both of the following 2 registers set the mode for the PWM Fast. Table 14.4 pg 142
		TCCR1A |= (1 << WGM10);
    1c76:	80 91 80 00 	lds	r24, 0x0080
    1c7a:	81 60       	ori	r24, 0x01	; 1
    1c7c:	80 93 80 00 	sts	0x0080, r24
		TCCR1B |= (1 << WGM12);// set Fast PWM mode using ICR1 as top
    1c80:	80 91 81 00 	lds	r24, 0x0081
    1c84:	88 60       	ori	r24, 0x08	; 8
    1c86:	80 93 81 00 	sts	0x0081, r24
    1c8a:	08 95       	ret
		
		
	}
	else if(pin == 24 || pin == 4)// Timer 2: PB4(A), PD1(B)
    1c8c:	98 31       	cpi	r25, 0x18	; 24
    1c8e:	19 f0       	breq	.+6      	; 0x1c96 <PWMNew+0x66>
    1c90:	94 30       	cpi	r25, 0x04	; 4
    1c92:	a1 f4       	brne	.+40     	; 0x1cbc <PWMNew+0x8c>
    1c94:	07 c0       	rjmp	.+14     	; 0x1ca4 <PWMNew+0x74>
	{
		// Configure pin to be an output
		if(pin == 24)
		{
			PWM2A_CONFIG;
    1c96:	24 9a       	sbi	0x04, 4	; 4
			TCCR2A |= (1 << COM2A1);
    1c98:	80 91 b0 00 	lds	r24, 0x00B0
    1c9c:	80 68       	ori	r24, 0x80	; 128
    1c9e:	80 93 b0 00 	sts	0x00B0, r24
    1ca2:	06 c0       	rjmp	.+12     	; 0x1cb0 <PWMNew+0x80>
		}
		else
		{
			PWM2B_CONFIG;
    1ca4:	51 9a       	sbi	0x0a, 1	; 10
			TCCR2B |= (1 << COM2B1);// this may not be correct.
    1ca6:	80 91 b1 00 	lds	r24, 0x00B1
    1caa:	80 62       	ori	r24, 0x20	; 32
    1cac:	80 93 b1 00 	sts	0x00B1, r24
		}	
		TCCR2A |= (1 << WGM21) | (1 << WGM20);// set Fast PWM mode
    1cb0:	80 91 b0 00 	lds	r24, 0x00B0
    1cb4:	83 60       	ori	r24, 0x03	; 3
    1cb6:	80 93 b0 00 	sts	0x00B0, r24
    1cba:	08 95       	ret
	}
	else if(pin == 17 || pin == 18 || pin == 19)// Timer 3:PC4(C),PC5(B),PC6(C)
    1cbc:	89 2f       	mov	r24, r25
    1cbe:	81 51       	subi	r24, 0x11	; 17
    1cc0:	83 30       	cpi	r24, 0x03	; 3
    1cc2:	f0 f4       	brcc	.+60     	; 0x1d00 <PWMNew+0xd0>
	{
		// Configure pin to be an output
		if(pin == 19)
    1cc4:	93 31       	cpi	r25, 0x13	; 19
    1cc6:	29 f4       	brne	.+10     	; 0x1cd2 <PWMNew+0xa2>
		{
			PWM3A_CONFIG;
    1cc8:	3c 9a       	sbi	0x07, 4	; 7
			TCCR3A |= (1 << COM3A1);
    1cca:	80 91 90 00 	lds	r24, 0x0090
    1cce:	80 68       	ori	r24, 0x80	; 128
    1cd0:	0b c0       	rjmp	.+22     	; 0x1ce8 <PWMNew+0xb8>
		}
		else if(pin == 18)
    1cd2:	92 31       	cpi	r25, 0x12	; 18
    1cd4:	29 f4       	brne	.+10     	; 0x1ce0 <PWMNew+0xb0>
		{	
			PWM3B_CONFIG;
    1cd6:	3d 9a       	sbi	0x07, 5	; 7
			TCCR3A |= (1 << COM3B1);			
    1cd8:	80 91 90 00 	lds	r24, 0x0090
    1cdc:	80 62       	ori	r24, 0x20	; 32
    1cde:	04 c0       	rjmp	.+8      	; 0x1ce8 <PWMNew+0xb8>
		}
		else
		{
			PWM3C_CONFIG;
    1ce0:	3e 9a       	sbi	0x07, 6	; 7
			TCCR3A |= (1 << COM3C1);			
    1ce2:	80 91 90 00 	lds	r24, 0x0090
    1ce6:	88 60       	ori	r24, 0x08	; 8
    1ce8:	80 93 90 00 	sts	0x0090, r24
		}
		TCCR3A |= (1<< WGM30);
    1cec:	80 91 90 00 	lds	r24, 0x0090
    1cf0:	81 60       	ori	r24, 0x01	; 1
    1cf2:	80 93 90 00 	sts	0x0090, r24
		TCCR3B |= (1 << WGM32);
    1cf6:	80 91 91 00 	lds	r24, 0x0091
    1cfa:	88 60       	ori	r24, 0x08	; 8
    1cfc:	80 93 91 00 	sts	0x0091, r24
    1d00:	08 95       	ret

00001d02 <PWMStartTimer>:
*
*/
void PWMStartTimer(uint8_t timer, uint8_t CLKspeed)// we are going with the physical pin numbers
{
	// check which timer the pin belongs too.
	if(timer == 0)// Timer 0: PB7(A), PD0(B) This information can be found on pg 114 Section 13.8.2
    1d02:	88 23       	and	r24, r24
    1d04:	71 f5       	brne	.+92     	; 0x1d62 <PWMStartTimer+0x60>
	{
		// stop timer while configuring to disired configuration: Note: there is a quicker way.
		TCCR0B &= ~(1 << CS00);
    1d06:	85 b5       	in	r24, 0x25	; 37
    1d08:	8e 7f       	andi	r24, 0xFE	; 254
    1d0a:	85 bd       	out	0x25, r24	; 37
		TCCR0B &= ~(1 << CS01);
    1d0c:	85 b5       	in	r24, 0x25	; 37
    1d0e:	8d 7f       	andi	r24, 0xFD	; 253
    1d10:	85 bd       	out	0x25, r24	; 37
		TCCR0B &= ~(1 << CS02);
    1d12:	85 b5       	in	r24, 0x25	; 37
    1d14:	8b 7f       	andi	r24, 0xFB	; 251
    1d16:	85 bd       	out	0x25, r24	; 37
		
		// Configure pin to be an output
		if(CLKspeed == 1)// No Prescaler 16 Mhz clock
    1d18:	61 30       	cpi	r22, 0x01	; 1
    1d1a:	19 f4       	brne	.+6      	; 0x1d22 <PWMStartTimer+0x20>
		{
			TCCR0B |= (1<< CS00); 
    1d1c:	85 b5       	in	r24, 0x25	; 37
    1d1e:	81 60       	ori	r24, 0x01	; 1
    1d20:	04 c0       	rjmp	.+8      	; 0x1d2a <PWMStartTimer+0x28>
		}
		else if(CLKspeed == 2)
    1d22:	62 30       	cpi	r22, 0x02	; 2
    1d24:	21 f4       	brne	.+8      	; 0x1d2e <PWMStartTimer+0x2c>
		{
			TCCR0B |= (1 << CS01); // set prescalar to 1/8 of clock speed = 2Mhz
    1d26:	85 b5       	in	r24, 0x25	; 37
    1d28:	82 60       	ori	r24, 0x02	; 2
    1d2a:	85 bd       	out	0x25, r24	; 37
    1d2c:	08 95       	ret
		}
		else if(CLKspeed == 3)
    1d2e:	63 30       	cpi	r22, 0x03	; 3
    1d30:	19 f4       	brne	.+6      	; 0x1d38 <PWMStartTimer+0x36>
		{
			TCCR0B |= (1 << CS01) | (1<< CS00); // set prescalar to 1/64 of clk speed = 250 Khz
    1d32:	85 b5       	in	r24, 0x25	; 37
    1d34:	83 60       	ori	r24, 0x03	; 3
    1d36:	f9 cf       	rjmp	.-14     	; 0x1d2a <PWMStartTimer+0x28>
		}
		else if(CLKspeed == 4)// NOTE Timer 0 doesn't have 1/128 or 1/512
    1d38:	64 30       	cpi	r22, 0x04	; 4
    1d3a:	19 f4       	brne	.+6      	; 0x1d42 <PWMStartTimer+0x40>
		{
			TCCR0B |= (1 << CS02); // set prescalar to 1/256 of CPU clk = 62.5Khz
    1d3c:	85 b5       	in	r24, 0x25	; 37
    1d3e:	84 60       	ori	r24, 0x04	; 4
    1d40:	f4 cf       	rjmp	.-24     	; 0x1d2a <PWMStartTimer+0x28>
		}
		else if(CLKspeed == 5)
    1d42:	65 30       	cpi	r22, 0x05	; 5
    1d44:	19 f4       	brne	.+6      	; 0x1d4c <PWMStartTimer+0x4a>
		{
			TCCR0B |= (1 << CS02) | (1<< CS00); // set prescalar to 1/1024 of CPU clk = 15.625Khz
    1d46:	85 b5       	in	r24, 0x25	; 37
    1d48:	85 60       	ori	r24, 0x05	; 5
    1d4a:	ef cf       	rjmp	.-34     	; 0x1d2a <PWMStartTimer+0x28>
			//NOTE slower rates aren't possible with internal settings for Timer0.  
			// if you need slower rates check with a different Timer.
		}
		else if(CLKspeed == 6)// external clock, useful for own clock example 10Mhz, or 1Khz...
    1d4c:	66 30       	cpi	r22, 0x06	; 6
    1d4e:	19 f4       	brne	.+6      	; 0x1d56 <PWMStartTimer+0x54>
		{
			TCCR0B |= (1 << CS02) | (1<< CS01); // pin T0(PD7) tick on the Falling Edge
    1d50:	85 b5       	in	r24, 0x25	; 37
    1d52:	86 60       	ori	r24, 0x06	; 6
    1d54:	ea cf       	rjmp	.-44     	; 0x1d2a <PWMStartTimer+0x28>
		}
		else if(CLKspeed == 7)
    1d56:	67 30       	cpi	r22, 0x07	; 7
    1d58:	09 f0       	breq	.+2      	; 0x1d5c <PWMStartTimer+0x5a>
    1d5a:	bd c0       	rjmp	.+378    	; 0x1ed6 <PWMStartTimer+0x1d4>
		{
			TCCR0B |= (1 << CS02) | (1<< CS01)| (1<< CS00); // Pin T0(PD7) tick on the rising Edge
    1d5c:	85 b5       	in	r24, 0x25	; 37
    1d5e:	87 60       	ori	r24, 0x07	; 7
    1d60:	e4 cf       	rjmp	.-56     	; 0x1d2a <PWMStartTimer+0x28>
		}
		else
			return;
	}
	else if(timer == 1)// Timer 1: PB6(B), PB5(A) This information can be found on pg 144 Section 14.10.4
    1d62:	81 30       	cpi	r24, 0x01	; 1
    1d64:	e1 f5       	brne	.+120    	; 0x1dde <PWMStartTimer+0xdc>
	{	// this section assumes MODE is FAST PWM, with 8 bit counter.  Not for slower clock rates
		// change Mode from 8 bit to 9,10, or use a different register to compare against. 
		// stop timer while configuring to disired configuration: Note: there is a quicker way.
		TCCR1B &= ~(1 << CS10);
    1d66:	80 91 81 00 	lds	r24, 0x0081
    1d6a:	8e 7f       	andi	r24, 0xFE	; 254
    1d6c:	80 93 81 00 	sts	0x0081, r24
		TCCR1B &= ~(1 << CS11);
    1d70:	80 91 81 00 	lds	r24, 0x0081
    1d74:	8d 7f       	andi	r24, 0xFD	; 253
    1d76:	80 93 81 00 	sts	0x0081, r24
		TCCR1B &= ~(1 << CS12);
    1d7a:	80 91 81 00 	lds	r24, 0x0081
    1d7e:	8b 7f       	andi	r24, 0xFB	; 251
    1d80:	80 93 81 00 	sts	0x0081, r24
		
		// Configure pin to be an output
		if(CLKspeed == 1)// No Prescaler 16 Mhz clock
    1d84:	61 30       	cpi	r22, 0x01	; 1
    1d86:	21 f4       	brne	.+8      	; 0x1d90 <PWMStartTimer+0x8e>
		{
			TCCR1B |= (1<< CS10); 
    1d88:	80 91 81 00 	lds	r24, 0x0081
    1d8c:	81 60       	ori	r24, 0x01	; 1
    1d8e:	24 c0       	rjmp	.+72     	; 0x1dd8 <PWMStartTimer+0xd6>
		}
		else if(CLKspeed == 2)
    1d90:	62 30       	cpi	r22, 0x02	; 2
    1d92:	21 f4       	brne	.+8      	; 0x1d9c <PWMStartTimer+0x9a>
		{
			TCCR1B |= (1 << CS11); // set prescalar to 1/8 of clock speed = 2Mhz
    1d94:	80 91 81 00 	lds	r24, 0x0081
    1d98:	82 60       	ori	r24, 0x02	; 2
    1d9a:	1e c0       	rjmp	.+60     	; 0x1dd8 <PWMStartTimer+0xd6>
		}
		else if(CLKspeed == 3)
    1d9c:	63 30       	cpi	r22, 0x03	; 3
    1d9e:	21 f4       	brne	.+8      	; 0x1da8 <PWMStartTimer+0xa6>
		{
			TCCR1B |= (1 << CS11) | (1<< CS10); // set prescalar to 1/64 of clk speed = 250 Khz
    1da0:	80 91 81 00 	lds	r24, 0x0081
    1da4:	83 60       	ori	r24, 0x03	; 3
    1da6:	18 c0       	rjmp	.+48     	; 0x1dd8 <PWMStartTimer+0xd6>
		}
		else if(CLKspeed == 4)// NOTE Timer 0 doesn't have 1/128 or 1/512
    1da8:	64 30       	cpi	r22, 0x04	; 4
    1daa:	21 f4       	brne	.+8      	; 0x1db4 <PWMStartTimer+0xb2>
		{
			TCCR1B |= (1 << CS12); // set prescalar to 1/256 of CPU clk = 62.5Khz
    1dac:	80 91 81 00 	lds	r24, 0x0081
    1db0:	84 60       	ori	r24, 0x04	; 4
    1db2:	12 c0       	rjmp	.+36     	; 0x1dd8 <PWMStartTimer+0xd6>
		}
		else if(CLKspeed == 5)
    1db4:	65 30       	cpi	r22, 0x05	; 5
    1db6:	21 f4       	brne	.+8      	; 0x1dc0 <PWMStartTimer+0xbe>
		{
			TCCR1B |= (1 << CS12) | (1<< CS10); // set prescalar to 1/1024 of CPU clk = 15.625Khz
    1db8:	80 91 81 00 	lds	r24, 0x0081
    1dbc:	85 60       	ori	r24, 0x05	; 5
    1dbe:	0c c0       	rjmp	.+24     	; 0x1dd8 <PWMStartTimer+0xd6>
			//NOTE slower rates aren't possible with internal settings for Timer0.  
			// if you need slower rates check with a different Timer.
		}
		else if(CLKspeed == 6)// external clock, useful for own clock example 10Mhz, or 1Khz...
    1dc0:	66 30       	cpi	r22, 0x06	; 6
    1dc2:	21 f4       	brne	.+8      	; 0x1dcc <PWMStartTimer+0xca>
		{
			TCCR1B |= (1 << CS12) | (1<< CS11); // pin T0(PD7) tick on the Falling Edge
    1dc4:	80 91 81 00 	lds	r24, 0x0081
    1dc8:	86 60       	ori	r24, 0x06	; 6
    1dca:	06 c0       	rjmp	.+12     	; 0x1dd8 <PWMStartTimer+0xd6>
		}
		else if(CLKspeed == 7)
    1dcc:	67 30       	cpi	r22, 0x07	; 7
    1dce:	09 f0       	breq	.+2      	; 0x1dd2 <PWMStartTimer+0xd0>
    1dd0:	82 c0       	rjmp	.+260    	; 0x1ed6 <PWMStartTimer+0x1d4>
		{
			TCCR1B |= (1 << CS12) | (1<< CS11)| (1<< CS10); // Pin T0(PD7) tick on the rising Edge
    1dd2:	80 91 81 00 	lds	r24, 0x0081
    1dd6:	87 60       	ori	r24, 0x07	; 7
    1dd8:	80 93 81 00 	sts	0x0081, r24
    1ddc:	08 95       	ret
		}
		else
			return;
	}
	else if(timer == 2)// Timer 2: PB4(A), PD1(B) This information can be found on pg 164 Section 15.8.2
    1dde:	82 30       	cpi	r24, 0x02	; 2
    1de0:	e1 f5       	brne	.+120    	; 0x1e5a <PWMStartTimer+0x158>
	{	// this section assumes MODE is FAST PWM, with 8 bit counter.  
		TCCR2B &= ~(1 << CS20);
    1de2:	80 91 b1 00 	lds	r24, 0x00B1
    1de6:	8e 7f       	andi	r24, 0xFE	; 254
    1de8:	80 93 b1 00 	sts	0x00B1, r24
		TCCR2B &= ~(1 << CS21);
    1dec:	80 91 b1 00 	lds	r24, 0x00B1
    1df0:	8d 7f       	andi	r24, 0xFD	; 253
    1df2:	80 93 b1 00 	sts	0x00B1, r24
		TCCR2B &= ~(1 << CS22);
    1df6:	80 91 b1 00 	lds	r24, 0x00B1
    1dfa:	8b 7f       	andi	r24, 0xFB	; 251
    1dfc:	80 93 b1 00 	sts	0x00B1, r24
		
		// Configure pin to be an output
		if(CLKspeed == 1)// No Prescaler 16 Mhz clock
    1e00:	61 30       	cpi	r22, 0x01	; 1
    1e02:	21 f4       	brne	.+8      	; 0x1e0c <PWMStartTimer+0x10a>
		{
			TCCR2B |= (1<< CS20); 
    1e04:	80 91 b1 00 	lds	r24, 0x00B1
    1e08:	81 60       	ori	r24, 0x01	; 1
    1e0a:	24 c0       	rjmp	.+72     	; 0x1e54 <PWMStartTimer+0x152>
		}
		else if(CLKspeed == 2)
    1e0c:	62 30       	cpi	r22, 0x02	; 2
    1e0e:	21 f4       	brne	.+8      	; 0x1e18 <PWMStartTimer+0x116>
		{
			TCCR2B |= (1 << CS21); // set prescalar to 1/8 of clock speed = 2Mhz
    1e10:	80 91 b1 00 	lds	r24, 0x00B1
    1e14:	82 60       	ori	r24, 0x02	; 2
    1e16:	1e c0       	rjmp	.+60     	; 0x1e54 <PWMStartTimer+0x152>
		}
		else if(CLKspeed == 3)
    1e18:	63 30       	cpi	r22, 0x03	; 3
    1e1a:	21 f4       	brne	.+8      	; 0x1e24 <PWMStartTimer+0x122>
		{
			TCCR2B |= (1 << CS21) | (1<< CS20); // set prescalar to 1/32 of clk speed = 500 Khz
    1e1c:	80 91 b1 00 	lds	r24, 0x00B1
    1e20:	83 60       	ori	r24, 0x03	; 3
    1e22:	18 c0       	rjmp	.+48     	; 0x1e54 <PWMStartTimer+0x152>
		}
		else if(CLKspeed == 4)
    1e24:	64 30       	cpi	r22, 0x04	; 4
    1e26:	21 f4       	brne	.+8      	; 0x1e30 <PWMStartTimer+0x12e>
		{
			TCCR2B |= (1 << CS22); // set prescalar to 1/64 of CPU clk = 250Khz 
    1e28:	80 91 b1 00 	lds	r24, 0x00B1
    1e2c:	84 60       	ori	r24, 0x04	; 4
    1e2e:	12 c0       	rjmp	.+36     	; 0x1e54 <PWMStartTimer+0x152>
		}
		else if(CLKspeed == 5)
    1e30:	65 30       	cpi	r22, 0x05	; 5
    1e32:	21 f4       	brne	.+8      	; 0x1e3c <PWMStartTimer+0x13a>
		{
			TCCR2B |= (1 << CS22) | (1<< CS20); // set prescalar to 1/128 of CPU clk = 125Khz
    1e34:	80 91 b1 00 	lds	r24, 0x00B1
    1e38:	85 60       	ori	r24, 0x05	; 5
    1e3a:	0c c0       	rjmp	.+24     	; 0x1e54 <PWMStartTimer+0x152>
		}
		else if(CLKspeed == 6)
    1e3c:	66 30       	cpi	r22, 0x06	; 6
    1e3e:	21 f4       	brne	.+8      	; 0x1e48 <PWMStartTimer+0x146>
		{
			TCCR2B |= (1 << CS22) | (1<< CS21);  // set prescalar to 1/256 of CPU clk = 62.5Khz
    1e40:	80 91 b1 00 	lds	r24, 0x00B1
    1e44:	86 60       	ori	r24, 0x06	; 6
    1e46:	06 c0       	rjmp	.+12     	; 0x1e54 <PWMStartTimer+0x152>
		}
		else if(CLKspeed == 7)
    1e48:	67 30       	cpi	r22, 0x07	; 7
    1e4a:	09 f0       	breq	.+2      	; 0x1e4e <PWMStartTimer+0x14c>
    1e4c:	44 c0       	rjmp	.+136    	; 0x1ed6 <PWMStartTimer+0x1d4>
		{
			TCCR2B |= (1 << CS22) | (1<< CS21)| (1<< CS20); // set prescalar to 1/1024 of CPU clk = 15.625Khz
    1e4e:	80 91 b1 00 	lds	r24, 0x00B1
    1e52:	87 60       	ori	r24, 0x07	; 7
    1e54:	80 93 b1 00 	sts	0x00B1, r24
    1e58:	08 95       	ret
		}
		else
			return;
	}
	else if(timer == 3)// Timer 3: PC4(C),PC5(B),PC6(C) Same as timer 1 but different registers
    1e5a:	83 30       	cpi	r24, 0x03	; 3
    1e5c:	e1 f5       	brne	.+120    	; 0x1ed6 <PWMStartTimer+0x1d4>
	{	
		//This information can be found on pg 144 Section 14.10.4
		// this section assumes MODE is FAST PWM, with 8 bit counter.  Not for slower clock rates
		// change Mode from 8 bit to 9,10, or use a different register to compare against. 
		// stop timer while configuring to disired configuration: Note: there is a quicker way.
		TCCR3B &= ~(1 << CS30);
    1e5e:	80 91 91 00 	lds	r24, 0x0091
    1e62:	8e 7f       	andi	r24, 0xFE	; 254
    1e64:	80 93 91 00 	sts	0x0091, r24
		TCCR3B &= ~(1 << CS31);
    1e68:	80 91 91 00 	lds	r24, 0x0091
    1e6c:	8d 7f       	andi	r24, 0xFD	; 253
    1e6e:	80 93 91 00 	sts	0x0091, r24
		TCCR3B &= ~(1 << CS32);
    1e72:	80 91 91 00 	lds	r24, 0x0091
    1e76:	8b 7f       	andi	r24, 0xFB	; 251
    1e78:	80 93 91 00 	sts	0x0091, r24
		
		// Configure pin to be an output
		if(CLKspeed == 1)// No Prescaler 16 Mhz clock
    1e7c:	61 30       	cpi	r22, 0x01	; 1
    1e7e:	21 f4       	brne	.+8      	; 0x1e88 <PWMStartTimer+0x186>
		{
			TCCR3B |= (1<< CS30); 
    1e80:	80 91 91 00 	lds	r24, 0x0091
    1e84:	81 60       	ori	r24, 0x01	; 1
    1e86:	1d c0       	rjmp	.+58     	; 0x1ec2 <PWMStartTimer+0x1c0>
		}
		else if(CLKspeed == 2)
    1e88:	62 30       	cpi	r22, 0x02	; 2
    1e8a:	21 f4       	brne	.+8      	; 0x1e94 <PWMStartTimer+0x192>
		{
			TCCR3B |= (1 << CS31); // set prescalar to 1/8 of clock speed = 2Mhz
    1e8c:	80 91 91 00 	lds	r24, 0x0091
    1e90:	82 60       	ori	r24, 0x02	; 2
    1e92:	17 c0       	rjmp	.+46     	; 0x1ec2 <PWMStartTimer+0x1c0>
		}
		else if(CLKspeed == 3)
    1e94:	63 30       	cpi	r22, 0x03	; 3
    1e96:	21 f4       	brne	.+8      	; 0x1ea0 <PWMStartTimer+0x19e>
		{
			TCCR3B |= (1 << CS31) | (1<< CS30); // set prescalar to 1/64 of clk speed = 250 Khz
    1e98:	80 91 91 00 	lds	r24, 0x0091
    1e9c:	83 60       	ori	r24, 0x03	; 3
    1e9e:	11 c0       	rjmp	.+34     	; 0x1ec2 <PWMStartTimer+0x1c0>
		}
		else if(CLKspeed == 4)// NOTE Timer 0 doesn't have 1/128 or 1/512
    1ea0:	64 30       	cpi	r22, 0x04	; 4
    1ea2:	21 f4       	brne	.+8      	; 0x1eac <PWMStartTimer+0x1aa>
		{
			TCCR3B |= (1 << CS32); // set prescalar to 1/256 of CPU clk = 62.5Khz
    1ea4:	80 91 91 00 	lds	r24, 0x0091
    1ea8:	84 60       	ori	r24, 0x04	; 4
    1eaa:	0b c0       	rjmp	.+22     	; 0x1ec2 <PWMStartTimer+0x1c0>
		}
		else if(CLKspeed == 5)
    1eac:	65 30       	cpi	r22, 0x05	; 5
    1eae:	21 f4       	brne	.+8      	; 0x1eb8 <PWMStartTimer+0x1b6>
		{
			TCCR3B |= (1 << CS32) | (1<< CS30); // set prescalar to 1/1024 of CPU clk = 15.625Khz
    1eb0:	80 91 91 00 	lds	r24, 0x0091
    1eb4:	85 60       	ori	r24, 0x05	; 5
    1eb6:	05 c0       	rjmp	.+10     	; 0x1ec2 <PWMStartTimer+0x1c0>
			//NOTE slower rates aren't possible with internal settings for Timer0.  
			// if you need slower rates check with a different Timer.
		}
		else if(CLKspeed == 6)// external clock, useful for own clock example 10Mhz, or 1Khz...
    1eb8:	66 30       	cpi	r22, 0x06	; 6
    1eba:	31 f4       	brne	.+12     	; 0x1ec8 <PWMStartTimer+0x1c6>
		{
			TCCR3B |= (1 << CS32) | (1<< CS31); // pin T0(PD7) tick on the Falling Edge
    1ebc:	80 91 91 00 	lds	r24, 0x0091
    1ec0:	86 60       	ori	r24, 0x06	; 6
    1ec2:	80 93 91 00 	sts	0x0091, r24
    1ec6:	08 95       	ret
		}
		else if(CLKspeed == 7)
    1ec8:	67 30       	cpi	r22, 0x07	; 7
    1eca:	29 f4       	brne	.+10     	; 0x1ed6 <PWMStartTimer+0x1d4>
		{
			TCCR3B |= (1 << CS32) | (1<< CS31)| (1<< CS30); // Pin T0(PD7) tick on the rising Edge
    1ecc:	80 91 91 00 	lds	r24, 0x0091
    1ed0:	87 60       	ori	r24, 0x07	; 7
    1ed2:	80 93 91 00 	sts	0x0091, r24
    1ed6:	08 95       	ret

00001ed8 <PWMStart>:
*	For people who don't care how fast or slow the PWM frequency is
*	They just care about the duty cycle. this will set all timers to 1/1024 of the CPU clk
* 	15.625Khz will be the frequency of their timer. based on a 16Mhz clock
*/
void PWMStart(uint8_t pin)
{
    1ed8:	98 2f       	mov	r25, r24
	if(pin == 2||pin == 3)// Timer 0: PB7(A), PD0(B)
    1eda:	82 50       	subi	r24, 0x02	; 2
    1edc:	82 30       	cpi	r24, 0x02	; 2
    1ede:	10 f4       	brcc	.+4      	; 0x1ee4 <PWMStart+0xc>
	{
		PWMStartTimer(0,5);
    1ee0:	80 e0       	ldi	r24, 0x00	; 0
    1ee2:	05 c0       	rjmp	.+10     	; 0x1eee <PWMStart+0x16>
	}
	else if(pin == 22 || pin == 23)// Timer 1: PB6(B), PB5(A)
    1ee4:	89 2f       	mov	r24, r25
    1ee6:	86 51       	subi	r24, 0x16	; 22
    1ee8:	82 30       	cpi	r24, 0x02	; 2
    1eea:	18 f4       	brcc	.+6      	; 0x1ef2 <PWMStart+0x1a>
	{
		PWMStartTimer(1,5);		
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	65 e0       	ldi	r22, 0x05	; 5
    1ef0:	06 c0       	rjmp	.+12     	; 0x1efe <PWMStart+0x26>
	}
	else if(pin == 24 || pin == 4)// Timer 2: PB4(A), PD1(B)
    1ef2:	98 31       	cpi	r25, 0x18	; 24
    1ef4:	11 f0       	breq	.+4      	; 0x1efa <PWMStart+0x22>
    1ef6:	94 30       	cpi	r25, 0x04	; 4
    1ef8:	19 f4       	brne	.+6      	; 0x1f00 <PWMStart+0x28>
	{
		PWMStartTimer(2,7);		
    1efa:	82 e0       	ldi	r24, 0x02	; 2
    1efc:	67 e0       	ldi	r22, 0x07	; 7
    1efe:	01 cf       	rjmp	.-510    	; 0x1d02 <PWMStartTimer>
	}
	else if(pin == 17 || pin == 18 || pin == 19)// Timer 3:PC4(C),PC5(B),PC6(C)
    1f00:	91 51       	subi	r25, 0x11	; 17
    1f02:	93 30       	cpi	r25, 0x03	; 3
    1f04:	18 f4       	brcc	.+6      	; 0x1f0c <PWMStart+0x34>
	{
		PWMStartTimer(3,5);
    1f06:	83 e0       	ldi	r24, 0x03	; 3
    1f08:	65 e0       	ldi	r22, 0x05	; 5
    1f0a:	fb ce       	rjmp	.-522    	; 0x1d02 <PWMStartTimer>
    1f0c:	08 95       	ret

00001f0e <PWMDuty>:
/**
*	this will change the duty cycle from 0%(h0x00|d0) to 100%(h0xFF|d255)
*	
**/
void PWMDuty(uint8_t pin, uint8_t dutyCycle)
{
    1f0e:	28 2f       	mov	r18, r24
	if(pin == 2||pin == 3)// Timer 0: PB7(A), PD0(B)
    1f10:	82 50       	subi	r24, 0x02	; 2
    1f12:	82 30       	cpi	r24, 0x02	; 2
    1f14:	30 f4       	brcc	.+12     	; 0x1f22 <PWMDuty+0x14>
	{
		if(pin == 2)
    1f16:	22 30       	cpi	r18, 0x02	; 2
    1f18:	11 f4       	brne	.+4      	; 0x1f1e <PWMDuty+0x10>
			OCR0A = dutyCycle;// this is an 8 bit register pg 100 (13)
    1f1a:	67 bd       	out	0x27, r22	; 39
    1f1c:	08 95       	ret
		else
			OCR0B = dutyCycle;// this is an 8 bit register pg 100 (13)
    1f1e:	68 bd       	out	0x28, r22	; 40
    1f20:	08 95       	ret
			
	}
	else if(pin == 22 || pin == 23)// Timer 1: PB6(B), PB5(A)
    1f22:	82 2f       	mov	r24, r18
    1f24:	86 51       	subi	r24, 0x16	; 22
    1f26:	82 30       	cpi	r24, 0x02	; 2
    1f28:	68 f4       	brcc	.+26     	; 0x1f44 <PWMDuty+0x36>
    1f2a:	70 e0       	ldi	r23, 0x00	; 0
	{
		if(pin == 23)
    1f2c:	27 31       	cpi	r18, 0x17	; 23
    1f2e:	29 f4       	brne	.+10     	; 0x1f3a <PWMDuty+0x2c>
			OCR1A = dutyCycle;
    1f30:	70 93 89 00 	sts	0x0089, r23
    1f34:	60 93 88 00 	sts	0x0088, r22
    1f38:	08 95       	ret
		else
			OCR1B = dutyCycle;
    1f3a:	70 93 8b 00 	sts	0x008B, r23
    1f3e:	60 93 8a 00 	sts	0x008A, r22
    1f42:	08 95       	ret
	}
	else if(pin == 24 || pin == 4)// Timer 2: PB4(A), PD1(B)
    1f44:	28 31       	cpi	r18, 0x18	; 24
    1f46:	19 f0       	breq	.+6      	; 0x1f4e <PWMDuty+0x40>
    1f48:	24 30       	cpi	r18, 0x04	; 4
    1f4a:	39 f4       	brne	.+14     	; 0x1f5a <PWMDuty+0x4c>
    1f4c:	03 c0       	rjmp	.+6      	; 0x1f54 <PWMDuty+0x46>
	{
		if(pin == 24)
			OCR2A = dutyCycle;
    1f4e:	60 93 b3 00 	sts	0x00B3, r22
    1f52:	08 95       	ret
		else
			OCR2B = dutyCycle;
    1f54:	60 93 b4 00 	sts	0x00B4, r22
    1f58:	08 95       	ret
	}
	else if(pin == 17 || pin == 18 || pin == 19)// Timer 3:PC4(C),PC5(B),PC6(C)
    1f5a:	82 2f       	mov	r24, r18
    1f5c:	81 51       	subi	r24, 0x11	; 17
    1f5e:	83 30       	cpi	r24, 0x03	; 3
    1f60:	a8 f4       	brcc	.+42     	; 0x1f8c <PWMDuty+0x7e>
	{
		// Configure pin to be an output
		if(pin == 19)
    1f62:	23 31       	cpi	r18, 0x13	; 19
    1f64:	39 f4       	brne	.+14     	; 0x1f74 <PWMDuty+0x66>
			//OCR3A = dutyCycle;
			OCR3A = dutyCycle;
    1f66:	86 2f       	mov	r24, r22
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	90 93 99 00 	sts	0x0099, r25
    1f6e:	80 93 98 00 	sts	0x0098, r24
    1f72:	08 95       	ret
    1f74:	70 e0       	ldi	r23, 0x00	; 0
		else if(pin == 18)
    1f76:	22 31       	cpi	r18, 0x12	; 18
    1f78:	29 f4       	brne	.+10     	; 0x1f84 <PWMDuty+0x76>
			//OCR3B = dutyCycle;
			OCR3B = dutyCycle;
    1f7a:	70 93 9b 00 	sts	0x009B, r23
    1f7e:	60 93 9a 00 	sts	0x009A, r22
    1f82:	08 95       	ret
		else
			OCR3C = dutyCycle;
    1f84:	70 93 9d 00 	sts	0x009D, r23
    1f88:	60 93 9c 00 	sts	0x009C, r22
    1f8c:	08 95       	ret

00001f8e <FanStatus>:
*	gets the FanSpeed of a specific Fan
* returns 0 - 100 based on the fan speed.
*/
char FanStatus(char FanChar)
{
	uint8_t FanSelect = FanChar - '0';
    1f8e:	80 53       	subi	r24, 0x30	; 48
	if(FanSelect == 0)
    1f90:	19 f4       	brne	.+6      	; 0x1f98 <FanStatus+0xa>
	{
		return FanZeroStatus;
    1f92:	80 91 0a 01 	lds	r24, 0x010A
    1f96:	08 95       	ret
	}
	else if(FanSelect == 2)
    1f98:	82 30       	cpi	r24, 0x02	; 2
    1f9a:	19 f4       	brne	.+6      	; 0x1fa2 <FanStatus+0x14>
	{
		return FanTwoStatus;
    1f9c:	80 91 0c 01 	lds	r24, 0x010C
    1fa0:	08 95       	ret
	}
	else if(FanSelect == 3)
    1fa2:	83 30       	cpi	r24, 0x03	; 3
    1fa4:	19 f4       	brne	.+6      	; 0x1fac <FanStatus+0x1e>
	{
		return FanThreeStatus;
    1fa6:	80 91 0d 01 	lds	r24, 0x010D
    1faa:	08 95       	ret
	}
	else 
	{
		return FanFourStatus;
    1fac:	80 91 0e 01 	lds	r24, 0x010E
	}
}
    1fb0:	08 95       	ret

00001fb2 <FanSpeedStatus>:
*	gets the FanSpeed of a specific Fan
*	returns 0,1,2..8,9
*/
char FanSpeedStatus(char FanChar)
{
	if(FanChar == '0')
    1fb2:	80 33       	cpi	r24, 0x30	; 48
    1fb4:	19 f4       	brne	.+6      	; 0x1fbc <FanSpeedStatus+0xa>
	{
		return FanZeroSpeed;
    1fb6:	80 91 0f 01 	lds	r24, 0x010F
    1fba:	08 95       	ret
	}
	else if(FanChar == '2')
    1fbc:	82 33       	cpi	r24, 0x32	; 50
    1fbe:	19 f4       	brne	.+6      	; 0x1fc6 <FanSpeedStatus+0x14>
	{
		return FanTwoSpeed;
    1fc0:	80 91 11 01 	lds	r24, 0x0111
    1fc4:	08 95       	ret
	}
	else if(FanChar == '3')
    1fc6:	83 33       	cpi	r24, 0x33	; 51
    1fc8:	19 f4       	brne	.+6      	; 0x1fd0 <FanSpeedStatus+0x1e>
	{
		return FanThreeSpeed;
    1fca:	80 91 12 01 	lds	r24, 0x0112
    1fce:	08 95       	ret
	}
	else if(FanChar == '4')
    1fd0:	84 33       	cpi	r24, 0x34	; 52
    1fd2:	11 f0       	breq	.+4      	; 0x1fd8 <FanSpeedStatus+0x26>
    1fd4:	8e e6       	ldi	r24, 0x6E	; 110
    1fd6:	08 95       	ret
	{
		return FanFourSpeed;
    1fd8:	80 91 13 01 	lds	r24, 0x0113
	}
	return 'n';// if invalid input.
}
    1fdc:	08 95       	ret

00001fde <CharToSpeed>:
*	returns a value from 0(0) to 255(10)
* returns 0 if invalid.
*/
uint8_t CharToSpeed(char speed)
{
	if(speed == '0')
    1fde:	80 33       	cpi	r24, 0x30	; 48
    1fe0:	21 f1       	breq	.+72     	; 0x202a <CharToSpeed+0x4c>
		return 0;
	else if(speed == '1')
    1fe2:	81 33       	cpi	r24, 0x31	; 49
    1fe4:	11 f4       	brne	.+4      	; 0x1fea <CharToSpeed+0xc>
    1fe6:	8c e1       	ldi	r24, 0x1C	; 28
    1fe8:	08 95       	ret
		return 28;
	else if(speed == '2')
    1fea:	82 33       	cpi	r24, 0x32	; 50
    1fec:	11 f4       	brne	.+4      	; 0x1ff2 <CharToSpeed+0x14>
    1fee:	88 e3       	ldi	r24, 0x38	; 56
    1ff0:	08 95       	ret
		return 56;
	else if(speed == '3')
    1ff2:	83 33       	cpi	r24, 0x33	; 51
    1ff4:	11 f4       	brne	.+4      	; 0x1ffa <CharToSpeed+0x1c>
    1ff6:	85 e5       	ldi	r24, 0x55	; 85
    1ff8:	08 95       	ret
		return 85;
	else if(speed == '4')
    1ffa:	84 33       	cpi	r24, 0x34	; 52
    1ffc:	11 f4       	brne	.+4      	; 0x2002 <CharToSpeed+0x24>
    1ffe:	81 e7       	ldi	r24, 0x71	; 113
    2000:	08 95       	ret
		return 113;
	else if(speed == '5')
    2002:	85 33       	cpi	r24, 0x35	; 53
    2004:	11 f4       	brne	.+4      	; 0x200a <CharToSpeed+0x2c>
    2006:	8d e8       	ldi	r24, 0x8D	; 141
    2008:	08 95       	ret
		return 141;
	else if(speed == '6')
    200a:	86 33       	cpi	r24, 0x36	; 54
    200c:	11 f4       	brne	.+4      	; 0x2012 <CharToSpeed+0x34>
    200e:	8a ea       	ldi	r24, 0xAA	; 170
    2010:	08 95       	ret
		return 170;
	else if(speed == '7')
    2012:	87 33       	cpi	r24, 0x37	; 55
    2014:	11 f4       	brne	.+4      	; 0x201a <CharToSpeed+0x3c>
    2016:	86 ec       	ldi	r24, 0xC6	; 198
    2018:	08 95       	ret
		return 198;
	else if(speed == '8')
    201a:	88 33       	cpi	r24, 0x38	; 56
    201c:	11 f4       	brne	.+4      	; 0x2022 <CharToSpeed+0x44>
    201e:	82 ee       	ldi	r24, 0xE2	; 226
    2020:	08 95       	ret
		return 226;
	else if(speed == '9')
    2022:	89 33       	cpi	r24, 0x39	; 57
    2024:	11 f4       	brne	.+4      	; 0x202a <CharToSpeed+0x4c>
    2026:	8f ef       	ldi	r24, 0xFF	; 255
    2028:	08 95       	ret
    202a:	80 e0       	ldi	r24, 0x00	; 0
		return 255;
	else
		return 0;
}
    202c:	08 95       	ret

0000202e <TurnFanOff>:
* 	duty cycle of the fan to represent off.
*	return 0 if sucessful, and 1 for invalid input.
*/
uint8_t TurnFanOff(char FanChar)
{
	uint8_t FanSelect = FanChar - '0';
    202e:	80 53       	subi	r24, 0x30	; 48
	//	Fan 0 pin3(PD0),
	if(FanSelect == 0)
    2030:	49 f4       	brne	.+18     	; 0x2044 <TurnFanOff+0x16>
	{
		PWMDuty(3, 0);
    2032:	83 e0       	ldi	r24, 0x03	; 3
    2034:	60 e0       	ldi	r22, 0x00	; 0
    2036:	6b df       	rcall	.-298    	; 0x1f0e <PWMDuty>
		FanZeroStatus = '0';
    2038:	80 e3       	ldi	r24, 0x30	; 48
    203a:	80 93 0a 01 	sts	0x010A, r24
		FanZeroSpeed = '0';
    203e:	80 93 0f 01 	sts	0x010F, r24
    2042:	15 c0       	rjmp	.+42     	; 0x206e <TurnFanOff+0x40>
	}
	else if(FanSelect == 2)
    2044:	82 30       	cpi	r24, 0x02	; 2
    2046:	49 f4       	brne	.+18     	; 0x205a <TurnFanOff+0x2c>
	{
		PWMDuty(17, 0);
    2048:	81 e1       	ldi	r24, 0x11	; 17
    204a:	60 e0       	ldi	r22, 0x00	; 0
    204c:	60 df       	rcall	.-320    	; 0x1f0e <PWMDuty>
		FanTwoStatus = '0';
    204e:	80 e3       	ldi	r24, 0x30	; 48
    2050:	80 93 0c 01 	sts	0x010C, r24
		FanTwoSpeed = '0';
    2054:	80 93 11 01 	sts	0x0111, r24
    2058:	0a c0       	rjmp	.+20     	; 0x206e <TurnFanOff+0x40>
	}
	else if(FanSelect == 3)
    205a:	83 30       	cpi	r24, 0x03	; 3
    205c:	51 f4       	brne	.+20     	; 0x2072 <TurnFanOff+0x44>
	{
		PWMDuty(18, 0);
    205e:	82 e1       	ldi	r24, 0x12	; 18
    2060:	60 e0       	ldi	r22, 0x00	; 0
    2062:	55 df       	rcall	.-342    	; 0x1f0e <PWMDuty>
		FanThreeStatus = 0;
    2064:	10 92 0d 01 	sts	0x010D, r1
		FanThreeSpeed = '0';
    2068:	80 e3       	ldi	r24, 0x30	; 48
    206a:	80 93 12 01 	sts	0x0112, r24
    206e:	80 e0       	ldi	r24, 0x00	; 0
    2070:	08 95       	ret
	}
	else if(FanSelect == 4)
    2072:	84 30       	cpi	r24, 0x04	; 4
    2074:	11 f0       	breq	.+4      	; 0x207a <TurnFanOff+0x4c>
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	08 95       	ret
	{
		PWMDuty(19, 0);
    207a:	83 e1       	ldi	r24, 0x13	; 19
    207c:	60 e0       	ldi	r22, 0x00	; 0
    207e:	47 df       	rcall	.-370    	; 0x1f0e <PWMDuty>
		FanFourStatus = '0';
    2080:	80 e3       	ldi	r24, 0x30	; 48
    2082:	80 93 0e 01 	sts	0x010E, r24
		FanFourSpeed = '0';
    2086:	80 93 13 01 	sts	0x0113, r24
    208a:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
		return 1;
	return 0;
	
}
    208c:	08 95       	ret

0000208e <SetFan>:
* 	returns 0 if successfully changed.
* 	else returns the fan number(OFFSET by +1) of the other fan that is currently on.
* 	this would be an Error
*/
uint8_t SetFan(char FanChar, char FanSpeedchar)
{
    208e:	0f 93       	push	r16
    2090:	1f 93       	push	r17
    2092:	98 2f       	mov	r25, r24
    2094:	06 2f       	mov	r16, r22
	//NOTE about circuit design.
		//bail one is already running, and we can't over draw circuit
		// can change if you supply 1.5 amp power supply to each fan.
		// to do this you would just need a L7812 voltage reg for each.
		// it would be good to have a heatsink on each of them.
	if(FanZeroStatus == '1' && FanChar != '0')//return 1 for fan 0
    2096:	80 91 0a 01 	lds	r24, 0x010A
    209a:	81 33       	cpi	r24, 0x31	; 49
    209c:	19 f4       	brne	.+6      	; 0x20a4 <SetFan+0x16>
    209e:	90 33       	cpi	r25, 0x30	; 48
    20a0:	09 f0       	breq	.+2      	; 0x20a4 <SetFan+0x16>
    20a2:	47 c0       	rjmp	.+142    	; 0x2132 <__stack+0x33>
	{
		return 1;
	}
	else if(FanTwoStatus == '1' && FanChar != '2')//return 3 for fan 2
    20a4:	80 91 0c 01 	lds	r24, 0x010C
    20a8:	81 33       	cpi	r24, 0x31	; 49
    20aa:	21 f4       	brne	.+8      	; 0x20b4 <SetFan+0x26>
    20ac:	92 33       	cpi	r25, 0x32	; 50
    20ae:	11 f0       	breq	.+4      	; 0x20b4 <SetFan+0x26>
    20b0:	83 e0       	ldi	r24, 0x03	; 3
    20b2:	40 c0       	rjmp	.+128    	; 0x2134 <__stack+0x35>
	{
		return 3;
	}	
	else if(FanThreeStatus=='1' && FanChar != '3')//return 4 for fan 3
    20b4:	80 91 0d 01 	lds	r24, 0x010D
    20b8:	81 33       	cpi	r24, 0x31	; 49
    20ba:	21 f4       	brne	.+8      	; 0x20c4 <SetFan+0x36>
    20bc:	93 33       	cpi	r25, 0x33	; 51
    20be:	11 f0       	breq	.+4      	; 0x20c4 <SetFan+0x36>
    20c0:	84 e0       	ldi	r24, 0x04	; 4
    20c2:	38 c0       	rjmp	.+112    	; 0x2134 <__stack+0x35>
	{
		return 4;
	}
	else if(FanFourStatus == '1' && FanChar != '4')//return 5 for fan 4
    20c4:	80 91 0e 01 	lds	r24, 0x010E
    20c8:	81 33       	cpi	r24, 0x31	; 49
    20ca:	21 f4       	brne	.+8      	; 0x20d4 <SetFan+0x46>
    20cc:	94 33       	cpi	r25, 0x34	; 52
    20ce:	11 f0       	breq	.+4      	; 0x20d4 <SetFan+0x46>
    20d0:	85 e0       	ldi	r24, 0x05	; 5
    20d2:	30 c0       	rjmp	.+96     	; 0x2134 <__stack+0x35>
* 	else returns the fan number(OFFSET by +1) of the other fan that is currently on.
* 	this would be an Error
*/
uint8_t SetFan(char FanChar, char FanSpeedchar)
{
	uint8_t FanSelect = FanChar - '0';
    20d4:	19 2f       	mov	r17, r25
    20d6:	10 53       	subi	r17, 0x30	; 48
	uint8_t FanSpeed = CharToSpeed(FanSpeedchar);
    20d8:	80 2f       	mov	r24, r16
    20da:	81 df       	rcall	.-254    	; 0x1fde <CharToSpeed>
    20dc:	68 2f       	mov	r22, r24
	}
	else if(FanFourStatus == '1' && FanChar != '4')//return 5 for fan 4
	{
		return 5;
	}
	else if(FanSelect == 0)
    20de:	11 23       	and	r17, r17
    20e0:	41 f4       	brne	.+16     	; 0x20f2 <SetFan+0x64>
	{
		FanZeroStatus = '1';
    20e2:	81 e3       	ldi	r24, 0x31	; 49
    20e4:	80 93 0a 01 	sts	0x010A, r24
		//set duty cycle
		PWMDuty(3, FanSpeed);
    20e8:	83 e0       	ldi	r24, 0x03	; 3
    20ea:	11 df       	rcall	.-478    	; 0x1f0e <PWMDuty>
		FanZeroSpeed = FanSpeedchar;
    20ec:	00 93 0f 01 	sts	0x010F, r16
    20f0:	1f c0       	rjmp	.+62     	; 0x2130 <__stack+0x31>
	}
	else if(FanSelect == 2)
    20f2:	12 30       	cpi	r17, 0x02	; 2
    20f4:	41 f4       	brne	.+16     	; 0x2106 <__stack+0x7>
	{
		FanTwoStatus = '1';
    20f6:	81 e3       	ldi	r24, 0x31	; 49
    20f8:	80 93 0c 01 	sts	0x010C, r24
		//set duty cycle
		PWMDuty(17, FanSpeed);
    20fc:	81 e1       	ldi	r24, 0x11	; 17
    20fe:	07 df       	rcall	.-498    	; 0x1f0e <PWMDuty>
		FanTwoSpeed = FanSpeedchar;
    2100:	00 93 11 01 	sts	0x0111, r16
    2104:	15 c0       	rjmp	.+42     	; 0x2130 <__stack+0x31>
	}
	else if(FanSelect == 3)
    2106:	13 30       	cpi	r17, 0x03	; 3
    2108:	41 f4       	brne	.+16     	; 0x211a <__stack+0x1b>
	{
		FanThreeStatus = '1';
    210a:	81 e3       	ldi	r24, 0x31	; 49
    210c:	80 93 0d 01 	sts	0x010D, r24
		//set duty cycle
		PWMDuty(18, FanSpeed);
    2110:	82 e1       	ldi	r24, 0x12	; 18
    2112:	fd de       	rcall	.-518    	; 0x1f0e <PWMDuty>
		FanThreeSpeed = FanSpeedchar;
    2114:	00 93 12 01 	sts	0x0112, r16
    2118:	0b c0       	rjmp	.+22     	; 0x2130 <__stack+0x31>
	}
	else if(FanSelect == 4)
    211a:	14 30       	cpi	r17, 0x04	; 4
    211c:	11 f0       	breq	.+4      	; 0x2122 <__stack+0x23>
    211e:	8f ef       	ldi	r24, 0xFF	; 255
    2120:	09 c0       	rjmp	.+18     	; 0x2134 <__stack+0x35>
	{
		FanThreeStatus = '1';
    2122:	81 e3       	ldi	r24, 0x31	; 49
    2124:	80 93 0d 01 	sts	0x010D, r24
		//set duty cycle
		PWMDuty(19, FanSpeed);
    2128:	83 e1       	ldi	r24, 0x13	; 19
    212a:	f1 de       	rcall	.-542    	; 0x1f0e <PWMDuty>
		FanFourSpeed = FanSpeedchar;
    212c:	00 93 13 01 	sts	0x0113, r16
    2130:	01 c0       	rjmp	.+2      	; 0x2134 <__stack+0x35>
	}
	else
	{
		return 255;//max invalid fan.
	}
}
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	1f 91       	pop	r17
    2136:	0f 91       	pop	r16
    2138:	08 95       	ret

0000213a <InitializeFans>:
*	initializes the pins for the fans.
*/
void InitializeFans()
{
	//configure the fans that we want to use.
	PWMNew(3);
    213a:	83 e0       	ldi	r24, 0x03	; 3
    213c:	79 dd       	rcall	.-1294   	; 0x1c30 <PWMNew>
	PWMNew(17);
    213e:	81 e1       	ldi	r24, 0x11	; 17
    2140:	77 dd       	rcall	.-1298   	; 0x1c30 <PWMNew>
	PWMNew(18);
    2142:	82 e1       	ldi	r24, 0x12	; 18
    2144:	75 dd       	rcall	.-1302   	; 0x1c30 <PWMNew>
	PWMNew(19);
    2146:	83 e1       	ldi	r24, 0x13	; 19
    2148:	73 dd       	rcall	.-1306   	; 0x1c30 <PWMNew>
	PWMDuty(3, 0);
    214a:	83 e0       	ldi	r24, 0x03	; 3
    214c:	60 e0       	ldi	r22, 0x00	; 0
    214e:	df de       	rcall	.-578    	; 0x1f0e <PWMDuty>
	PWMDuty(17, 0);
    2150:	81 e1       	ldi	r24, 0x11	; 17
    2152:	60 e0       	ldi	r22, 0x00	; 0
    2154:	dc de       	rcall	.-584    	; 0x1f0e <PWMDuty>
	PWMDuty(18, 0);
    2156:	82 e1       	ldi	r24, 0x12	; 18
    2158:	60 e0       	ldi	r22, 0x00	; 0
    215a:	d9 de       	rcall	.-590    	; 0x1f0e <PWMDuty>
	PWMDuty(19, 0);
    215c:	83 e1       	ldi	r24, 0x13	; 19
    215e:	60 e0       	ldi	r22, 0x00	; 0
    2160:	d6 de       	rcall	.-596    	; 0x1f0e <PWMDuty>
	PWMStartTimer(3,4);
    2162:	83 e0       	ldi	r24, 0x03	; 3
    2164:	64 e0       	ldi	r22, 0x04	; 4
    2166:	cd dd       	rcall	.-1126   	; 0x1d02 <PWMStartTimer>
	PWMStartTimer(17,4);
    2168:	81 e1       	ldi	r24, 0x11	; 17
    216a:	64 e0       	ldi	r22, 0x04	; 4
    216c:	ca dd       	rcall	.-1132   	; 0x1d02 <PWMStartTimer>
	PWMStartTimer(18,4);
    216e:	82 e1       	ldi	r24, 0x12	; 18
    2170:	64 e0       	ldi	r22, 0x04	; 4
    2172:	c7 dd       	rcall	.-1138   	; 0x1d02 <PWMStartTimer>
	PWMStartTimer(19,4);
    2174:	83 e1       	ldi	r24, 0x13	; 19
    2176:	64 e0       	ldi	r22, 0x04	; 4
	
	
}
    2178:	c4 cd       	rjmp	.-1144   	; 0x1d02 <PWMStartTimer>

0000217a <__udivmodhi4>:
    217a:	aa 1b       	sub	r26, r26
    217c:	bb 1b       	sub	r27, r27
    217e:	51 e1       	ldi	r21, 0x11	; 17
    2180:	07 c0       	rjmp	.+14     	; 0x2190 <__udivmodhi4_ep>

00002182 <__udivmodhi4_loop>:
    2182:	aa 1f       	adc	r26, r26
    2184:	bb 1f       	adc	r27, r27
    2186:	a6 17       	cp	r26, r22
    2188:	b7 07       	cpc	r27, r23
    218a:	10 f0       	brcs	.+4      	; 0x2190 <__udivmodhi4_ep>
    218c:	a6 1b       	sub	r26, r22
    218e:	b7 0b       	sbc	r27, r23

00002190 <__udivmodhi4_ep>:
    2190:	88 1f       	adc	r24, r24
    2192:	99 1f       	adc	r25, r25
    2194:	5a 95       	dec	r21
    2196:	a9 f7       	brne	.-22     	; 0x2182 <__udivmodhi4_loop>
    2198:	80 95       	com	r24
    219a:	90 95       	com	r25
    219c:	bc 01       	movw	r22, r24
    219e:	cd 01       	movw	r24, r26
    21a0:	08 95       	ret

000021a2 <_exit>:
    21a2:	f8 94       	cli

000021a4 <__stop_program>:
    21a4:	ff cf       	rjmp	.-2      	; 0x21a4 <__stop_program>
