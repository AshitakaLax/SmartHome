
lightsensordriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000006d2  00000766  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800102  00800102  00000768  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000768  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000081  00000000  00000000  00000e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00000eb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000135  00000000  00000000  00000f95  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000009d6  00000000  00000000  000010ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003a4  00000000  00000000  00001aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000b4b  00000000  00000000  00001e44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000140  00000000  00000000  00002990  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000369  00000000  00000000  00002ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000916  00000000  00000000  00002e39  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000010a  00000000  00000000  0000374f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000d0  00000000  00000000  00003859  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	be c0       	rjmp	.+380    	; 0x17e <__ctors_end>
   2:	00 00       	nop
   4:	d7 c0       	rjmp	.+430    	; 0x1b4 <__bad_interrupt>
   6:	00 00       	nop
   8:	d5 c0       	rjmp	.+426    	; 0x1b4 <__bad_interrupt>
   a:	00 00       	nop
   c:	d3 c0       	rjmp	.+422    	; 0x1b4 <__bad_interrupt>
   e:	00 00       	nop
  10:	d1 c0       	rjmp	.+418    	; 0x1b4 <__bad_interrupt>
  12:	00 00       	nop
  14:	cf c0       	rjmp	.+414    	; 0x1b4 <__bad_interrupt>
  16:	00 00       	nop
  18:	cd c0       	rjmp	.+410    	; 0x1b4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	cb c0       	rjmp	.+406    	; 0x1b4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	c9 c0       	rjmp	.+402    	; 0x1b4 <__bad_interrupt>
  22:	00 00       	nop
  24:	c7 c0       	rjmp	.+398    	; 0x1b4 <__bad_interrupt>
  26:	00 00       	nop
  28:	5e c1       	rjmp	.+700    	; 0x2e6 <__vector_10>
  2a:	00 00       	nop
  2c:	9b c1       	rjmp	.+822    	; 0x364 <__vector_11>
  2e:	00 00       	nop
  30:	c1 c0       	rjmp	.+386    	; 0x1b4 <__bad_interrupt>
  32:	00 00       	nop
  34:	bf c0       	rjmp	.+382    	; 0x1b4 <__bad_interrupt>
  36:	00 00       	nop
  38:	bd c0       	rjmp	.+378    	; 0x1b4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	bb c0       	rjmp	.+374    	; 0x1b4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	b9 c0       	rjmp	.+370    	; 0x1b4 <__bad_interrupt>
  42:	00 00       	nop
  44:	b7 c0       	rjmp	.+366    	; 0x1b4 <__bad_interrupt>
  46:	00 00       	nop
  48:	b5 c0       	rjmp	.+362    	; 0x1b4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	b3 c0       	rjmp	.+358    	; 0x1b4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	b1 c0       	rjmp	.+354    	; 0x1b4 <__bad_interrupt>
  52:	00 00       	nop
  54:	af c0       	rjmp	.+350    	; 0x1b4 <__bad_interrupt>
  56:	00 00       	nop
  58:	ad c0       	rjmp	.+346    	; 0x1b4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	ab c0       	rjmp	.+342    	; 0x1b4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	a9 c0       	rjmp	.+338    	; 0x1b4 <__bad_interrupt>
  62:	00 00       	nop
  64:	a7 c0       	rjmp	.+334    	; 0x1b4 <__bad_interrupt>
  66:	00 00       	nop
  68:	a5 c0       	rjmp	.+330    	; 0x1b4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	a3 c0       	rjmp	.+326    	; 0x1b4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	a1 c0       	rjmp	.+322    	; 0x1b4 <__bad_interrupt>
  72:	00 00       	nop
  74:	9f c0       	rjmp	.+318    	; 0x1b4 <__bad_interrupt>
  76:	00 00       	nop
  78:	9d c0       	rjmp	.+314    	; 0x1b4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	9b c0       	rjmp	.+310    	; 0x1b4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	99 c0       	rjmp	.+306    	; 0x1b4 <__bad_interrupt>
  82:	00 00       	nop
  84:	97 c0       	rjmp	.+302    	; 0x1b4 <__bad_interrupt>
  86:	00 00       	nop
  88:	95 c0       	rjmp	.+298    	; 0x1b4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	93 c0       	rjmp	.+294    	; 0x1b4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	91 c0       	rjmp	.+290    	; 0x1b4 <__bad_interrupt>
  92:	00 00       	nop
  94:	8f c0       	rjmp	.+286    	; 0x1b4 <__bad_interrupt>
  96:	00 00       	nop
  98:	8d c0       	rjmp	.+282    	; 0x1b4 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	8b c0       	rjmp	.+278    	; 0x1b4 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	89 c0       	rjmp	.+274    	; 0x1b4 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	87 c0       	rjmp	.+270    	; 0x1b4 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	85 c0       	rjmp	.+266    	; 0x1b4 <__bad_interrupt>
  aa:	00 00       	nop

000000ac <__c.1709>:
  ac:	0a 00                                               ..

000000ae <__c.1707>:
  ae:	20 30 78 00                                          0x.

000000b2 <__c.1705>:
  b2:	30 78 00                                            0x.

000000b5 <descriptor_list>:
  b5:	00 01 00 00 ec 00 12 00 02 00 00 fe 00 22 00 22     ............."."
  c5:	00 00 20 01 15 00 21 00 00 10 01 09 00 03 00 00     .. ...!.........
  d5:	35 01 04 01 03 09 04 39 01 14 02 03 09 04 4f 01     5......9......O.
  e5:	20                                                   

000000e6 <endpoint_config_table>:
  e6:	00 00 01 c1 26 00                                   ....&.

000000ec <device_descriptor>:
  ec:	12 01 00 02 00 00 00 20 c0 16 79 04 00 01 01 02     ....... ..y.....
  fc:	00 01                                               ..

000000fe <config1_descriptor>:
  fe:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
 10e:	00 00 09 21 11 01 00 01 22 15 00 07 05 83 03 20     ...!...."...... 
 11e:	00 01                                               ..

00000120 <hid_report_descriptor>:
 120:	06 31 ff 09 74 a1 53 75 08 15 00 26 ff 00 95 20     .1..t.Su...&... 
 130:	09 75 81 02 c0                                      .u...

00000135 <string0>:
 135:	04 03 09 04                                         ....

00000139 <string1>:
 139:	14 03 59 00 6f 00 75 00 72 00 20 00 4e 00 61 00     ..Y.o.u.r. .N.a.
 149:	6d 00 65 00 00 00                                   m.e...

0000014f <string2>:
 14f:	20 03 59 00 6f 00 75 00 72 00 20 00 55 00 53 00      .Y.o.u.r. .U.S.
 15f:	42 00 20 00 44 00 65 00 76 00 69 00 63 00 65 00     B. .D.e.v.i.c.e.
 16f:	00 00                                               ..

00000171 <pin_to_mux.1409>:
 171:	00 01 04 05 06 07 25 24 23 22 21 20 00              ......%$#"! .

0000017e <__ctors_end>:
 17e:	11 24       	eor	r1, r1
 180:	1f be       	out	0x3f, r1	; 63
 182:	cf ef       	ldi	r28, 0xFF	; 255
 184:	da e0       	ldi	r29, 0x0A	; 10
 186:	de bf       	out	0x3e, r29	; 62
 188:	cd bf       	out	0x3d, r28	; 61

0000018a <__do_copy_data>:
 18a:	11 e0       	ldi	r17, 0x01	; 1
 18c:	a0 e0       	ldi	r26, 0x00	; 0
 18e:	b1 e0       	ldi	r27, 0x01	; 1
 190:	e2 ed       	ldi	r30, 0xD2	; 210
 192:	f6 e0       	ldi	r31, 0x06	; 6
 194:	02 c0       	rjmp	.+4      	; 0x19a <__do_copy_data+0x10>
 196:	05 90       	lpm	r0, Z+
 198:	0d 92       	st	X+, r0
 19a:	a2 30       	cpi	r26, 0x02	; 2
 19c:	b1 07       	cpc	r27, r17
 19e:	d9 f7       	brne	.-10     	; 0x196 <__do_copy_data+0xc>

000001a0 <__do_clear_bss>:
 1a0:	11 e0       	ldi	r17, 0x01	; 1
 1a2:	a2 e0       	ldi	r26, 0x02	; 2
 1a4:	b1 e0       	ldi	r27, 0x01	; 1
 1a6:	01 c0       	rjmp	.+2      	; 0x1aa <.do_clear_bss_start>

000001a8 <.do_clear_bss_loop>:
 1a8:	1d 92       	st	X+, r1

000001aa <.do_clear_bss_start>:
 1aa:	a5 30       	cpi	r26, 0x05	; 5
 1ac:	b1 07       	cpc	r27, r17
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <.do_clear_bss_loop>
 1b0:	02 d0       	rcall	.+4      	; 0x1b6 <main>
 1b2:	8d c2       	rjmp	.+1306   	; 0x6ce <_exit>

000001b4 <__bad_interrupt>:
 1b4:	25 cf       	rjmp	.-438    	; 0x0 <__vectors>

000001b6 <main>:

void write_to_usb_debug(int16_t num_to_print);

int 
main(void)
{
 1b6:	ef 92       	push	r14
 1b8:	ff 92       	push	r15
 1ba:	0f 93       	push	r16
 1bc:	1f 93       	push	r17
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
    LED_CONFIG;
 1c2:	56 9a       	sbi	0x0a, 6	; 10
    LED_OFF;
 1c4:	5e 98       	cbi	0x0b, 6	; 11

    // initialize the USB, but don't want for the host to
    // configure.  The first several messages sent will be
    // lost because the PC hasn't configured the USB yet,
    // but we care more about blinking than debug messages!
    usb_init();
 1c6:	32 d0       	rcall	.+100    	; 0x22c <usb_init>
    // AVCC with external capacitor on AREF pin
    SET_BIT(ADMUX, REFS0, 1);
    SET_BIT(ADMUX, REFS1, 0);
    */
    
    analog_reference(1 << REFS0); // VCC voltage reference
 1c8:	80 e4       	ldi	r24, 0x40	; 64
 1ca:	4f d2       	rcall	.+1182   	; 0x66a <analog_reference>
    
    DDRB |= 1 << 0; // output on PORT B 0
 1cc:	20 9a       	sbi	0x04, 0	; 4
    DDRB |= 1 << 1; // output on PORT B 1
 1ce:	21 9a       	sbi	0x04, 1	; 4
    
    PORTB |= 1 << 1;
 1d0:	29 9a       	sbi	0x05, 1	; 5
    
    while (1)
    {
        int16_t read_number = analog_read(0); // pin ADC0, I hope
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	6e d2       	rcall	.+1244   	; 0x6b2 <analog_read>
 1d6:	d8 2f       	mov	r29, r24
 1d8:	c9 2f       	mov	r28, r25
        int16_t motion_sensor = analog_read(1); // pin ADC1, I hope
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	6a d2       	rcall	.+1236   	; 0x6b2 <analog_read>
 1de:	7c 01       	movw	r14, r24
        print("0x");
 1e0:	82 eb       	ldi	r24, 0xB2	; 178
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	15 d2       	rcall	.+1066   	; 0x610 <print_P>
        phex16(read_number);
 1e6:	0d 2f       	mov	r16, r29
 1e8:	1c 2f       	mov	r17, r28
 1ea:	c8 01       	movw	r24, r16
 1ec:	36 d2       	rcall	.+1132   	; 0x65a <phex16>
        print(" 0x");
 1ee:	8e ea       	ldi	r24, 0xAE	; 174
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e d2       	rcall	.+1052   	; 0x610 <print_P>
        phex16(motion_sensor);
 1f4:	e7 01       	movw	r28, r14
 1f6:	c7 01       	movw	r24, r14
 1f8:	30 d2       	rcall	.+1120   	; 0x65a <phex16>
        
        //print(" (0x");
        //phex16(reference);
                
        //if (read_number > reference)
        if ((unsigned)read_number >= 0x200)
 1fa:	82 e0       	ldi	r24, 0x02	; 2
 1fc:	00 30       	cpi	r16, 0x00	; 0
 1fe:	18 07       	cpc	r17, r24
 200:	18 f0       	brcs	.+6      	; 0x208 <main+0x52>
        {
            LED_ON;
 202:	5e 9a       	sbi	0x0b, 6	; 11
            PORTB |= 1 << 0;
 204:	28 9a       	sbi	0x05, 0	; 5
 206:	02 c0       	rjmp	.+4      	; 0x20c <main+0x56>
        }
        else
        {
            LED_OFF;
 208:	5e 98       	cbi	0x0b, 6	; 11
            PORTB &= ~(1 << 0);
 20a:	28 98       	cbi	0x05, 0	; 5
        }
        
        if ((unsigned)motion_sensor >= 0x200)
 20c:	82 e0       	ldi	r24, 0x02	; 2
 20e:	c0 30       	cpi	r28, 0x00	; 0
 210:	d8 07       	cpc	r29, r24
 212:	10 f0       	brcs	.+4      	; 0x218 <main+0x62>
            PORTB |= 1 << 1;
 214:	29 9a       	sbi	0x05, 1	; 5
 216:	01 c0       	rjmp	.+2      	; 0x21a <main+0x64>
        else
            PORTB &= ~(1 << 1);
 218:	29 98       	cbi	0x05, 1	; 5
        
        print("\n");
 21a:	8c ea       	ldi	r24, 0xAC	; 172
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	f8 d1       	rcall	.+1008   	; 0x610 <print_P>
    }
 220:	d8 cf       	rjmp	.-80     	; 0x1d2 <main+0x1c>

00000222 <usb_wait_in_ready>:


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 222:	80 91 e8 00 	lds	r24, 0x00E8
 226:	80 ff       	sbrs	r24, 0
 228:	fc cf       	rjmp	.-8      	; 0x222 <usb_wait_in_ready>
}
 22a:	08 95       	ret

0000022c <usb_init>:


// initialize USB
void usb_init(void)
{
	HW_CONFIG();
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	80 93 d7 00 	sts	0x00D7, r24
	USB_FREEZE();				// enable USB
 232:	80 ea       	ldi	r24, 0xA0	; 160
 234:	80 93 d8 00 	sts	0x00D8, r24
	PLL_CONFIG();				// config PLL
 238:	82 e1       	ldi	r24, 0x12	; 18
 23a:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
 23c:	09 b4       	in	r0, 0x29	; 41
 23e:	00 fe       	sbrs	r0, 0
 240:	fd cf       	rjmp	.-6      	; 0x23c <usb_init+0x10>
        USB_CONFIG();				// start USB clock
 242:	80 e9       	ldi	r24, 0x90	; 144
 244:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
 248:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
 24c:	10 92 02 01 	sts	0x0102, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
 250:	8c e0       	ldi	r24, 0x0C	; 12
 252:	80 93 e2 00 	sts	0x00E2, r24
	sei();
 256:	78 94       	sei
}
 258:	08 95       	ret

0000025a <usb_debug_putchar>:
{
	static uint8_t previous_timeout=0;
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 25a:	90 91 02 01 	lds	r25, 0x0102
 25e:	99 23       	and	r25, r25
 260:	09 f4       	brne	.+2      	; 0x264 <usb_debug_putchar+0xa>
 262:	3d c0       	rjmp	.+122    	; 0x2de <usb_debug_putchar+0x84>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
 264:	9f b7       	in	r25, 0x3f	; 63
	cli();
 266:	f8 94       	cli
	UENUM = DEBUG_TX_ENDPOINT;
 268:	23 e0       	ldi	r18, 0x03	; 3
 26a:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (previous_timeout) {
 26e:	20 91 04 01 	lds	r18, 0x0104
 272:	22 23       	and	r18, r18
 274:	41 f0       	breq	.+16     	; 0x286 <usb_debug_putchar+0x2c>
		if (!(UEINTX & (1<<RWAL))) {
 276:	20 91 e8 00 	lds	r18, 0x00E8
 27a:	25 fd       	sbrc	r18, 5
 27c:	02 c0       	rjmp	.+4      	; 0x282 <usb_debug_putchar+0x28>
			SREG = intr_state;
 27e:	9f bf       	out	0x3f, r25	; 63
 280:	2e c0       	rjmp	.+92     	; 0x2de <usb_debug_putchar+0x84>
			return -1;
		}
		previous_timeout = 0;
 282:	10 92 04 01 	sts	0x0104, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + 4;
 286:	20 91 e4 00 	lds	r18, 0x00E4
 28a:	2c 5f       	subi	r18, 0xFC	; 252
		// has the USB gone offline?
		if (!usb_configuration) return -1;
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = DEBUG_TX_ENDPOINT;
 28c:	33 e0       	ldi	r19, 0x03	; 3
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + 4;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
 28e:	40 91 e8 00 	lds	r20, 0x00E8
 292:	45 fd       	sbrc	r20, 5
 294:	12 c0       	rjmp	.+36     	; 0x2ba <usb_debug_putchar+0x60>
		SREG = intr_state;
 296:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?
		if (UDFNUML == timeout) {
 298:	90 91 e4 00 	lds	r25, 0x00E4
 29c:	92 17       	cp	r25, r18
 29e:	21 f4       	brne	.+8      	; 0x2a8 <usb_debug_putchar+0x4e>
			previous_timeout = 1;
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	80 93 04 01 	sts	0x0104, r24
 2a6:	1b c0       	rjmp	.+54     	; 0x2de <usb_debug_putchar+0x84>
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
 2a8:	90 91 02 01 	lds	r25, 0x0102
 2ac:	99 23       	and	r25, r25
 2ae:	c9 f0       	breq	.+50     	; 0x2e2 <usb_debug_putchar+0x88>
		// get ready to try checking again
		intr_state = SREG;
 2b0:	9f b7       	in	r25, 0x3f	; 63
		cli();
 2b2:	f8 94       	cli
		UENUM = DEBUG_TX_ENDPOINT;
 2b4:	30 93 e9 00 	sts	0x00E9, r19
	}
 2b8:	ea cf       	rjmp	.-44     	; 0x28e <usb_debug_putchar+0x34>
	// actually write the byte into the FIFO
	UEDATX = c;
 2ba:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) {
 2be:	80 91 e8 00 	lds	r24, 0x00E8
 2c2:	85 fd       	sbrc	r24, 5
 2c4:	06 c0       	rjmp	.+12     	; 0x2d2 <usb_debug_putchar+0x78>
		UEINTX = 0x3A;
 2c6:	8a e3       	ldi	r24, 0x3A	; 58
 2c8:	80 93 e8 00 	sts	0x00E8, r24
		debug_flush_timer = 0;
 2cc:	10 92 03 01 	sts	0x0103, r1
 2d0:	03 c0       	rjmp	.+6      	; 0x2d8 <usb_debug_putchar+0x7e>
	} else {
		debug_flush_timer = 2;
 2d2:	82 e0       	ldi	r24, 0x02	; 2
 2d4:	80 93 03 01 	sts	0x0103, r24
	}
	SREG = intr_state;
 2d8:	9f bf       	out	0x3f, r25	; 63
	return 0;
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	08 95       	ret
{
	static uint8_t previous_timeout=0;
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 2de:	8f ef       	ldi	r24, 0xFF	; 255
 2e0:	08 95       	ret
		if (UDFNUML == timeout) {
			previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
 2e2:	8f ef       	ldi	r24, 0xFF	; 255
	} else {
		debug_flush_timer = 2;
	}
	SREG = intr_state;
	return 0;
}
 2e4:	08 95       	ret

000002e6 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
 2e6:	1f 92       	push	r1
 2e8:	0f 92       	push	r0
 2ea:	0f b6       	in	r0, 0x3f	; 63
 2ec:	0f 92       	push	r0
 2ee:	11 24       	eor	r1, r1
 2f0:	8f 93       	push	r24
 2f2:	9f 93       	push	r25
	uint8_t intbits, t;

        intbits = UDINT;
 2f4:	80 91 e1 00 	lds	r24, 0x00E1
        UDINT = 0;
 2f8:	10 92 e1 00 	sts	0x00E1, r1
        if (intbits & (1<<EORSTI)) {
 2fc:	83 ff       	sbrs	r24, 3
 2fe:	0f c0       	rjmp	.+30     	; 0x31e <__vector_10+0x38>
		UENUM = 0;
 300:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
 304:	91 e0       	ldi	r25, 0x01	; 1
 306:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
 30a:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 30e:	92 e2       	ldi	r25, 0x22	; 34
 310:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
 314:	98 e0       	ldi	r25, 0x08	; 8
 316:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
 31a:	10 92 02 01 	sts	0x0102, r1
        }
	if (intbits & (1<<SOFI)) {
 31e:	82 ff       	sbrs	r24, 2
 320:	1a c0       	rjmp	.+52     	; 0x356 <__vector_10+0x70>
		if (usb_configuration) {
 322:	80 91 02 01 	lds	r24, 0x0102
 326:	88 23       	and	r24, r24
 328:	b1 f0       	breq	.+44     	; 0x356 <__vector_10+0x70>
			t = debug_flush_timer;
 32a:	80 91 03 01 	lds	r24, 0x0103
			if (t) {
 32e:	88 23       	and	r24, r24
 330:	91 f0       	breq	.+36     	; 0x356 <__vector_10+0x70>
				debug_flush_timer = -- t;
 332:	81 50       	subi	r24, 0x01	; 1
 334:	80 93 03 01 	sts	0x0103, r24
				if (!t) {
 338:	88 23       	and	r24, r24
 33a:	69 f4       	brne	.+26     	; 0x356 <__vector_10+0x70>
					UENUM = DEBUG_TX_ENDPOINT;
 33c:	83 e0       	ldi	r24, 0x03	; 3
 33e:	80 93 e9 00 	sts	0x00E9, r24
					while ((UEINTX & (1<<RWAL))) {
 342:	02 c0       	rjmp	.+4      	; 0x348 <__vector_10+0x62>
						UEDATX = 0;
 344:	10 92 f1 00 	sts	0x00F1, r1
			t = debug_flush_timer;
			if (t) {
				debug_flush_timer = -- t;
				if (!t) {
					UENUM = DEBUG_TX_ENDPOINT;
					while ((UEINTX & (1<<RWAL))) {
 348:	80 91 e8 00 	lds	r24, 0x00E8
 34c:	85 fd       	sbrc	r24, 5
 34e:	fa cf       	rjmp	.-12     	; 0x344 <__vector_10+0x5e>
						UEDATX = 0;
					}
					UEINTX = 0x3A;
 350:	8a e3       	ldi	r24, 0x3A	; 58
 352:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
 356:	9f 91       	pop	r25
 358:	8f 91       	pop	r24
 35a:	0f 90       	pop	r0
 35c:	0f be       	out	0x3f, r0	; 63
 35e:	0f 90       	pop	r0
 360:	1f 90       	pop	r1
 362:	18 95       	reti

00000364 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 364:	1f 92       	push	r1
 366:	0f 92       	push	r0
 368:	0f b6       	in	r0, 0x3f	; 63
 36a:	0f 92       	push	r0
 36c:	11 24       	eor	r1, r1
 36e:	ef 92       	push	r14
 370:	ff 92       	push	r15
 372:	0f 93       	push	r16
 374:	1f 93       	push	r17
 376:	2f 93       	push	r18
 378:	3f 93       	push	r19
 37a:	4f 93       	push	r20
 37c:	5f 93       	push	r21
 37e:	6f 93       	push	r22
 380:	7f 93       	push	r23
 382:	8f 93       	push	r24
 384:	9f 93       	push	r25
 386:	af 93       	push	r26
 388:	bf 93       	push	r27
 38a:	ef 93       	push	r30
 38c:	ff 93       	push	r31
 38e:	df 93       	push	r29
 390:	cf 93       	push	r28
 392:	0f 92       	push	r0
 394:	cd b7       	in	r28, 0x3d	; 61
 396:	de b7       	in	r29, 0x3e	; 62
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 398:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
 39c:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
 3a0:	83 ff       	sbrs	r24, 3
 3a2:	1b c1       	rjmp	.+566    	; 0x5da <__vector_11+0x276>
                bmRequestType = UEDATX;
 3a4:	40 91 f1 00 	lds	r20, 0x00F1
                bRequest = UEDATX;
 3a8:	50 91 f1 00 	lds	r21, 0x00F1
                wValue = UEDATX;
 3ac:	00 91 f1 00 	lds	r16, 0x00F1
 3b0:	10 e0       	ldi	r17, 0x00	; 0
                wValue |= (UEDATX << 8);
 3b2:	20 91 f1 00 	lds	r18, 0x00F1
 3b6:	92 2f       	mov	r25, r18
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	08 2b       	or	r16, r24
 3bc:	19 2b       	or	r17, r25
                wIndex = UEDATX;
 3be:	e0 90 f1 00 	lds	r14, 0x00F1
 3c2:	ff 24       	eor	r15, r15
                wIndex |= (UEDATX << 8);
 3c4:	20 91 f1 00 	lds	r18, 0x00F1
 3c8:	92 2f       	mov	r25, r18
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	e8 2a       	or	r14, r24
 3ce:	f9 2a       	or	r15, r25
                wLength = UEDATX;
 3d0:	20 91 f1 00 	lds	r18, 0x00F1
 3d4:	30 e0       	ldi	r19, 0x00	; 0
                wLength |= (UEDATX << 8);
 3d6:	60 91 f1 00 	lds	r22, 0x00F1
 3da:	96 2f       	mov	r25, r22
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	28 2b       	or	r18, r24
 3e0:	39 2b       	or	r19, r25
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 3e2:	82 ef       	ldi	r24, 0xF2	; 242
 3e4:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
 3e8:	56 30       	cpi	r21, 0x06	; 6
 3ea:	09 f0       	breq	.+2      	; 0x3ee <__vector_11+0x8a>
 3ec:	53 c0       	rjmp	.+166    	; 0x494 <__vector_11+0x130>

// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
 3ee:	8c eb       	ldi	r24, 0xBC	; 188
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	ac 01       	movw	r20, r24
 3f4:	45 50       	subi	r20, 0x05	; 5
 3f6:	50 40       	sbci	r21, 0x00	; 0
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
 3f8:	fc 01       	movw	r30, r24
 3fa:	37 97       	sbiw	r30, 0x07	; 7
				}
				desc_val = pgm_read_word(list);
 3fc:	65 91       	lpm	r22, Z+
 3fe:	74 91       	lpm	r23, Z+
				if (desc_val != wValue) {
 400:	60 17       	cp	r22, r16
 402:	71 07       	cpc	r23, r17
 404:	c9 f4       	brne	.+50     	; 0x438 <__vector_11+0xd4>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
 406:	fa 01       	movw	r30, r20
 408:	65 91       	lpm	r22, Z+
 40a:	74 91       	lpm	r23, Z+
				if (desc_val != wIndex) {
 40c:	6e 15       	cp	r22, r14
 40e:	7f 05       	cpc	r23, r15
 410:	99 f4       	brne	.+38     	; 0x438 <__vector_11+0xd4>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
 412:	4e 5f       	subi	r20, 0xFE	; 254
 414:	5f 4f       	sbci	r21, 0xFF	; 255
				desc_addr = (const uint8_t *)pgm_read_word(list);
 416:	fa 01       	movw	r30, r20
 418:	85 91       	lpm	r24, Z+
 41a:	94 91       	lpm	r25, Z+
				list += 2;
 41c:	4e 5f       	subi	r20, 0xFE	; 254
 41e:	5f 4f       	sbci	r21, 0xFF	; 255
				desc_length = pgm_read_byte(list);
 420:	fa 01       	movw	r30, r20
 422:	44 91       	lpm	r20, Z+
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 424:	2f 3f       	cpi	r18, 0xFF	; 255
 426:	31 05       	cpc	r19, r1
 428:	19 f0       	breq	.+6      	; 0x430 <__vector_11+0xcc>
 42a:	10 f0       	brcs	.+4      	; 0x430 <__vector_11+0xcc>
 42c:	2f ef       	ldi	r18, 0xFF	; 255
 42e:	30 e0       	ldi	r19, 0x00	; 0
 430:	24 17       	cp	r18, r20
 432:	50 f4       	brcc	.+20     	; 0x448 <__vector_11+0xe4>
 434:	42 2f       	mov	r20, r18
 436:	08 c0       	rjmp	.+16     	; 0x448 <__vector_11+0xe4>
 438:	07 96       	adiw	r24, 0x07	; 7
 43a:	49 5f       	subi	r20, 0xF9	; 249
 43c:	5f 4f       	sbci	r21, 0xFF	; 255
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	8d 3e       	cpi	r24, 0xED	; 237
 442:	9f 07       	cpc	r25, r31
 444:	c9 f6       	brne	.-78     	; 0x3f8 <__vector_11+0x94>
 446:	c9 c0       	rjmp	.+402    	; 0x5da <__vector_11+0x276>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 448:	ae ef       	ldi	r26, 0xFE	; 254
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 44a:	20 91 e8 00 	lds	r18, 0x00E8
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	b9 01       	movw	r22, r18
 452:	65 70       	andi	r22, 0x05	; 5
 454:	70 70       	andi	r23, 0x00	; 0
 456:	61 15       	cp	r22, r1
 458:	71 05       	cpc	r23, r1
 45a:	b9 f3       	breq	.-18     	; 0x44a <__vector_11+0xe6>
				if (i & (1<<RXOUTI)) return;	// abort
 45c:	22 fd       	sbrc	r18, 2
 45e:	c0 c0       	rjmp	.+384    	; 0x5e0 <__vector_11+0x27c>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 460:	54 2f       	mov	r21, r20
 462:	41 32       	cpi	r20, 0x21	; 33
 464:	08 f0       	brcs	.+2      	; 0x468 <__vector_11+0x104>
 466:	50 e2       	ldi	r21, 0x20	; 32
				for (i = n; i; i--) {
 468:	9c 01       	movw	r18, r24
 46a:	65 2f       	mov	r22, r21
 46c:	07 c0       	rjmp	.+14     	; 0x47c <__vector_11+0x118>
 46e:	f9 01       	movw	r30, r18
					UEDATX = pgm_read_byte(desc_addr++);
 470:	2f 5f       	subi	r18, 0xFF	; 255
 472:	3f 4f       	sbci	r19, 0xFF	; 255
 474:	e4 91       	lpm	r30, Z+
 476:	e0 93 f1 00 	sts	0x00F1, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 47a:	61 50       	subi	r22, 0x01	; 1
 47c:	66 23       	and	r22, r22
 47e:	b9 f7       	brne	.-18     	; 0x46e <__vector_11+0x10a>
 480:	85 0f       	add	r24, r21
 482:	91 1d       	adc	r25, r1
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 484:	45 1b       	sub	r20, r21
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 486:	a0 93 e8 00 	sts	0x00E8, r26
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 48a:	44 23       	and	r20, r20
 48c:	f1 f6       	brne	.-68     	; 0x44a <__vector_11+0xe6>
 48e:	50 32       	cpi	r21, 0x20	; 32
 490:	e1 f2       	breq	.-72     	; 0x44a <__vector_11+0xe6>
 492:	a6 c0       	rjmp	.+332    	; 0x5e0 <__vector_11+0x27c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 494:	55 30       	cpi	r21, 0x05	; 5
 496:	41 f4       	brne	.+16     	; 0x4a8 <__vector_11+0x144>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 498:	8e ef       	ldi	r24, 0xFE	; 254
 49a:	80 93 e8 00 	sts	0x00E8, r24
			} while (len || n == ENDPOINT0_SIZE);
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
 49e:	c1 de       	rcall	.-638    	; 0x222 <usb_wait_in_ready>
			UDADDR = wValue | (1<<ADDEN);
 4a0:	00 68       	ori	r16, 0x80	; 128
 4a2:	00 93 e3 00 	sts	0x00E3, r16
			return;
 4a6:	9c c0       	rjmp	.+312    	; 0x5e0 <__vector_11+0x27c>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 4a8:	59 30       	cpi	r21, 0x09	; 9
 4aa:	31 f5       	brne	.+76     	; 0x4f8 <__vector_11+0x194>
 4ac:	44 23       	and	r20, r20
 4ae:	09 f0       	breq	.+2      	; 0x4b2 <__vector_11+0x14e>
 4b0:	94 c0       	rjmp	.+296    	; 0x5da <__vector_11+0x276>
			usb_configuration = wValue;
 4b2:	00 93 02 01 	sts	0x0102, r16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 4b6:	8e ef       	ldi	r24, 0xFE	; 254
 4b8:	80 93 e8 00 	sts	0x00E8, r24
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 4bc:	41 e0       	ldi	r20, 0x01	; 1
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
 4be:	86 ee       	ldi	r24, 0xE6	; 230
 4c0:	90 e0       	ldi	r25, 0x00	; 0
			for (i=1; i<5; i++) {
				UENUM = i;
 4c2:	40 93 e9 00 	sts	0x00E9, r20
				en = pgm_read_byte(cfg++);
 4c6:	fc 01       	movw	r30, r24
 4c8:	01 96       	adiw	r24, 0x01	; 1
 4ca:	e4 91       	lpm	r30, Z+
				UECONX = en;
 4cc:	e0 93 eb 00 	sts	0x00EB, r30
				if (en) {
 4d0:	ee 23       	and	r30, r30
 4d2:	69 f0       	breq	.+26     	; 0x4ee <__vector_11+0x18a>
					UECFG0X = pgm_read_byte(cfg++);
 4d4:	9c 01       	movw	r18, r24
 4d6:	2f 5f       	subi	r18, 0xFF	; 255
 4d8:	3f 4f       	sbci	r19, 0xFF	; 255
 4da:	fc 01       	movw	r30, r24
 4dc:	84 91       	lpm	r24, Z+
 4de:	80 93 ec 00 	sts	0x00EC, r24
					UECFG1X = pgm_read_byte(cfg++);
 4e2:	c9 01       	movw	r24, r18
 4e4:	01 96       	adiw	r24, 0x01	; 1
 4e6:	f9 01       	movw	r30, r18
 4e8:	24 91       	lpm	r18, Z+
 4ea:	20 93 ed 00 	sts	0x00ED, r18
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 4ee:	4f 5f       	subi	r20, 0xFF	; 255
 4f0:	45 30       	cpi	r20, 0x05	; 5
 4f2:	39 f7       	brne	.-50     	; 0x4c2 <__vector_11+0x15e>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 4f4:	8e e1       	ldi	r24, 0x1E	; 30
 4f6:	46 c0       	rjmp	.+140    	; 0x584 <__vector_11+0x220>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 4f8:	58 30       	cpi	r21, 0x08	; 8
 4fa:	49 f4       	brne	.+18     	; 0x50e <__vector_11+0x1aa>
 4fc:	40 38       	cpi	r20, 0x80	; 128
 4fe:	09 f0       	breq	.+2      	; 0x502 <__vector_11+0x19e>
 500:	6c c0       	rjmp	.+216    	; 0x5da <__vector_11+0x276>
			usb_wait_in_ready();
 502:	8f de       	rcall	.-738    	; 0x222 <usb_wait_in_ready>
			UEDATX = usb_configuration;
 504:	80 91 02 01 	lds	r24, 0x0102
 508:	80 93 f1 00 	sts	0x00F1, r24
 50c:	16 c0       	rjmp	.+44     	; 0x53a <__vector_11+0x1d6>
			usb_send_in();
			return;
		}

		if (bRequest == GET_STATUS) {
 50e:	55 23       	and	r21, r21
 510:	c1 f4       	brne	.+48     	; 0x542 <__vector_11+0x1de>
			usb_wait_in_ready();
 512:	49 83       	std	Y+1, r20	; 0x01
 514:	86 de       	rcall	.-756    	; 0x222 <usb_wait_in_ready>
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 516:	49 81       	ldd	r20, Y+1	; 0x01
 518:	42 38       	cpi	r20, 0x82	; 130
 51a:	51 f4       	brne	.+20     	; 0x530 <__vector_11+0x1cc>
				UENUM = wIndex;
 51c:	e0 92 e9 00 	sts	0x00E9, r14
				if (UECONX & (1<<STALLRQ)) i = 1;
 520:	90 91 eb 00 	lds	r25, 0x00EB
			return;
		}

		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	95 ff       	sbrs	r25, 5
 528:	80 e0       	ldi	r24, 0x00	; 0
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
 52a:	10 92 e9 00 	sts	0x00E9, r1
 52e:	01 c0       	rjmp	.+2      	; 0x532 <__vector_11+0x1ce>
			return;
		}

		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
 530:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
 532:	80 93 f1 00 	sts	0x00F1, r24
			UEDATX = 0;
 536:	10 92 f1 00 	sts	0x00F1, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 53a:	8e ef       	ldi	r24, 0xFE	; 254
 53c:	80 93 e8 00 	sts	0x00E8, r24
 540:	4f c0       	rjmp	.+158    	; 0x5e0 <__vector_11+0x27c>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 542:	51 30       	cpi	r21, 0x01	; 1
 544:	19 f0       	breq	.+6      	; 0x54c <__vector_11+0x1e8>
 546:	53 30       	cpi	r21, 0x03	; 3
 548:	09 f0       	breq	.+2      	; 0x54c <__vector_11+0x1e8>
 54a:	47 c0       	rjmp	.+142    	; 0x5da <__vector_11+0x276>
		  && bmRequestType == 0x02 && wValue == 0) {
 54c:	42 30       	cpi	r20, 0x02	; 2
 54e:	f9 f4       	brne	.+62     	; 0x58e <__vector_11+0x22a>
 550:	01 15       	cp	r16, r1
 552:	11 05       	cpc	r17, r1
 554:	e1 f4       	brne	.+56     	; 0x58e <__vector_11+0x22a>
			i = wIndex & 0x7F;
 556:	6e 2d       	mov	r22, r14
 558:	6f 77       	andi	r22, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 55a:	86 2f       	mov	r24, r22
 55c:	81 50       	subi	r24, 0x01	; 1
 55e:	84 30       	cpi	r24, 0x04	; 4
 560:	b0 f4       	brcc	.+44     	; 0x58e <__vector_11+0x22a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 562:	8e ef       	ldi	r24, 0xFE	; 254
 564:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 568:	60 93 e9 00 	sts	0x00E9, r22
				if (bRequest == SET_FEATURE) {
 56c:	53 30       	cpi	r21, 0x03	; 3
 56e:	a9 f1       	breq	.+106    	; 0x5da <__vector_11+0x276>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 570:	89 e1       	ldi	r24, 0x19	; 25
 572:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	02 c0       	rjmp	.+4      	; 0x580 <__vector_11+0x21c>
 57c:	88 0f       	add	r24, r24
 57e:	99 1f       	adc	r25, r25
 580:	6a 95       	dec	r22
 582:	e2 f7       	brpl	.-8      	; 0x57c <__vector_11+0x218>
 584:	80 93 ea 00 	sts	0x00EA, r24
					UERST = 0;
 588:	10 92 ea 00 	sts	0x00EA, r1
 58c:	29 c0       	rjmp	.+82     	; 0x5e0 <__vector_11+0x27c>
				}
				return;
			}
		}
		#endif
		if (bRequest == HID_GET_REPORT && bmRequestType == 0xA1) {
 58e:	51 30       	cpi	r21, 0x01	; 1
 590:	21 f5       	brne	.+72     	; 0x5da <__vector_11+0x276>
 592:	41 3a       	cpi	r20, 0xA1	; 161
 594:	11 f5       	brne	.+68     	; 0x5da <__vector_11+0x276>
			if (wIndex == 0) {
 596:	e1 14       	cp	r14, r1
 598:	f1 04       	cpc	r15, r1
 59a:	f9 f4       	brne	.+62     	; 0x5da <__vector_11+0x276>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 59c:	3e ef       	ldi	r19, 0xFE	; 254
			if (wIndex == 0) {
				len = wLength;
				do {
					// wait for host ready for IN packet
					do {
						i = UEINTX;
 59e:	80 91 e8 00 	lds	r24, 0x00E8
					} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	ac 01       	movw	r20, r24
 5a6:	45 70       	andi	r20, 0x05	; 5
 5a8:	50 70       	andi	r21, 0x00	; 0
 5aa:	41 15       	cp	r20, r1
 5ac:	51 05       	cpc	r21, r1
 5ae:	b9 f3       	breq	.-18     	; 0x59e <__vector_11+0x23a>
					if (i & (1<<RXOUTI)) return;	// abort
 5b0:	82 fd       	sbrc	r24, 2
 5b2:	16 c0       	rjmp	.+44     	; 0x5e0 <__vector_11+0x27c>
					// send IN packet
					n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 5b4:	82 2f       	mov	r24, r18
 5b6:	21 32       	cpi	r18, 0x21	; 33
 5b8:	08 f0       	brcs	.+2      	; 0x5bc <__vector_11+0x258>
 5ba:	80 e2       	ldi	r24, 0x20	; 32
					for (i = n; i; i--) {
 5bc:	98 2f       	mov	r25, r24
 5be:	03 c0       	rjmp	.+6      	; 0x5c6 <__vector_11+0x262>
						UEDATX = 0;
 5c0:	10 92 f1 00 	sts	0x00F1, r1
						i = UEINTX;
					} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
					if (i & (1<<RXOUTI)) return;	// abort
					// send IN packet
					n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
					for (i = n; i; i--) {
 5c4:	91 50       	subi	r25, 0x01	; 1
 5c6:	99 23       	and	r25, r25
 5c8:	d9 f7       	brne	.-10     	; 0x5c0 <__vector_11+0x25c>
						UEDATX = 0;
					}
					len -= n;
 5ca:	28 1b       	sub	r18, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 5cc:	30 93 e8 00 	sts	0x00E8, r19
					for (i = n; i; i--) {
						UEDATX = 0;
					}
					len -= n;
					usb_send_in();
				} while (len || n == ENDPOINT0_SIZE);
 5d0:	22 23       	and	r18, r18
 5d2:	29 f7       	brne	.-54     	; 0x59e <__vector_11+0x23a>
 5d4:	80 32       	cpi	r24, 0x20	; 32
 5d6:	19 f3       	breq	.-58     	; 0x59e <__vector_11+0x23a>
 5d8:	03 c0       	rjmp	.+6      	; 0x5e0 <__vector_11+0x27c>
				return;
			}
		}
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 5da:	81 e2       	ldi	r24, 0x21	; 33
 5dc:	80 93 eb 00 	sts	0x00EB, r24
}
 5e0:	0f 90       	pop	r0
 5e2:	cf 91       	pop	r28
 5e4:	df 91       	pop	r29
 5e6:	ff 91       	pop	r31
 5e8:	ef 91       	pop	r30
 5ea:	bf 91       	pop	r27
 5ec:	af 91       	pop	r26
 5ee:	9f 91       	pop	r25
 5f0:	8f 91       	pop	r24
 5f2:	7f 91       	pop	r23
 5f4:	6f 91       	pop	r22
 5f6:	5f 91       	pop	r21
 5f8:	4f 91       	pop	r20
 5fa:	3f 91       	pop	r19
 5fc:	2f 91       	pop	r18
 5fe:	1f 91       	pop	r17
 600:	0f 91       	pop	r16
 602:	ff 90       	pop	r15
 604:	ef 90       	pop	r14
 606:	0f 90       	pop	r0
 608:	0f be       	out	0x3f, r0	; 63
 60a:	0f 90       	pop	r0
 60c:	1f 90       	pop	r1
 60e:	18 95       	reti

00000610 <print_P>:
#include <avr/pgmspace.h>

#include "print.h"

void print_P(const char *s)
{
 610:	1f 93       	push	r17
 612:	cf 93       	push	r28
 614:	df 93       	push	r29
 616:	ec 01       	movw	r28, r24
 618:	fe 01       	movw	r30, r28
	char c;

	while (1) {
		c = pgm_read_byte(s++);
 61a:	21 96       	adiw	r28, 0x01	; 1
 61c:	14 91       	lpm	r17, Z+
		if (!c) 
 61e:	11 23       	and	r17, r17
 620:	39 f0       	breq	.+14     	; 0x630 <print_P+0x20>
		    break;
		if (c == '\n') 
 622:	1a 30       	cpi	r17, 0x0A	; 10
 624:	11 f4       	brne	.+4      	; 0x62a <print_P+0x1a>
		    usb_debug_putchar('\r');
 626:	8d e0       	ldi	r24, 0x0D	; 13
 628:	18 de       	rcall	.-976    	; 0x25a <usb_debug_putchar>
		usb_debug_putchar(c);
 62a:	81 2f       	mov	r24, r17
 62c:	16 de       	rcall	.-980    	; 0x25a <usb_debug_putchar>
	}
 62e:	f4 cf       	rjmp	.-24     	; 0x618 <print_P+0x8>
}
 630:	df 91       	pop	r29
 632:	cf 91       	pop	r28
 634:	1f 91       	pop	r17
 636:	08 95       	ret

00000638 <phex1>:

void phex1(unsigned char c)
{
	usb_debug_putchar(c + ((c < 10) ? '0' : 'A' - 10));
 638:	8a 30       	cpi	r24, 0x0A	; 10
 63a:	10 f4       	brcc	.+4      	; 0x640 <phex1+0x8>
 63c:	90 e3       	ldi	r25, 0x30	; 48
 63e:	01 c0       	rjmp	.+2      	; 0x642 <phex1+0xa>
 640:	97 e3       	ldi	r25, 0x37	; 55
 642:	89 0f       	add	r24, r25
}
 644:	0a ce       	rjmp	.-1004   	; 0x25a <usb_debug_putchar>

00000646 <phex>:

void phex(unsigned char c)
{
 646:	cf 93       	push	r28
 648:	c8 2f       	mov	r28, r24
	phex1(c >> 4);
 64a:	82 95       	swap	r24
 64c:	8f 70       	andi	r24, 0x0F	; 15
 64e:	f4 df       	rcall	.-24     	; 0x638 <phex1>
	phex1(c & 15);
 650:	8c 2f       	mov	r24, r28
 652:	8f 70       	andi	r24, 0x0F	; 15
 654:	f1 df       	rcall	.-30     	; 0x638 <phex1>
}
 656:	cf 91       	pop	r28
 658:	08 95       	ret

0000065a <phex16>:

void phex16(unsigned int i)
{
 65a:	cf 93       	push	r28
 65c:	c8 2f       	mov	r28, r24
	phex(i >> 8);
 65e:	89 2f       	mov	r24, r25
 660:	f2 df       	rcall	.-28     	; 0x646 <phex>
	phex(i);
 662:	8c 2f       	mov	r24, r28
 664:	f0 df       	rcall	.-32     	; 0x646 <phex>
}
 666:	cf 91       	pop	r28
 668:	08 95       	ret

0000066a <analog_reference>:


void 
analog_reference(uint8_t mode)
{
	aref = mode & 0xC0;
 66a:	80 7c       	andi	r24, 0xC0	; 192
 66c:	80 93 00 01 	sts	0x0100, r24
}
 670:	08 95       	ret

00000672 <adc_read>:
#if defined(__AVR_AT90USB162__)
	return 0;
#else
	uint8_t low;

	ADCSRA = (1<<ADEN) | ADC_PRESCALER;		        // enable ADC
 672:	96 e8       	ldi	r25, 0x86	; 134
 674:	90 93 7a 00 	sts	0x007A, r25
	ADCSRB = (1<<ADHSM) | (mux & 0x20);		        // high speed mode
 678:	98 2f       	mov	r25, r24
 67a:	90 72       	andi	r25, 0x20	; 32
 67c:	90 68       	ori	r25, 0x80	; 128
 67e:	90 93 7b 00 	sts	0x007B, r25
	ADMUX = aref | (mux & 0x1F);			        // configure mux input
 682:	8f 71       	andi	r24, 0x1F	; 31
 684:	90 91 00 01 	lds	r25, 0x0100
 688:	89 2b       	or	r24, r25
 68a:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADEN) | ADC_PRESCALER | (1<<ADSC);	// start the conversion
 68e:	86 ec       	ldi	r24, 0xC6	; 198
 690:	80 93 7a 00 	sts	0x007A, r24
	while (ADCSRA & (1<<ADSC)) ;			        // wait for result
 694:	80 91 7a 00 	lds	r24, 0x007A
 698:	86 fd       	sbrc	r24, 6
 69a:	fc cf       	rjmp	.-8      	; 0x694 <adc_read+0x22>
	low = ADCL;					                    // must read LSB first
 69c:	20 91 78 00 	lds	r18, 0x0078
	return (ADCH << 8) | low;			            // must read MSB only once!
 6a0:	30 91 79 00 	lds	r19, 0x0079
 6a4:	93 2f       	mov	r25, r19
 6a6:	80 e0       	ldi	r24, 0x00	; 0
 6a8:	30 e0       	ldi	r19, 0x00	; 0
 6aa:	28 2b       	or	r18, r24
 6ac:	39 2b       	or	r19, r25
#endif
}
 6ae:	c9 01       	movw	r24, r18
 6b0:	08 95       	ret

000006b2 <analog_read>:
{
#if defined(__AVR_ATmega32U4__)
	static const uint8_t PROGMEM pin_to_mux[] = {
		0x00, 0x01, 0x04, 0x05, 0x06, 0x07,
		0x25, 0x24, 0x23, 0x22, 0x21, 0x20};
	if (pin >= 12) 
 6b2:	8c 30       	cpi	r24, 0x0C	; 12
 6b4:	40 f4       	brcc	.+16     	; 0x6c6 <analog_read+0x14>
	    return 0;
	else
    	return adc_read(pgm_read_byte(pin_to_mux + pin));
 6b6:	e8 2f       	mov	r30, r24
 6b8:	f0 e0       	ldi	r31, 0x00	; 0
 6ba:	ef 58       	subi	r30, 0x8F	; 143
 6bc:	fe 4f       	sbci	r31, 0xFE	; 254
 6be:	84 91       	lpm	r24, Z+
 6c0:	d8 df       	rcall	.-80     	; 0x672 <adc_read>
 6c2:	9c 01       	movw	r18, r24
 6c4:	02 c0       	rjmp	.+4      	; 0x6ca <analog_read+0x18>
#if defined(__AVR_ATmega32U4__)
	static const uint8_t PROGMEM pin_to_mux[] = {
		0x00, 0x01, 0x04, 0x05, 0x06, 0x07,
		0x25, 0x24, 0x23, 0x22, 0x21, 0x20};
	if (pin >= 12) 
	    return 0;
 6c6:	20 e0       	ldi	r18, 0x00	; 0
 6c8:	30 e0       	ldi	r19, 0x00	; 0
	else
    	return adc_read(pin);
#else
	return 0;
#endif
}
 6ca:	c9 01       	movw	r24, r18
 6cc:	08 95       	ret

000006ce <_exit>:
 6ce:	f8 94       	cli

000006d0 <__stop_program>:
 6d0:	ff cf       	rjmp	.-2      	; 0x6d0 <__stop_program>
